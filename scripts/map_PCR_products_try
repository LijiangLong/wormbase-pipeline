#!/usr/local/bin/perl -w
#
# map_PCR_products
# v 0.1
#
# Cronjob integrity check controls for generic ACEDB database.
#
# Usage: map_PCR_products [-options]
#
# [010717 kj] modified to (hopefully) run faster

#####################################################################################################


#################################################################################
# variables                                                                     #
#################################################################################

$|=1;
BEGIN {
  unshift (@INC,"/nfs/disk92/PerlSource/Bioperl/Releases/bioperl-0.05");
}
use Bio::Seq;
use IO::Handle;
use Getopt::Std;
use Cwd;
use Ace;
require "/nfs/disk100/wormpub/analysis/scripts/babel.pl";

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainer = "dl1\@sanger.ac.uk kj2\@sanger.ac.uk";
my $rundate = `date +%y%m%d`; chomp $rundate;
my $runtime = `date +%H:%M:%S`; chomp $runtime;

 ##############################
 # command-line options       #
 ##############################

$opt_d="";   # Verbose debug mode
$opt_h="";   # Help/Usage page

getopts ('hd');
&usage(0) if ($opt_h);
my $debug = $opt_d;

 ##############################
 # Paths etc                  #
 ##############################

my $tace = glob("~acedb/RELEASE.DEVELOPMENT/bin.ALPHA_4/tace");    # tace executable path
my $dbdir  = "/wormsrv2/autoace";                                  # Database path
my $gffdir = "/wormsrv2/autoace/CHROMOSOMES";
my @chromosomes = ('I','II','III','IV','V','X' );

 ########################################
 # Open logfile                         #
 ########################################

my $log="/wormsrv2/logs/map_PCR_products.$rundate";

open (LOG,">$log");
LOG->autoflush();

print LOG "# map_PCR_products\n";     
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";

 ########################################
   
foreach $chromosome (@chromosomes) {

    undef (my %PCR);
    undef (my %exon);
    my %PCRcount  = ();
    my %exoncount = ();
    
    open (GFF_in, "<$gffdir/CHROMOSOME_${chromosome}.gff") || die "Failed to open gff file\n\n";
    while (<GFF_in>) {
        chomp;
        s/\#.*//;
        next unless /\S/;
        @f = split /\t/;


	if ($f[1] eq "GenePair_STS") {
	    my ($name) = ($f[8] =~ /PCR_product \"(.*)\"$/);
            $PCRcount{$name}++;
            my $PCRname = $name.".".$PCRcount{$name};
            $PCR{$PCRname} = [$f[3],$f[4]];
	}
	if (($f[2] eq "exon") && ($f[1] eq "curated")) {
            my ($name) = ($f[8] =~ /\"(\S+)\"/);
            $exoncount{$name}++;
            my $exonname = $name.".".$exoncount{$name};
            $exon{$exonname} = [$f[3],$f[4],$f[6]];
	}
	last if (/similarity/);

    }
    close GFF_in;
    
    my @PCRlist = sort { ${$PCR{$a}}[0]  <=> ${$PCR{$b}}[0]  } keys %PCR;
    my @exonlist= sort { ${$exon{$a}}[0] <=> ${$exon{$b}}[0] } keys %exon;
    
    for (my $x = 0; $x < @PCRlist; $x++) {
        my $testPCR = $PCRlist[$x];
        my $start = $PCR{$testPCR}->[0];
        my $stop  = $PCR{$testPCR}->[1];
	print LOG "\n$testPCR\t[$start => $stop]\n";
            
        for (my $y = 0; $y < @exonlist; $y++) {
            my $testexon = $exonlist[$y];
            my $exon_start = $exon{$testexon}->[0];
            my $exon_stop  = $exon{$testexon}->[1];
            my $exon_sense = $exon{$testexon}->[2];
            
            # shortcuts
	    next if ($PCR{$testPCR}->[0] > $exon{$testexon}->[1]);
            last if ($PCR{$testPCR}->[1] < $exon{$testexon}->[0]);
            
            # check overlaps
	    if ( ($exon_stop > $start) && ($exon_start < $start) ) {
		print LOG "exon $testexon\t[$exon_sense] [$exon_start => $exon_stop]\toverlaps beginning of PCR product\n";
		print "$testPCR\t$testexon\n";
	    }
	    if ( ($exon_start > $start) && ($exon_stop < $stop) ) {
		print LOG "exon $testexon\t[$exon_sense] [$exon_start => $exon_stop]\tis internal of PCR product\n";
		print "$testPCR\t$testexon\n";
	    }
	    if ( ($exon_start < $stop) && ($exon_stop > $stop) ) {
		print LOG "exon $testexon\t[$exon_sense] [$exon_start => $exon_stop]\toverlaps end of PCR product\n";
		print "$testPCR\t$testexon\n";
	    }
        }
    }
}

close LOG;

exit(0);











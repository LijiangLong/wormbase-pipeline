#!/usr/local/bin/perl
#
# make_trackace
# v 0.1
#
# dl
#
# Usage :
#
# v 0.1
# 001024 : dl  : PP version

BEGIN {
  unshift (@INC,"/nfs/disk92/PerlSource/Bioperl/Releases/bioperl-0.05");
}
use Bio::Seq;
use Getopt::Std;
use IO::Handle;
use Ace;
require "/nfs/disk100/wormpub/analysis/scripts/babel.pl";

#################################################################################
# Initialise variables                                                          #
#################################################################################

$|=1;

 ##############################
 # paths for I/O files        #
 ##############################

$Wormbase_release_file = "/wormsrv2/autoace_config/WormBase_release_version";
$logfile               = "/wormsrv2/logs/make_trackace.test";
$version = &get_script_version(make_trackace);
$trackacepath  = "/wormsrv2/trackace";
#$WormBasepath = "/wormsrv2/autoace";
$WormBasepath = "/wormsrv2/archive/WS16";
  
$tace="/nfs/disk100/acedb/RELEASE.SUPPORTED/bin.ALPHA_4/tace";

 ##############################
 # deal with command line     #
 ##############################

$opt_d="";   # Verbose debug mode
$opt_h="";   # Help/Usage page

getopts ('dh');

&usage if ($opt_h);
($debug = 1) if ($opt_d);

 ##############################
 # get release versions       #
 ##############################

open (WormBase_release, "<$Wormbase_release_file");
while (<WormBase_release>) {
    chomp;
    $next_release = substr($_,2);
}
close (WormBase_release);

$WS_next = "WS" . $next_release;
$next_release--;
$WS_release = "WS" . $next_release;
$next_release--;
$WS_previous = "WS" . $next_release;
undef $next_release;

 ###############################
 # get date & time             #
 ###############################

my $date = `date +%y%m%d`; 
chomp $date;
my $time = `date +%H:%M:%S`;
chomp $time;

#################################################################################
# Main Loop                                                                     #
#################################################################################

open (LOG,">$logfile");
LOG->autoflush();

if ($debug) {
    print LOG "# make_trackace\n";
    print LOG "# version          : $version\n";
    print LOG "# run details      : $date $time\n";
    print LOG "# WS_release       : $WS_release\n#\n";
}

 ##############################
 # Clean trackace             #
 ##############################

&clean_trackace;

 ##############################
 # Connect to WormBase        #
 ##############################

if ($debug) {print LOG "Opening WormBase ....\n";}
$db = Ace->connect(-path=>$WormBasepath) || do { print "Connection failure: ",Ace->error; die();};
if ($debug) {print LOG "Connection OK.\n\n";}

 ################################################################################
 # Loop through all the Genomic_canonical                                       #
 ################################################################################
 #
 # $db   : WormBase 
 # $db2  : Trackace
 # 
 #
 #
 #


if ($debug) {
    $count = $db->fetch(-query=> 'find Genome_sequence *');
    print LOG "checking $count Genome_sequence objects\n\n";
}

$i = $db->fetch_many(-query=> 'find Genome_sequence *');  
while ($obj = $i->next) {
    $seq = $obj;
    print LOG "\nGenomic_canonical : $seq    \t";
    $dna = $obj->asDNA();
    if (!$dna) {
	print LOG "NOT_IN_ACEDB $seq\n" ;
	next;
    }
    $dna=~s/\>\w+//mg;
    $dna=~tr/a-z/A-Z/;
    $dna=~s/\W+//mg;
    
    $bioseq = Bio::Seq->new(-seq=>$dna,-ffmt=>'Fasta',-type=>'Dna',);
    
    $len = length($dna);
    $lab = $obj->From_Laboratory(1);
    $chk = $bioseq->GCG_checksum;
    
    print LOG "$len \t$chk\t$lab\n";
    
    #####################
    # check in trackace #
    #####################
    
    $db2 = Ace->connect(-path=>$trackacepath) || do { print "Connection failure: ",Ace->error; die();};
    $obj2 = $db2->fetch(Genomic_canonical=>"$seq");
    if (!$obj2) {
	print LOG "$seq is not present in trackace\nCreate a new ?Genomic_canonical object for $seq\n\n";
	&new_Genomic_canonical;
    }
    else {
	print LOG "$seq is present in trackace\nCheck that the ?Sequence is identical\n\n"; 
	$seq_version = $obj2->Current_version(1);
        $current_seq = $seq . "~" . $seq_version;

	$obj3 = $db2->fetch(Sequence=>"$current_seq");
	if (!$obj3) {
	    print LOG "$current_seq is not present in trackace\nWhoops\n\n";
	    exit(1);
	}
	$current_chk   = $obj3->Checksum(1);
	$first_release = $obj3->Release(1);

	# checksums match
	if ($current_chk == $chk) {
	    print LOG "Sequence versions are identical\nJust make it 'Is_active'\n";
	    &make_active($seq,$db2);
	}
	else {
	    print LOG "Sequence versions are different\nJust make it 'Is_active'\n"; 
	    &update_sequence($seq,$seq_version,$first_release);
	    &make_active($seq,$db2);
       }
	$obj2->DESTROY();
    }
    

} # end object loop    


if ($debug) {
	my $db = Ace->connect(-path=>$trackacepath) || do { print "Connection failure: ",Ace->error; die();};
	my $count = $db->fetch(-query=> 'find Golden_path');
	print LOG "\nGolden_path contains $count Genome_sequence objects\n\n";
    }

print LOG "#################################################################\n";

close (LOG);
exit (0);



#################################################################################
# Subroutines                                                                   #
#################################################################################


 ################################################################################
 # Prepare DB by removing all Is_active tags                                    #
 ################################################################################


sub clean_trackace {

    my $deleted = 0;
    my $acefile = "$trackacepath/data/remove_Is_active.ace";
    open (rm_tags, ">$acefile");
    if ($debug) {print  LOG "Opening trackace ....\n";}
    $db = Ace->connect(-path=>$trackacepath) || do { print "Connection failure: ",Ace->error; die();};
    if ($debug) {print LOG "Connection OK.\n\n";}

    $count = $db->fetch(-query=> 'find Golden_path');
    print LOG "Golden_path contains $count Genome_sequence objects\n\n";   

    $i = $db->fetch_many(-query=>'find Golden_path');  
    while ($obj = $i->next) {
	my $seq = $obj;
	print rm_tags "Genomic_canonical : \"$seq\"\n-D Is_active\n\n";
        if ($debug) {
	    print LOG "Deleted Is_active from ?Genomic_canonical : '$seq'\n";
	}
	$deleted++;
	$obj->DESTROY();
    }
    close (rm_tags);

    print "\n";
    my $command=<<END;
pparse $acefile
save
quit
END
    &DbWrite($command,$tace,$trackacepath,"Rm_Tags");
    unlink ($acefile);
    print LOG "Deleted Is_active from $deleted ?Genomic_canonical entries\n\n";
    
    if ($debug) {
	$db = Ace->connect(-path=>$trackacepath) || do { print "Connection failure: ",Ace->error; die();};
	$count = $db->fetch(-query=> 'find Golden_path');
	print LOG "Golden_path contains $count Genome_sequence objects\n\n";
    }
}


#################################################################################
# new_Genomic_canonical                                                         #
#################################################################################

sub new_Genomic_canonical {

    # create object G
    # set From_Laboratory in G
    # set Current_version to 1 in G
    # make new Sequence_version C
    # add DNA and checksum to C
    # make C Current_sequence of G
    # set Flipped if necessary in C
    # set Release with first text in C
    # *LOG* that a new sequence has appeared

    $acefile = "$trackacepath/data/make_trackace.$seq.ace";   
    if ($debug) {print LOG "Write .acefile '$acefile'\n";}

    open (create_obj, ">$acefile") || die "Can't make tmp file\n\n";
    print create_obj "Genomic_canonical \"$seq\"\n";
    print create_obj "Current_version 1\n";
    print create_obj "From_laboratory $lab\n";
    print create_obj "Is_active\n";
    
    print create_obj "\nSequence \"$seq~1\"\n";
    print create_obj "Checksum $chk\n";
    print create_obj "Version_of $seq\n";
    if ($flipped) {print create_obj "Flipped\n";}
    print create_obj "Release $WS_release\n";
    
    print create_obj "\nDNA \"$seq~1\"\n";
    print create_obj "$dna\n";
    close (create_obj);

    if ($debug) {print LOG "Read .acefile  '$acefile'\n\n";}

    my $command=<<END;
pparse $acefile
save
quit
END
    
    if (-e $acefile) {
	&DbWrite($command,$tace,$trackacepath,"ParseFile");
    }
    else {
	print LOG "$acefile is non-existent - skipping ..\n";
    }
    
    unlink ($acefile);

    if ($debug) {print LOG "Save db\n";}
}

###################################################
# Subroutine for updating a sequence version      # 
###################################################
#set second Release Text in C
#	  increment Current_version in G
#	  make new Sequence_version C' in G
#        add DNA and Checksum to C'
#        make C' Current_sequence of G
#        set Flipped if necessary in C'
#        set Release with first text in C'
#	  *LOG* that a sequence update has taken place


sub update_sequence {
    my ($seq,$seq_version,$first_release) = @_;
    my $acefile = "/wormsrv2/trackace/data/update.ace";
    
    my $new_version  = $seq_version + 1;
    my $new_sequence = $seq . "~" . $new_version;
    my $old_sequence = $seq . "~" . $seq_version;

    if ($debug) {print LOG "Write .acefile '$acefile'\n";}
    
    open (update, ">$acefile");
    print update "Genomic_canonical : \"$seq\"\n";
    print update "Current_version $new_version\n";
    print update "Is_active\n\n";
    
    print update "Sequence : \"$old_sequence\"\n";
    print update "Release $first_release $WS_previous\n\n";

    print update "Sequence : \"$new_sequence\"\n";
    print update "Checksum $chk\n";
    print update "Version_of $seq\n";
    if ($flipped) {print update "Flipped\n";}
    print update "Release $WS_release\n";
    
    print update "\nDNA \"$new_sequence\"\n";
    print update "$dna\n\n";
    
    close (update);
    
    if ($debug) {print LOG "Read .acefile  '$acefile'\n\n";}
    
    my $command=<<END;
pparse $acefile
save
quit
END
    
    if (-e $acefile) {
	&DbWrite($command,$tace,$trackacepath,"Update sequence");
    }
    else {
	print LOG "$acefile is non-existent - skipping ..\n";
    }
    
    unlink ($acefile);

    if ($debug) {
	print LOG "Save db\n\n";
	print LOG "Updated ?Genomic_canonical : \"$seq\" to Sequence version $new_version\n";
	print LOG "Updated ?Sequence : \"$old_sequence\" with final WS_release $WS_previous\n";
	print LOG "Created ?Sequence : \"$new_sequence\" with first WS_release $WS_release\n\n";
    }

}

###################################################
# Subroutine for writing to a given database      # 
###################################################

sub DbWrite {
    my ($command,$exec,$dir,$name)=@_;
  open (WRITEDB,"| $exec $dir >> $logfile") or do {print LOGFILE "$name DbWrite failed\n";close LOGFILE; die();};
#    open (WRITEDB,"| $exec $dir ") or do {print "$name DbWrite failed\n";close LOGFILE; die();};
    print WRITEDB $command;
    close WRITEDB;
}

#########################################################
# Subroutine for making a Genomic_canonical 'Is_active' # 
#########################################################

sub make_active {

    my ($seq,$db) = @_;
    my $acefile = "$trackacepath/data/add_Is_active.ace";
    open (add_tag, ">$acefile");
    print add_tag "Genomic_canonical : \"$seq\"\nIs_active\n\n";
    close (add_tag);
    my $command=<<END;
pparse $acefile
save
quit
END
    &DbWrite($command,$tace,$trackacepath,"Add_tag");
    unlink ($acefile);
}


#################################################################################
# Usage                                                                         #
#################################################################################

sub usage {
    exec ('perldoc',$0);
    print "make_trackace\n\n";
    print "Usage : autoace_minder [-options] <version_number>\n";
    print "\n";
    exit (0);
}


__END__

=pod

=head2   NAME - make_trackace

=head1 USAGE

=over 4

=item make_trackace [-options] 

=back

=cut

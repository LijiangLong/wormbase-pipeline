#!/usr/local/bin/perl
#
# gffcheck
# v 0.1
#
# Cronjob integrity check controls for generic ACEDB database.
#
# Usage: gffcheck [-options]
#

#####################################################################################################


#################################################################################
# variables                                                                     #
#################################################################################

$|=1;
BEGIN {
  unshift (@INC,"/nfs/disk92/PerlSource/Bioperl/Releases/bioperl-0.05");
}
use Bio::Seq;
use IO::Handle;
use Getopt::Std;
use Cwd;
use Ace;
require "/nfs/disk100/wormpub/analysis/scripts/babel.pl";

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainer = "dl1\@sanger.ac.uk";
my $rundate = `date +%y%m%d`; chomp $rundate;
my $runtime = `date +%H:%M:%S`; chomp $runtime;
my $version = &get_script_version(gffcheck);

 ##############################
 # command-line options       #
 ##############################

$opt_d="";   # Verbose debug mode
$opt_h="";   # Help/Usage page
$opt_s="";   # check Status tags

getopts ('hd');
&usage(0) if ($opt_h);
my $debug = $opt_d;

 ##############################
 # Paths etc                  #
 ##############################

my $tace = glob("~acedb/RELEASE.DEVELOPMENT/bin.ALPHA_4/tace");    # tace executable path
my $dbdir  = "/wormsrv2/autoace";                                  # Database path
my $gffdir = "/wormsrv2/autoace/GFF_SPLITS";

#my @chromosomes = ('I');0
my @chromosomes = ('I','II','III','IV', 'V','X');
my %confirmed_intron = ();		  

 ########################################
 # Open logfile                         #
 ########################################

my $log="/wormsrv2/logs/gffcheck.$rundate";

#open (LOG,">$log");
#LOG->autoflush();

#print LOG "# gffcheck\n";     
#print LOG "# version        : $version\n";
#print LOG "# run details    : $rundate $runtime\n";
#print LOG "\n";

 ########################################
 # Connect with acedb server            #
 ########################################

my $db = Ace->connect(-path=>$dbdir);


foreach $chromosome (@chromosomes) {

    next if ($_ eq "");

    undef (@coords);
    undef (@introns);

    print "Checking GFF file: 'CHROMOSOME_${chromosome}'\n";

    open (OUT_CAM, ">$gffdir/../CHECKS/CHROMOSOME_${chromosome}.check_intron_cam.gff");
    open (OUT_STL, ">$gffdir/../CHECKS/CHROMOSOME_${chromosome}.check_intron_stl.gff");

    # make a hash for all curated introns

    print "Make a hash for all introns\n";
    open (GFF_in, "/nfs/disk100/wormpub/analysis/scripts/gff_sort $gffdir/GFF_SPLITS/CHROMOSOME_${chromosome}.intron.gff |") || die "Failed to open gff file\n\n";
    while (<GFF_in>) {
	chomp;
	s/\#.*//;
	next unless /\S/;
	@f = split /\t/;
	push (@introns,"$f[3] $f[4] $f[8]");
#	print "# $f[3] $f[4] $f[8]\n";
    }	
    close GFF_in;

#    print "Cycle through introns in .gff file\n\n";

    open (GFF, "<$gffdir/../CHROMOSOMES/CHROMOSOME_${chromosome}.gff") || die "Failed to open gff file\n\n";
    while (<GFF>) {
	
	
	chomp;
	s/\#.*//;
	next unless /\S/;
	
	# split the GFF line
	@f = split /\t/;

	# reset match tag
	$match = 0;

	# Store Genomic_canonical coords
	if ($f[1] eq "Genomic_canonical") {
	    my ($clone) = $f[8] =~ /Sequence \"(\S+)\"/;
#	    print "# Clone:\t$clone  \t$f[3] -> $f[4]\n";
	    push (@coords,"$f[3] $f[4] $clone");
	}
	
	# Confirmed_introns not in gene models
	if ( (($f[2] eq "intron") && ($f[1] eq "") && (not $f[8] =~ /Confirmed_in_UTR/) ) || ( ($f[1] eq "NDB_CDS") && (($f[8] =~ /Confirmed_by_EST/) || ($f[8] =~ /Confirmed_by_cDNA/))) ) {
	    

	    
	    $line = $_;
	    


#	    print "Check through known intron coordinates: $f[3] $f[4]\n";
	    
	    foreach $look (@introns) {
		($start,$stop,$seq) = split (/ /, $look);
	#	print "  => $start $stop $seq\n";
		if (($f[3] == $start) && ($f[4] == $stop) ) {
		    # found match
		    $match = 1;
#		    print " !! found match !!\n";
		    last;
		}
	    }

	    unless ($match == 1) {
		
		foreach $look (@coords) {
		    ($start,$stop,$seq) = split (/ /, $look);
		    if ( ($f[3] > $start) && ($f[4] < $stop) ) {
			$obj = $db->fetch(Sequence=>$seq);
			unless (!defined ($obj)) {
			    $lab=$obj->From_Laboratory(1);
			    $obj->DESTROY();
			}
			if ($lab eq "HX") {
#			    print "CAM => $line Clone:$seq Lab:$lab\n";
			    print OUT_CAM "$line Clone:$seq Lab:$lab\n";
			}
			elsif ($lab eq "RW") {
#			    print  "STL => $line Clone:$seq Lab:$lab\n";
			    print OUT_STL "$line Clone:$seq Lab:$lab\n";
			}
			($seq,$lab) = "";
			$confirmed_intron{$chromosome}++;
		    }
		}
	    }

	
	    
	}
	
	# Short cut 
	last if ($f[1] eq "tandem");
	
    }
    close GFF;
    

    print "Completed GFF file: 'CHROMOSOME_${chromosome}' : Confirmed_introns not in GeneModel $confirmed_intron{$chromosome}\n";

}
close OUT_CAM;
close OUT_STL;



exit(0);


sub numerically {
    $a <=> $b;
}

#######################################################################
# Help and error trap outputs                                         #
#######################################################################

sub run_details {
    print "# dbcheck\n";     
    print "# version        : $version\n";
    print "# run details    : $rundate $runtime\n";
    print "\n";
}


sub usage {
    my $error = shift;

    if ($error == 1) {
        # No WormBase release number file
        print "The WormBase release number cannot be parsed\n";
        print "Check File: '$Wormbase_release_file'\n\n";
        &run_details;
        exit(0);
    }
    elsif ($error == 0) {
        # Normal help menu
        exec ('perldoc',$0);
        exit (0);
    }
}


__END__

=pod

=head1 NAME - dbcheck

=back

=head1 USAGE

=over 4

=item dbcheck [-options]

dbcheck performs a number of integrity/consistency checks against
the dbace database. The script is based on an iterative loop across
all Genome_sequences and LINK* objects.

=back

=head2 dbcheck MANDATORY arguments:

=over 4

=item none

=back

=head2 dbcheck OPTIONAL arguments:

=over 4

=item -h, Help

=item -d, Debug/Verbose mode

=back

=head1 DOCUMENTATION

=over 4

=back

The following checks have been incorporated into dbcheck:

=head2 Status tags

=head3 Genome sequences which are not Finished.

Genome sequences which do not have a Finished tag.

=head3 Genome sequences which are Finished but not Annotated.

Genome sequences which are finished but not annotated.

=head2 File storage on /analysis/cosmids

=head3 Date mismatch between the file system and dbace.

Inconsistent Date_directory tag in ACEDB with respect to the file
system (/analyis/cosmids/current.versions).

For details of how the date dirtectory structure works:
 http://intweb.sanger.ac.uk/Projects/C_elegans/MANUAL

=head3 Sequence mismatch between the file system and dbace. 

This is based on a GCG checksum calculation for the .seq file in 
the date directory and the sequence extracted from ACEDB.

For details of how the date dirtectory structure works:
 http://intweb.sanger.ac.uk/Projects/C_elegans/MANUAL

=head2 Gene Models

=head3 Absence of Source in ?Sequence

All Subsequence Gene Models MUST have a parent ?Sequence.

    i.e. Sequence "ZK637.5"
         Source "ZK637"

=head3 Absence of Source_Exons in ?Sequence

All Subsequence Gene Models MUST have Source_Exons.

    i.e. Sequence "ZK637.5"
         Source_Exons      1   434
                         483   741
                         950  1159
                        1288  1413

=head3 Absence of Method in ?Sequence

All Subsequence Gene Models MUST have a Method tag. Method tags 
are used in two ways: Firstly, as a means of tagging Gene Models
into classes (e.g. 'curated' for active CDS prediction, 'RNA' for
RNA gene) and secondly as an internal ACEDB description of how
to display the object in the F-map.

    i.e. Sequence "ZK637.5"
         Method "curated"

For details of permissible Method tags see:
 http://intweb.sanger.ac.uk/Projects/C_elegans/MANUAL

=head3 Absence of Species tag in ?Sequence

All Subsequence Gene Models MUST have Species tag.

    i.e. Sequence "ZK637.5"
         Species "Caenorhabditis elegans"

=head3 Absence of CDS tag in ?Sequence

All Subsequence Gene Models MUST have a Coding CDS tag.

    i.e. Sequence "ZK637.5"
         Coding CDS

=head3 Mismatch between Parent coordinates and CDS span length

The coordinate span of the Gene Model (1 => n) based on the 
Source_Exon tags MUST be in agreement with the coordinate span
of the Gene Model as a Subsequence of the parent ?Sequence.

    i.e. Sequence "ZK637"
         Subsequence ZK637.5 11124 12536

         Sequence "ZK637.5"
         Source_Exons      1   434
                         483   741
                         950  1159
                        1288  1413

         Span in CDS (ZK637.5) = ( 1413 -     1) + 1 = 1413
         Parent (ZK637)        = (12536 - 11124) + 1 = 1413
                                                       ----


=head2 LINK objects

=head3 CDS Gene Models on SUPERLINK objects

CDS Gene Models are not allowed as children of SUPERLINK objects.

=head1 AUTHOR - Daniel Lawson

Email dl1@sanger.ac.uk

=cut








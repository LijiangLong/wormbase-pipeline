#!/usr/local/bin/perl
#
#
#FUNCTION:  This script should maintain the ftp site with respect
#           to unfinished cosmids. It will also remove any cosmids which
#           have become finished from the unfinished directory.  
#	    Script requires dump2fasta (S.Dear, Sanger Centre) and sequence
#           databases to be kept in xbap or xgap format and interrogates 
#           acedb to find finshed status of the sequence objects
#
#AUTHOR:   Steven Jones
#          The Sanger Centre
#          Hinxton
#          Cambridge
#
#CREATED:  950113
#          960814 changed so that cosmid names are derived from squirrel databases
#
#VARIABLES: $maintainer - set to email address of curator of the site
#           $mincontig - set to the minimum contig wanted in the ftp site
#           $shotgundir - set to directory the sequences should be placed
#	     	$ENV{'ACEDB'} - set to the acedb directory
#
#
#########################################################################

#unshift (@INC,"/nfs/disk100/wormpub/analysis/scripts");

require glob('~wormpub/analysis/scripts/sjj-sanger.pl');
require 'ctime.pl';

#select((select(STDOUT),$|=1)[0]);
#select((select(STDERR),$|=1)[0]);

#set the program to run as a child so that errors can be collected.
#if ($ENV{'CHILD'} !=1){
#	$ENV{'CHILD'} = "1";
#	system (" echo 'shotgunned_to_FTP_site >&!  /tmp/errors$$' | csh");
#	system ("rsh  adnah  mail nobody  < /tmp/errors$$");
#	unlink "errors$$";
#	exit;
#}

#true start of program

my $CE_FTPDIR = '/nfs/disk69/ftp/pub3/databases/C.elegans_sequences';

$shotgundir=<$CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED/>;
$mincontig=1000;
$exec=&tace;

# AG 991026 Simply use an "hardwired" list of the 7 last clones
# because pace is no longer maintained
#
#&get_cosmid_names;

@cosmids = (Y105E8,Y111B2,Y39B6,Y67H2,Y59A8);

# AG 991026 Also removed these subroutines because pace no longer maintained
# only 7 clones will be written in the directory 
#
#&remove_finished_cosmids_from_shotgunned;
#&remove_cancelled_cosmids_from_shotgunned;

&place_contigs_ftp_site;

exit;

########################################################################
#Subroutine to place fasta contigs of >1000bp of unfinished 
#cosmida in the ftp site
########################################################################


sub place_contigs_ftp_site {
  
  #open the status file
    $ftphome=&tilda(ftp);
#  open (STATUS,">$ftphome/pub3/databases/C.elegans_sequences/000HTGSSTATUS");
#  select((select(STATUS),$|=1)[0]);
    
  COSMID:foreach $clone (@cosmids){
     
      print "#############\nEntering with cosmid $clone\n";
      $first=0;
      print "\ntesting project $clone\n";
     
     
      open (TESTSQUR,"echo 'pfind $clone' | /usr/bin/csh - |");
      while (<TESTSQUR>) {
	  print $_;
	  s/\s+$//;
	  if (/(\S+)$/) {$user="jes";$userpath=$1;}
      }
      close  TESTSQUR;
      
      print "I think user for $clone = $user\n";
      if ($user eq "" || $user eq "unknown"){
	  print "$clone=no squirrel info\n";
	  next COSMID;
      }
      
      $author="Sulston J";
      
    ###########################################################
    # get the chromosome for the cosmid using subroutine in
    # ~sjj/scripts/sanger.pl
      #$chrome=&celechrom($clone);
      #if ($chrome eq "0") {
	#  $chrome="unknown";
      #}
    ###########################################################
    
    #Set delimiter to read in the contigs one at a time
      $/=">";
    
    #need to make an entry in the status file whether cosmid is updated or not
      open (DNA, "echo 'dump2fasta -depad -clone $clone' | /usr/bin/csh - |");	
      print "\nattempting dump of $clone -> '$shotgundir$clone.shg' \n";
      
      $dumped="no";
      while (<DNA>) {
	  if (/\S+/) {
	      $dumped="yes";
	  }
	  s/\>//;
	  if (/^\d+/) {
	      /^(\d+)/;
	      $contig=$1;
	      s/^\d+.+\n//;
	  }
	  
	  #only want to print contig details if contig => mincontig
	  $length=length($_);
	  $sequence=$_;
	  if ( $length  >= $mincontig){
	      if ($first==0) {
		  $moddate=&time2ace(time);
		  open(output,">$shotgundir$clone.shg");
		  $first=1;
#		 print STATUS "|$clone\t|",&celeaccession($clone),"\t|1\t|\t|\t|$moddate\t|UNFINISHED_SEQUENCES/UNSORTED/$clone\t|$clone\t|$author|$chrome\t\n";
	      }
	      print output ">$clone Contig ID=$contig; Length=$length; Order=Unknown; Status=Cambridge-Unfinished; Author=$author; LastModification=$moddate; EMBL acc=",&celeaccession($clone),"\n";
	      print output $sequence;
	  }
      }
     
     #Did the dump2fasta fail?  
      if ($dumped eq "no") {
	  print "dump of $clone ($user) unsuccessful\n";
      } 
#  }
#  else{ 
#      #need to add cosmids to the status file which aren't updated this time 
#      $moddate=&time2ace((stat($shotgunfile))[9]);
#      print STATUS "|$clone\t|",&celeaccession($clone),"\t|1\t|\t|\t|$moddate\t|UNFINISHED_SEQUENCES/UNSORTED/$clone\t|$clone\t|$author|$chrome\t\n";
#  }
  
      $/="\n";
      close DNA;
      close output;
  }
    close STATUS;
}



##################################
#get the date of a file modifiction
##################################
sub mod {
    local(@date);
    @date=stat $_[0];
    return $date[9];
}

##################################
sub time2ace {
    local($time) = @_;
    local(@lt);

    @lt = localtime($time);

    # yy -> yyyy
    if ($lt[5] < 70) { $lt[5] += 2000; }
    elsif ($lt[5] < 100) { $lt[5] += 1900; }

    sprintf("%4d-%02d-%02d_%02d:%02d:%02d",$lt[5],$lt[4]+1,$lt[3],$lt[2],$lt[1],$lt[0]);

}
##################################

















#!/usr/local/bin/perl
#
# make_acefiles will make all the acefiles for autoace building

# 000925 ag3 dl1 Fixed problem with wormpep protein names 
# all assigned to clone names previously !

use IPC::Open2;
use IO::Handle;
use Getopt::Std;
$|=1;

$logfile = "/wormsrv2/logs/make_acefiles.$$";
$basedir = "/wormsrv2/wormbase";
$miscdir = "$basedir/misc";
$pepdir = "$basedir/peptides";
$tremblfile="$pepdir/trembl";
$wormpepfile="$pepdir/wormpep";
$swissfile="$pepdir/swissprot";
$peptidefile="$miscdir/misc_peptides.ace";
$estfile = "$miscdir/misc_nonelegansests.ace";
$configfile = "/wormsrv2/autoace_config/autoace_2.config";
$tace="/nfs/disk100/acedb/RELEASE.SUPPORTED/bin.ALPHA_4/tace";
$autodir = "/wormsrv2/autoace";
$configfile = "/wormsrv2/autoace_config/autoace_2.config";

getopts ('nep');

if ((!$opt_n)&&(!$opt_e)&&(!$opt_p)) {
    &PrintHelp;
}

system ("/bin/touch $logfile");
open (LOGFILE,">>$logfile") or die ("Could not create logfile\n");
LOGFILE->autoflush;
open (STDOUT,">>$logfile");
STDOUT->autoflush;
open (STDERR,">>$logfile"); 
STDERR->autoflush;
print LOGFILE "Starting make_acefiles .. \n";
if ($opt_n) {
    &mknewacefiles;
}
if ($opt_e) {
    &nonelegansests;
}
if ($opt_p) {
    &producepeptides;
}
print LOGFILE "Ended make_acefiles\n";
close STDERR;
close STDOUT;
close LOGFILE;

exit 0;

sub PrintHelp {
    $txt=<<END;
make_acefiles Options: 
-n make new acefiles
-e make non-elegans est files,
-p make peptides

Example:

make_acefiles -nep will re-make all the needed ace files
make_acefiles -p will re-create only peptide files

END

    print $txt;
    exit;
}


###################################################
# Erases old acefiles and make new ones           

sub mknewacefiles {
 open(CONFIG,"$configfile");
 while(<CONFIG>) {
   s/^\s+//;s/\s+$//;    
   if (/^\#/  || /^$/) {
       next;
   }
   if (/^P\s+(\S+)\s+(\S+)$/) {
       $dbname = $1;
       $dbdir = $2;
       $targetdir = "$basedir"."/$dbname";
       $exe = "$tace $dbdir";
       next;
   }
   if ($dbname =~ /misc/) {next;}
   if (/^\S+\s+(\S+)$/) {
       $object=$1; $criteria="";$criterianoasterisk="";
   } elsif (/^\S+\s+(\S+)\s+(\S+)$/) {
       $object=$1; $criteria=$2;
       $criteria=~/(\S+)\*/;
       $criterianoasterisk=$1;
   } 
   $filename="$targetdir/".$dbname."_".$object.$criterianoasterisk.".ace";
   print LOGFILE "Filename: $filename\n";
   unlink $filename;
   my $command=<<END;
find $object $criteria
write $filename
quit
END
   print LOGFILE "Tace: $tace\n";
   print LOGFILE "Command: $command\n";
   open (TACE,"| $exe");
   print TACE $command;
   close TACE;
   print LOGFILE "Made file $filename\n";
   next;
}
 close CONFIG;
}


############################
# Make the non-celegans ESTs                     

sub nonelegansests {
    system ("/bin/rm $estfile");
    open (ESTFILE, ">$estfile");
    open (SEQUENCES, "/usr/local/pubseq/bin/getz -d  -f \"id acc org des\" \'([emblnew-org:nematoda\! caenorhabditis elegans] \& [emblnew-key:est]) | ([embl-org:nematoda\! caenorhabditis elegans] \& [embl-key:est])\' |");
    while (<SEQUENCES>) {
	if (/^ID\s+(\S+)/) {$id=$1;}
	if (/^AC\s+(\S+);/) {print ESTFILE "\nSequence EMBL:$id\ncDNA_EST\nAC_number $1\nDatabase EMBL $id $1\n";}
	if (/^OS\s+(.+)/) {print ESTFILE "Species \"$1\"\n";}        
	if (/^DE\s+(.+)/) {$def=$def." ".$1;}
	if (/^SQ\s+/) {$def=~s/^\s+//;print ESTFILE "Title \"$def\"\n";$def="";}
    }
    close SEQUENCES;
    close ESTFILE;
    print LOGFILE "Made $estfile\n";
    return;
}


###############################
# Produce petides file
#
sub producepeptides {
    system ("/bin/rm $tremblfile");
    system ("/bin/rm $wormpepfile");
    system ("/bin/rm $swissfile");
    system ("/bin/rm $peptidefile");
    open(TREMBL,">$tremblfile");
    open(WORMPEP,">$wormpepfile");
    open(SWISSPROT,">$swissfile");
    $textace = "$tace $autodir ";
# Retrieve the list of proteins from autoace
    open2(READ,WRITE,$textace) or do {print "Addpeptides: Could not open $textace\n"; exit 0}; 
    my $command=<<END;
find protein 
list -a 
quit
END
    print WRITE $command;
    close WRITE;
    while (<READ>) {
	if (/^Protein\s+:\s+"(\S+)"/) {
	    $protein=$1;
	    if ($protein=~/TR:(\S+)/) {$protein=~s/TR/SPTREMBL/; print TREMBL "$protein\n";}
	    if ($protein=~/WP:(\S+)\.\w+/) {$protein=~s/WP/WORMPEP/; print WORMPEP "$protein\n";}
	    if ($protein=~/SW:(\S+)/) {$protein=~s/SW/SWISSPROT/; print SWISSPROT "$protein\n";}
	}  
    }		    
    close READ;
    close TREMBL;
    close WORMPEP;
    close SWISSPROT;
    print LOGFILE "Made $tremblfile\n";
    print LOGFILE "Made $wormpepfile\n";
    print LOGFILE "made $swissfile\n";
# Produce the .ace file with all the protein sequences
    open(PEPTIDE,">$peptidefile");
    open (GETZTREMBL,"/usr/local/pubseq/bin/getz6 -d -sf fasta \'\@$tremblfile\' |");
    while (<GETZTREMBL>) {
	if (/^>(\w+)/) {$protein="TR:"."$1"; print PEPTIDE "\nPeptide $protein\n"; next;} else {print PEPTIDE $_;next;}
    }
    close GETZTREMBL;
    open (GETZWP,"/usr/local/pubseq/bin/getz6 -d -sf fasta \'\@$wormpepfile\' |");
    while (<GETZWP>) {
	if (/^>(\S+\.\w+)/) {$protein="WP:"."$1"; print PEPTIDE "\nPeptide $protein\n"; next;} else {print PEPTIDE $_; next;}
    }
    close GETZWP;
    open (GETZSWISS,"/usr/local/pubseq/bin/getz6 -d -sf fasta \'\@$swissfile\' |");
    while (<GETZSWISS>) {
	if (/^>(\w+)/) {$protein="SW:"."$1";print PEPTIDE "\nPeptide $protein\n"; next;} else {print PEPTIDE $_; next;}
    }
    close GETZSWISS;
    close PEPTIDE;
    print LOGFILE "Made $peptidefile\n";
}










#!/usr/local/bin/perl

#Steven Jones, Sanger Centre, 1997

#Wrapper to compare ESTs to genomic sequence using 
#blast and MSPcrunch to prescreen candidates and EST_genome 
#to correctly determine the alignments. 
#970923: Changed the blast line to include B=1000000
#970930: Changed the MSPcrunch call so that there is no coverage limit (-l 0)
#971020: Changed to output Percentage match as score. 
#971024: Changed the minscore for est_genome to be 100 to conservtively get rid of some rubbish hits 
#971107: Added the feature to look for confirmed splices sites and report these 

#require glob('~sjj/scripts/sanger.pl');



$|=1;

while ($#ARGV >1) {
  if ($ARGV[0] eq "-ci") {$ci="yes";shift;}
}

if ($#ARGV !=1) {print "usage: $0 <options> EST_database Genomic_Sequence\nOptions\n -ci = report confirmed introns\n";exit 1;}


&readests($ARGV[0]);

###############################################
#get ESTs which match the sequence 
###############################################

open(blastoutput,"blastn $ARGV[0] $ARGV[1] B=1000000 | MSPcrunch -l 0 - |");
$blasterror=$?;
while (<blastoutput>) {
  if (/^>\s+(\S+)/) {push(@ests,$1);}
}
close blastoutput;


###############################################
#map the ESTs to the genomic sequence 
###############################################

@genomic=&getseq("$ARGV[1]");

foreach $est (@ests) {
  
  if (-e "/tmp/est$$") {unlink "/tmp/est$$";}
  open(tmp,">/tmp/est$$");
  print tmp $estsequence{$est};
  close tmp;
  #print $estsequence{$est};
  #system("agrep -d \"\\>\" $est $ARGV[0] > /tmp/est$$");                                   	
  @est=&getseq("/tmp/est$$");
  $greperror=$?;
  open(estoutput,"est_genome  -minscore 100 -genome $ARGV[1] -est /tmp/est$$ |");
  $est_genomeerror=$?;
  $reversed="false";
  $estseq="";
  $orientation="";
  $last="";
  $start="";
  while (<estoutput>) {		#print $_;
    
    ###############################################
    #Calculate confirmed introns 
    ###############################################
    
    if ($ci eq "yes") {
      if (/forward gene$/) {$orientation="+";}
      if (/REVERSED GENE$/) {$orientation="-";}	     
      if (/reversed est/) {$estorientation="reversed";$string=join('',@est);
			   $revstring=&revcomp($string);
			   @est=split(//,$revstring);
			 }
      if (/^Exon\s+(\d+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\S+)/) {
	#print "here $_ start=$start\n";
	if ($start ne "yes") {$exonendg=$4;$exonende=$7;$start="yes";}
	else {$lastjunction=join('',@genomic[$exonendg-9..$exonendg-1]); 
	      $lastestjunction=join('',@est[$exonende-9..$exonende-1]);
	      $currentjunction=join('',@genomic[$3-1..$3+9]);
	      $currentestjunction=join('',@est[$6-1..$6+9]);
	      #print "junctions $lastjunction  $lastestjunction\n";
	      
	      #are the exons of the exons the same (10bp either side)
	      if (($lastjunction eq $lastestjunction) && ($currentjunction eq $currentestjunction)) {
		if ($orientation eq "+") {print "\nSequence $5\nConfirmed_intron ", $exonendg+1," ",$3-1," EST\n\n";}
		if ($orientation eq "-") {print "\nSequence $5\nConfirmed_intron ",$3-1," ",$exonendg+1," EST\n\n";}
	      }
	      $exonendg=$4;$exonende=$7;
	    }
      }
    }
    ##################################################			     
    #Calculate the homol info 
    ##################################################
    
    if (/reversed est/) {$reversed="true";
			 #need the length of the est in this case;
			 open(est,"/tmp/est$$");
			 while (<est>) {s/>.+$//;s/\n//;$estseq=$estseq.$_;}
			 close est;
			 $length=length($estseq)+1;
		       }
    if (/^Segment\s+\d+\s+(\d+\.\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\d+)\s+(\d+)/) {
      
      print "\nSequence $4\n";
      if ($reversed eq "false") {print "DNA_homol $est EST_GENOME $1 $2 $3 $5 $6\n";}
      else {print "DNA_homol $est EST_GENOME $1 $2 $3 ",$length-$5," ",$length-$6,"\n";}
      
      
    }
  }
}
close estoutput;
unlink "/tmp/est$$";

if (($blasterror+$greperror+$est_genomeerror)!=0) {print STDERR "$0 failed\n";exit 1} else {exit 0;}

######################################################
#Subroutines 
######################################################

######################################################
#make sequence array from fasta file 
######################################################

sub getseq {
  local(@array);
  local($sequence);
  open(file,"$_[0]");
  while(<file>) {
    tr/a-z/A-Z/;
    s/^>.+//;s/\n//;s/\s+//g;
    $sequence=$sequence.$_;
    
  }
  @array=split('',$sequence);
  return  @array;
  
}


####################################################
#revcomp string 
####################################################


sub revcomp {
  local(@sequence);
  local($output);
  local($intron);
  $intron=$_[0];
  $intron=~tr/A-Z/a-z/;
  $intron=~s/g/C/g;
  $intron=~s/c/G/g;
  $intron=~s/a/T/g;
  $intron=~s/t/A/g;
  @sequence=split(//,$intron);
  $output=join('',reverse(@sequence));
  return $output;
}

################################################
#Read ests into an array 
################################################

sub readests {
  local(*mRNA);
  local($name);
  open(mRNA,"$ARGV[0]");
  while(<mRNA>) {
    if (/^>(\S+)/) {$name=$1;push(@names,$name);}
    $estsequence{$name}=$estsequence{$name}.$_;
  }
  
}


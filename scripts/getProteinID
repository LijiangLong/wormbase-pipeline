#!/usr/local/bin/perl5.6.1
#
# getProteinID
#
# Parses the weekly mail from Nadeem to get the Protein_ID and
# SWALL accession for C.elegans entries in EMBL 
#
# dl
#
# Last edited by: $Author: ar2 $
# Last edited on: $Date: 2003-07-02 09:49:16 $

use lib "/wormsrv2/scripts/";
use Wormbase;
use Getopt::Long;
use strict;
use Data::Dumper;

my %acc2clone = &FetchData('acc2clone');
my %gene2CE   = &FetchData('gene2CE');
my %Ip2Go;

 # get the InterPro => GOterm mapping ( space separated ie 'IPR004794' => 'GO:0008703 GO:0008835 GO:0009231 ')

our %databases = (
		  'SW' => 'SWISSPROT',
		  'TR' => 'TREMBL',
		  'TN' => 'TREMBLNEW'
		  );

my %db_ids_acc = (
		  'SW_id' => 'SwissProt_ID',
		  'SW_ac' => 'SwissProt_AC',
		  'TR_ac' => 'TrEMBL_AC',
		  'TN_ac' => 'TrEMBLNEW_AC'
		 );

######################################
# variables and command-line options # 
######################################

my ($help, $file, $debug, $no_go);

GetOptions (
	    "help"      => \$help,
            "file=s"    => \$file,
	    "debug"     => \$debug,
	    "go"        => \$no_go
	    );

unless ($no_go) {
  system("make_Interpro2GO_mapping.pl") and die "cant update the interpro to GO term mappings\n";
  %Ip2Go = &FetchData('interpro2go');
}
# Display help if required
&usage("Help") if ($help);

if (! defined $file) {
    $file = "/nfs/disk100/wormpub/protein_ID.mail";
}

my $ace_file = "/wormsrv2/autoace/wormpep_ace/WormpepACandIDs.ace";
$ace_file = "/tmp/WormpepACandIDs.ace" if ($debug);

open (OUT, ">$ace_file");

my @f = "";
my ($dbxref_ac,$dbxref_id,$dbxref_db);

# File format for protein_ID file
#
# <acc>          <ver>    <proteinID>   <ver>     <checksum>     <gene_name>  <swall> <standard_name>
#
# non-genome entry (e.g. from a mRNA) 
#
# AB000913        2       BAA21715        1       2898126014      unc-14      O15940   
#
# genome entry
#
# AC006633        10      AAK68374        1       3313183671      F35B3.3     Q966K1   F35B3.3



open (FILE, "<$file") || die "Can't open the protein_ID file\n";
while (<FILE>) {
    chomp;
    next if ($_ eq "");
    next if ( (/^From/) || (/^Date/) || (/To/) || (/^Subject/) );

    @f = split /\t/;

    # discard non genome_sequence entries
    next unless (defined $acc2clone{$f[0]});

    my @interpro = "";

    # get database, id and acc and interpro hits from getz call
    ($dbxref_ac,$dbxref_id,$dbxref_db,@interpro) = &get_from_protein_id($f[2]);

    # standard name
    print "$f[7]\t";
    my $protein = $gene2CE{$f[7]};                      # incremented array slice to handle new SWALL column
    
    if ($dbxref_ac ne $f[6]) { 
	print "// mismatch between getz and EBI for $protein [EBI:$f[6]|GETZ:$dbxref_ac)\n";
    }

    if ($protein) {
	print "$protein";
	print OUT "\nProtein : WP:$protein\n";
	print OUT "Database $databases{$dbxref_db} ",$db_ids_acc{$dbxref_db."_id"}," $dbxref_id\n" if($dbxref_id and(  "$dbxref_id" ne "$dbxref_ac"));
	print OUT "Database $databases{$dbxref_db} ",$db_ids_acc{$dbxref_db."_ac"}," $dbxref_ac\n";
	foreach (@interpro) {
	    print OUT "Motif_homol\t\"INTERPRO:$_\"\n"
	    }
    }
    else {
	print "gene $f[7] has no protein (has common_data been updated ?)\n";
    }

    print "\n";
    
    print OUT "\nSequence : \"$f[7]\"\n";
    print OUT "Database $databases{$dbxref_db} $dbxref_id $dbxref_ac\n";
    print OUT "Protein_id \"$acc2clone{$f[0]}\" $f[2] $f[3]\n";
    
    # assign GO terms based on InterPro Motifs
    unless ($no_go) {
	foreach my $ip (@interpro) {
	    my @GOterms = split(/\s/,$Ip2Go{$ip});
	    foreach my $go (@GOterms) {
		print OUT "GO_term\t\"$go\" \"IEA\"\n"
		}
	}
    }
}

close FILE;
close OUT;
exit(0);

##############################################################
# Subroutines
##############################################################

sub get_from_protein_id {
    
    my $protein_id = shift;
    my $acc; 
    my $id; 
    my $db;
    my @interpro;

#  cbi1c[hrh]53: getz "[swall-proteinID:CAB54233]"

#   open (LOOK, "/usr/local/pubseq/bin/pfetch -F $protein_id | grep -E '^ID|^AC|InterPro' |");
    open (LOOK, "/usr/local/pubseq/bin/getzc -e \"[SWALL-proteinID:$protein_id]\" | grep -E '^ID|^AC|InterPro' |");
    while (<LOOK>) {
	($id  = $1) if (/^ID\s+(\S+)/);                           # ID   Q95YB2      PRELIMINARY;      PRT;   409 AA.
	($acc = $1) if (/^AC\s+(\S+);/);                          # AC   Q95YB2;
	push (@interpro, $1) if(/^DR\s+InterPro;\s(\w+)/ );       # DR   InterPro; IPR006089; Acyl-CoA_dh.
    }
    close LOOK;
    
    if ((length ($acc)) == 8) {	$db = "TN"; }
    elsif ($id =~ /_CAEEL/)   { $db = "SW"; }
    else                      {	$db = "TR"; }
    return ($acc,$id,$db,@interpro);
}


##########################################

sub usage {
  my $error = shift;

  if ($error eq "Help") {
    # Normal help menu
    system ('perldoc',$0);
    exit (0);
  }
}


__END__

=pod

=head2 NAME - getProteinID

=head1 USAGE

=over 4

=item getProteinID [-options]

=back

script_template.pl MANDATORY arguments:

=over 4

=back

script_template.pl  OPTIONAL arguments:

=over 4

=item no_go

use this if you dont want to update and include the interpro to GO data

=item -file <file>, Extracted e-mail from EBI containing the Protein_ID data

=item -help, Help

=back

=head1 AUTHOR

=over 4

=item Dan Lawson (dl1@sanger.ac.uk)

=back

=cut

#!/usr/local/bin/perl5.6.1
#
# getProteinID
#
# Parses the weekly mail from Nadeem to get the Protein_ID and
# SWALL accession for C.elegans entries in EMBL 
#
# dl
#
# Last edited by: $Author: ar2 $
# Last edited on: $Date: 2003-04-22 13:49:40 $

use lib "/wormsrv2/scripts/";
use Wormbase;
use Getopt::Long;
use strict;
use Data::Dumper;

my %acc2clone = &FetchData('acc2clone');
my %gene2CE = &FetchData('gene2CE');
my %Ip2Go = &FetchData('interpro2go');    # get the InterPro => GOterm mapping ( space separated ie 'IPR004794' => 'GO:0008703 GO:0008835 GO:0009231 ')

our %databases = (
		  'SW' => 'SWISSPROT',
		  'TR' => 'TREMBL',
		  'TN' => 'TREMBLNEW'
		  );

######################################
# variables and command-line options # 
######################################

my ($help, $file, $debug);

GetOptions (
	    "help"      => \$help,
            "file=s"    => \$file,
	    "debug"     => \$debug
	    );

# Display help if required
&usage("Help") if ($help);

if (! defined $file) {
    $file = "/nfs/disk100/wormpub/protein_ID.mail";
}



my $ace_file = "/wormsrv2/autoace/wormpep_ace/WormpepACandIDs.ace";
$ace_file = "/tmp/WormpepACandIDs.ace" if ($debug);

open (OUT, ">$ace_file");

my @f = "";
my ($dbxref_ac,$dbxref_id,$dbxref_db);

open (FILE, "<$file") || die "Can't open the protein_ID file\n";
while (<FILE>) {
    chomp;
    next if ($_ eq "");
    next if ( (/^From/) || (/^Date/) || (/To/) || (/^Subject/) );

    @f = split /\t/;

    # discard non genome_sequence entries
    next unless (defined $acc2clone{$f[0]});

    my @interpro = "";
    ($dbxref_ac,$dbxref_id,$dbxref_db,@interpro) = &get_from_protein_id($f[2]);

    if( $interpro[0] ) {
      my $protein = $gene2CE{$f[6]};
      if( $protein ) {
	print OUT "\nProtein : WP:$protein\n";
	foreach (@interpro) {
	  print OUT "Motif_homol\t\"INTERPRO:$_\"\n"
	}
      }
      else {print "gene $f[6] has no protein (has common_data been updated ?)\n";}
    }

    print OUT "\nSequence : \"$f[6]\"\n";
    print OUT "Database $databases{$dbxref_db} $dbxref_id $dbxref_ac\n";
    print OUT "Protein_id \"$acc2clone{$f[0]}\" $f[2] $f[3]\n";

    # assign GO terms based on InterPro Motifs
    foreach my $ip (@interpro) {
      my @GOterms = split(/\s/,$Ip2Go{$ip});
      foreach my $go (@GOterms) {
	print OUT "GO_term\t\"$go\" GO_inference_type IEA\n"
      }
    }
}

close FILE;
close OUT;
exit(0);

##############################################################
# Subroutines
##############################################################

sub get_from_protein_id {
    
    my $protein_id = shift;
    my $acc; 
    my $id; 
    my $db;
    my @interpro;

    open (LOOK, "/usr/local/pubseq/bin/pfetch -F $protein_id | grep -E '^ID|^AC|InterPro' |");
    while (<LOOK>) {
	($acc = $1) if (/^AC\s+(\S+);/);
	($id  = $1) if (/^ID\s+(\S+)/);
	push (@interpro, $1) if(/^DR\s+InterPro;\s(\w+)/ );#DR   InterPro; IPR008160
    }
    close LOOK;
    
    # assign database based on length of accession and SWISSPROT species
    if ((length ($acc)) == 8) {	$db = "TN"; }
    elsif ($id =~ /_CAEEL/)   { $db = "SW"; }
    else                      {	$db = "TR"; }
    return ($acc,$id,$db,@interpro);
}


##########################################

sub usage {
  my $error = shift;

  if ($error eq "Help") {
    # Normal help menu
    system ('perldoc',$0);
    exit (0);
  }
}


__END__

=pod

=head2 NAME - getProteinID

=head1 USAGE

=over 4

=item getProteinID [-options]

=back

script_template.pl MANDATORY arguments:

=over 4

=item none, (but it won't do anything)

=back

script_template.pl  OPTIONAL arguments:

=over 4

=item -file <file>, Extracted e-mail from EBI containing the Protein_ID data

=item -help, Help

=back

=head1 AUTHOR

=over 4

=item Dan Lawson (dl1@sanger.ac.uk)

=back

=cut

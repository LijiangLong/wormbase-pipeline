#!/usr/local/bin/perl5.8.0 -w
#
# getProteinID
#
# Parses the weekly mail from Nadeem to get the Protein_ID and
# SWALL accession for C.elegans entries in EMBL 
#
# dl
#
# Last edited by: $Author: krb $
# Last edited on: $Date: 2004-04-26 10:36:39 $

use lib "/wormsrv2/scripts/";
use Wormbase;
use Getopt::Long;
use strict;
use Data::Dumper;

my %acc2clone = &FetchData('accession2clone');
my %gene2CE   = &FetchData('cds2wormpep');
my %Ip2Go;
our %swall;

# get the InterPro => GOterm mapping ( space separated ie 'IPR004794' => 'GO:0008703 GO:0008835 GO:0009231 ')

our %databases = (
		  'SW' => 'SWISSPROT',
		  'TR' => 'TREMBL',
		  'TN' => 'TREMBLNEW'
		  );

my %db_ids_acc = (
		  'SW_id' => 'SwissProt_ID',
		  'SW_ac' => 'SwissProt_AC',
		  'TR_ac' => 'TrEMBL_AC',
		  'TN_ac' => 'TrEMBLNEW_AC'
		 );

######################################
# variables and command-line options # 
######################################

my ($help, $file, $debug, $no_go, $verbose);

GetOptions (
	    "help"      => \$help,
            "file=s"    => \$file,
	    "debug=s"   => \$debug,
	    "verbose"   => \$verbose,
	    "go"        => \$no_go
	    );

unless ($no_go) {
  system("make_Interpro2GO_mapping.pl") and die "cant update the interpro to GO term mappings\n";
  %Ip2Go = &FetchData('interpro2go');
}

# get swall data

&getswalldata;

# Display help if required
&usage("Help") if ($help);

if (! defined $file) {
    $file = "/nfs/disk100/wormpub/protein_ID.mail";
}

my $ace_file = "/wormsrv2/autoace/wormpep_ace/WormpepACandIDs.ace";
$ace_file = "/tmp/WormpepACandIDs.ace" if ($debug);

open (OUT, ">$ace_file");

my @f = "";
my ($dbxref_ac,$dbxref_id,$dbxref_db);

# File format for protein_ID file
# <acc>          <ver>    <proteinID>   <ver>     <checksum>     <gene_name>  <swall> <standard_name>
# non-genome entry (e.g. from a mRNA) 
# AB000913        2       BAA21715        1       2898126014      unc-14      O15940   
# genome entry
# AC006633        10      AAK68374        1       3313183671      F35B3.3     Q966K1   F35B3.3

open (FILE, "<$file") || die "Can't open the protein_ID file\n";
while (<FILE>) {
    chomp;
    next if ($_ eq "");
    next if ( (/^From/) || (/^Date/) || (/To/) || (/^Subject/) );

    @f = split /\t/;

    # discard non genome_sequence entries
    next unless (defined $acc2clone{$f[0]});
    
    my @interpro = "";

    # standard name
    print "$f[7]\t" if ($verbose);
    my $protein = $gene2CE{$f[7]};                      # incremented array slice to handle new SWALL column
    
    if ($swall{$f[2]}{Accession} ne $f[6]) { 
	print "ERROR:  mismatch between getz and EBI for $protein [EBI:$f[6]|GETZ:$swall{$f[2]}{Accession})\n";
    }

    if ($protein) {
	print "$protein" if ($verbose);
	print OUT "\nProtein : WP:$protein\n";
	print OUT "Database $databases{ $swall{$f[2]}{Database} } ",$db_ids_acc{ $swall{$f[2]}{Database}."_id" }," $swall{$f[2]}{Identifier}\n"
 	     if ( ($swall{$f[2]}{Identifier}) and  ($swall{$f[2]}{Identifier} ne $swall{$f[2]}{Accession}) );
	print OUT "Database $databases{ $swall{$f[2]}{Database} } ",$db_ids_acc{ $swall{$f[2]}{Database}."_ac" }," $swall{$f[2]}{Accession}\n";
	
	foreach (@{$swall{$f[2]}{Interpro}}) {
	    next if ($_ eq "");
	    print OUT "Motif_homol\t\"INTERPRO:$_\"\n"
	    }
    }
    else {
	print "ERROR: gene $f[7] has no protein (has common_data been updated ?)\n";
    }

    print "\n" if ($verbose);
    
    print OUT "\nCDS : \"$f[7]\"\n";
    print OUT "Database $databases{ $swall{$f[2]}{Database} } ",$db_ids_acc{ $swall{$f[2]}{Database}."_id" }," $swall{$f[2]}{Identifier}\n"
	 	     if ( ($swall{$f[2]}{Identifier}) and  ($swall{$f[2]}{Identifier} ne $swall{$f[2]}{Accession}) );
    print OUT "Database $databases{ $swall{$f[2]}{Database} } ",$db_ids_acc{ $swall{$f[2]}{Database}."_ac" }," $swall{$f[2]}{Accession}\n";
    print OUT "Protein_id \"$acc2clone{$f[0]}\" $f[2] $f[3]\n";
    
    # assign GO terms based on InterPro Motifs
    unless ($no_go) {
	foreach my $ip (@{$swall{$f[2]}{Interpro}}) {
	  if( exists $Ip2Go{$ip} ) {
	    my @GOterms = split(/\s/,$Ip2Go{$ip});
	    foreach my $go (@GOterms) {
	      print OUT "GO_term\t\"$go\" \"IEA\" Inferred_automatically\n"
	    }
	  }
	}
      }
  }

close FILE;
close OUT;
exit(0);

##############################################################
# Subroutines
##############################################################


sub getswalldata {
    
# ID   1433_CAEEL     STANDARD;      PRT;   248 AA. 
# AC   P41932; Q21537; 
# DR   EMBL; U05038; AAA61872.1; -.
# DR   EMBL; Z73910; CAA98138.1; -.
# DR   PIR; JC2581; JC2581.
# DR   PIR; T23759; T23759.
# DR   HSSP; P29312; 1A38.
# DR   WormPep; M117.2; CE06200.
# DR   InterPro; IPR000308; 14-3-3.
# DR   Pfam; PF00244; 14-3-3; 1.
# DR   PRINTS; PR00305; 1433ZETA.
# DR   SMART; SM00101; 14_3_3; 1.
# DR   PROSITE; PS00796; 1433_1; 1.
# DR   PROSITE; PS00797; 1433_2; 1. 

    my $acc; 
    my $id; 
    my $db;
    my $text;
    my @interpro;
    my @proteinID;

    $/ = "ID";

#    open (LOOK, "/usr/local/pubseq/bin/getzc -f 'id acc dbxref'  \"[SWALL-organism:Caenorhabditis elegans]\" |");
    open (LOOK, "</nfs/disk100/wormpub2/dan/swall_all.txt");
    while (<LOOK>) {
	$text = "ID" . $_;         # add the leading 'ID'
	chop $text;                # remove the trailing 'ID'
	chop $text;

	next if ($text eq "ID");     # shortcircuit loop for empty set at beginning

#	print "\n$text\n";

	if ($text =~ /ID\s+(\S+)/)  {                                        # ID  Q95YB2  PRELIMINARY;  PRT;  409 AA.
	    $id = $1;
#	    print "assign ID\n";
	}
	if ($text =~ /AC\s+(\S+);/) {                                        # AC  Q95YB2;
	    $acc = $1;
	    if ((length ($acc)) == 8) {	$db = "TN"; }
	    elsif ($id =~ /_CAEEL/)   { $db = "SW"; }
	    else                      {	$db = "TR"; }
#	    print "assign AC & DB\n";
	}
	while ($text =~ /DR\s+EMBL;\s\S+\s(\S+)\.\d+; \-\./g) {            # DR   EMBL; U05038; AAA61872.1; -.
	    push (@proteinID, $1);
#	    print "assign proteinID\n";
	}
	while ($text =~ /DR\s+InterPro;\s(\w+)/g ) {                      # DR  InterPro; IPR006089; Acyl-CoA_dh.
	    push (@interpro, $1);
#	    print "assign InterPro\n";
	}
	
	foreach my $i (@proteinID) {
	    next if ($i eq "");
	    $swall{$i}{Identifier} = $id;
	    $swall{$i}{Accession}  = $acc;
	    $swall{$i}{Database}   = $db;
	    foreach my $j (@interpro) {
		push (@{$swall{$i}{Interpro}},$j);
	    }
	    
	    print "// Assign to proteinID $i [ID:$id\tAC:$acc\tDB:$db\tInterPro: " . (join ' ',@interpro) . "]\n";
	}

	@proteinID = "";
	@interpro = "";
	$acc = "";
	$id  = "";
	$text = "";

    }

    $/ = "\n";

}




##########################################

sub usage {
  my $error = shift;

  if ($error eq "Help") {
    # Normal help menu
    system ('perldoc',$0);
    exit (0);
  }
}


__END__

=pod

=head2 NAME - getProteinID

=head1 USAGE

=over 4

=item getProteinID [-options]

=back

script_template.pl MANDATORY arguments:

=over 4

=back

script_template.pl  OPTIONAL arguments:

=over 4

=item no_go

use this if you dont want to update and include the interpro to GO data

=item -file <file>, Extracted e-mail from EBI containing the Protein_ID data

=item -help, Help

=item -verbose, extra command line output, shows status of each WormPep protein (slower!)

=back

=head1 AUTHOR

=over 4

=item Dan Lawson (dl1@sanger.ac.uk)

=back

=cut

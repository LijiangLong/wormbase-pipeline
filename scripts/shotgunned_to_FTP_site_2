#!/usr/local/bin/perl

#unshift (@INC,"/nfs/disk100/wormpub/analysis/scripts");

$ENV{'SQUIRREL'}="/nfs/sids/squirrel/squirrel";
$ENV{'MAINTAINER'}="sjj\@sanger.ac.uk";
$ENV{'ACEDB'} = glob("~badger/pace-worm");

require glob('~wormpub/analysis/scripts/sjj-sanger.pl');
require 'ctime.pl';

select((select(STDOUT),$|=1)[0]);
select((select(STDERR),$|=1)[0]);


#set the program to run as a child so that errors can be collected.
if ($ENV{'CHILD'} !=1){
	$ENV{'CHILD'} = "1";
	system (" echo 'shotgunned_to_FTP_site >&!  /tmp/errors$$' | csh");
	system ("rsh  adnah  mail nobody  < /tmp/errors$$");
	unlink "errors$$";
	exit;
}

#true start of program

my $CE_FTPDIR = '/nfs/disk69/ftp/pub/databases/C.elegans_sequences';


$shotgundir=<$CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED/>;
$mincontig=1000;
$exec=&tace;

@cosmids = (Y105E8,Y111B2,Y39B6,Y67H2,Y59A8,Y71A12,Y116F11);

########################################################################
#Subroutine to place fasta contigs of >1000bp of unfinished 
#cosmida in the ftp site
########################################################################


sub place_contigs_ftp_site {
  
  #open the status file
#  $ftphome=&tilda(ftp);
  $ftphome=glob(~wormpub);
  open (STATUS,">$ftphome/pub/databases/C.elegans_sequences/000HTGSSTATUS");
  select((select(STATUS),$|=1)[0]);
  
 COSMID:foreach $clone (@cosmids){    
    print "#########\nEntering with cosmid $clone\n";
    $first=0;
    print "\ntesting project $clone\n";
    
    open (TESTSQUR,"echo 'find-project $clone' | /usr/bin/csh - |");
    while (<TESTSQUR>) {
      print $_;
      s/\s+$//;
      if (/(\S+)$/) {$user=$1;$userpath=&tilda($user);}
    }
    close  TESTSQUR;
    
    print "I think user for $clone = $user\n";
    if ($user eq "" || $user eq "unknown"){
      print "$clone=no squirrel info\n";
      next COSMID;
    }
    
    $author="Sulston J";
    #Get a user name using an external script in ~wormpub/analysis/scripts
    open (AUTHOR,"get_author_ace $clone |"); 
    while (<AUTHOR>) {
      if (/From_author\s+\"(.+)\"$/) {
	$author=$1;
      };
    }
    close AUTHOR;
    
    $author=~/(\S+\s\S)/;
    $authortemp=$1; 
    $author=$authortemp.".";
    
    ###########################################################
    # get the chromosome for the cosmid using subroutine in
    # ~sjj/scripts/sanger.pl
    $chrome=&celechrom($clone);
    if ($chrome eq "0") {
      $chrome="unknown";
    }
    ###########################################################
    
    #Set delimiter to read in the contigs one at a time
    $/=">";
    
    #only update if the cosmid is known and needs updating 
    $project=$clone.".0.aux";$shotgunfile=$shotgundir.$clone.".shg";
    $project=$userpath."/".$clone."/".$project;
    $projectdir=$userpath."/".$clone;
    print "project $user $clone ";
    print -M $project;
    print "\n";
    print "ftp ";
    print -M $shotgunfile;
    print "\n";
    
    #If the project files are younger than the files in shotgun directory then update the log file
    
    if ((-M $project < -M $shotgunfile) || (!-e $shotgunfile)) {
      print " $clone needs updating - going to dump2fasta \n";
      
      #need to make an entry in the status file whether cosmid is updated or not
      open (DNA, "echo 'dump2fasta -depad -clone $clone' | /usr/bin/csh - |");	
      print "\nattempting dump of $clone\n";
      
      $dumped="no";
      while (<DNA>) {
	if (/\S+/) {
	  $dumped="yes";
	}
	s/\>//;
	if (/^\d+/) {
	  /^(\d+)/;
	  $contig=$1;
	  s/^\d+.+\n//;
	}
	
				#only want to print contig details if contig => mincontig
	$length=length($_);
	$sequence=$_;
	if ( $length  >= $mincontig){
	  if ($first==0) {
	    $moddate=&time2ace(time);
	    open(output,">$shotgundir$clone.shg");
	    $first=1;
	    print STATUS "|$clone\t|",&celeaccession($clone),"\t|1\t|\t|\t|$moddate\t|UNFINISHED_SEQUENCES/UNSORTED/$clone\t|$clone\t|$author|$chrome\t\n";
	  } 
	  print output ">$clone Contig ID=$contig; Length=$length; Order=Unknown; Status=Cambridge-Unfinished; Author=$author; LastModification=$moddate; EMBL acc=",&celeaccession($clone),"\n";
	  print output $sequence;
	}
      }
      
      #Did the dump2fasta fail?  
      if ($dumped eq "no") {
	print "dump of $clone ($user) unsuccessful\n";
      } 
    } 
    
    else{ 
      #need to add cosmids to the status file which aren't updated this time 
      $moddate=&time2ace((stat($shotgunfile))[9]);
      print STATUS "|$clone\t|",&celeaccession($clone),"\t|1\t|\t|\t|$moddate\t|UNFINISHED_SEQUENCES/UNSORTED/$clone\t|$clone\t|$author|$chrome\t\n";
		}
		
		$/="\n";
		close DNA;
		close output;
}

close STATUS;
}



##################################
#get the date of a file modifiction
##################################
sub mod {
    local(@date);
    @date=stat $_[0];
    return $date[9];
}

##################################
sub time2ace {
    local($time) = @_;
    local(@lt);

    @lt = localtime($time);

    # yy -> yyyy
    if ($lt[5] < 70) { $lt[5] += 2000; }
    elsif ($lt[5] < 100) { $lt[5] += 1900; }

    sprintf("%4d-%02d-%02d_%02d:%02d:%02d",$lt[5],$lt[4]+1,$lt[3],$lt[2],$lt[1],$lt[0]);

}
##################################

















#!/nfs/disk100/wormpub/bin/perl -w
#
# intron
#
# introncheck searches for confirmed introns which aren't part of a gene model yet
#
# Usage: introncheck [-options]
#
# Last updated by: $Author: pad $     
# Last updated on: $Date: 2007-09-27 11:52:07 $      

use strict;                                      
use lib $ENV{'CVS_DIR'};
use Wormbase;
use Getopt::Long;
use Carp;
use Log_files;
use Storable;
use Ace;
use Coords_converter;

$| = 1;

##############################
# command-line options       #
##############################

my ($help, $debug, $test, $verbose, $store, $wormbase, $dbr, $gff, $test1);

GetOptions ("help"       => \$help,
            "debug=s"    => \$debug,# debug option
	    "test"       => \$test, # test build and also only runs on CHROM III
	    "verbose"    => \$verbose,
	    "store:s"    => \$store,
	    "db:s"       => \$dbr,   # database to query
	    "gff:s"      => \$gff,  # gff files to use
	    "test1:s"      => \$test1, #test one chromosome
	   );

if ( $store ) {
  $wormbase = retrieve( $store ) or croak("Can't restore wormbase from $store\n");
} else {
  $wormbase = Wormbase->new( -debug   => $debug,
                             -test    => $test,
			   );
}

# Display help if required
&usage("Help") if ($help);

# establish log file.
my $log = Log_files->make_build_log($wormbase);

##############################
# Script variables (run)     #
##############################

my $rundate = $wormbase->rundate;
my $runtime = $wormbase->runtime;

##############################
# Paths etc                  #
##############################
my $dbdir;
my $tace   = $wormbase->tace;    # tace executable path

if ($dbr) {
  $dbdir  = $dbr;
}
else{
  $dbdir  = $wormbase->autoace; # Database path
}

my $gffdir;
if ($gff) {
  $gffdir = $gff;
}
else {
  $gffdir = $wormbase->gff_splits;
}
my @chromosomes;
if ($test1) {
@chromosomes = qw( III );
}
else {
@chromosomes = ('IV','II','III','I', 'V','X');
}
#@chromosomes = qw( III ) if $wormbase->test;
my %confirmed_intron = ();

our $coords = Coords_converter->invoke($dbdir,undef, $wormbase);         # invoke coordinate parser


########################################
# Connect with acedb server            #
########################################

my $db = Ace->connect(-path=>$dbdir) or $log->log_and_die("Couldn't connect to $dbdir\t".Ace->error."\n");

foreach my $chromosome (@chromosomes) {
  &make_intron_files($chromosome);	
  my (@coords, @introns);
  
  print "Checking GFF file: 'CHROMOSOME_${chromosome}'\n";

  if ($debug) {
    open (OUT_CAM, ">CHROMOSOME_${chromosome}.check_intron_cam.gff");
    print "Opening CHROMOSOME_${chromosome}.check_intron_cam.gff\n";
    open (OUT_STL, ">CHROMOSOME_${chromosome}.check_intron_stl.gff");
    print "Opening CHROMOSOME_${chromosome}.check_intron_stl.gff";
  }
  else {
    open (OUT_CAM, ">".$wormbase->checks."/CHROMOSOME_${chromosome}.check_intron_cam.gff");
    open (OUT_STL, ">".$wormbase->checks."/CHROMOSOME_${chromosome}.check_intron_stl.gff");
  }
  #######################################
  # make a hash for all curated introns #
  #######################################

  print "Make a hash for all curated introns on chromosome $chromosome\n";
  
  open (GFF_in, "$ENV{'CVS_DIR'}/gff_sort $gffdir/CHROMOSOME_${chromosome}_gene_introns.gff |") || die "Failed to open gff file at $gffdir/CHROMOSOME_${chromosome}_genes_introns.gff\n\n";
  print "Opening $gffdir/CHROMOSOME_${chromosome}_gene_introns.gff\n\n" if ($debug);
  
  while (<GFF_in>) {
    chomp;
    s/\#.*//;
    next unless /\S/;
    #print "$_\n";
    my @f = split /\t/;
    push (@introns,"$f[3] $f[4] $f[8]");
  }	
  close GFF_in;


  ###################################################
  # print "Cycle through introns in .gff file\n\n"; #
  ###################################################
  print "Cycle through all introns on chromosome $chromosome\n";
  
  open (GFF, "$ENV{'CVS_DIR'}/gff_sort $gffdir/CHROMOSOME_${chromosome}_est_introns.gff |") || die "Failed to open gff file at $gffdir/CHROMOSOME_${chromosome}_est_introns.gff \n\n";
  
  while (<GFF>) {       	
    chomp;
    s/\#.*//;
    next unless /\S/;
      
    # split the GFF line
    my @f = split /\t/;
      
    # reset match tag
    my $match = 0;
    my $line = $_;     
    
    # Confirmed_introns not in gene models
      
    # ignore some marked introns
    if ($verbose) {print "discard as false : $line\n" if ($f[8] =~ /Confirmed_false/);} 
    next if ($f[8] =~ /Confirmed_false/);                # Bad BLAT mapping
    if ($verbose) {print "discard as inconsistent : $line\n" if ($f[8] =~ /Confirmed_inconsistent/);} 
    next if ($f[8] =~ /Confirmed_inconsistent/);         # Can't make a valid CDS prediction from this
    if ($verbose) {print "discard as UTR : $line\n" if ($f[8] =~ /Confirmed_UTR/);}
    next if ($f[8] =~ /Confirmed_UTR/);
 
      
    if ( ( ($f[2] eq "intron") && (($f[1] eq ".") or ($f[1] eq "Genefinder") or ($f[1] eq "twinscan")) && (not $f[8] =~ /Confirmed_UTR/) ) || 
	 ( ($f[1] eq "NDB_CDS") && (($f[8] =~ /Confirmed_EST/) || ($f[8] =~ /Confirmed_cDNA/) ) ) ) {
      
      print "Parse : $line\n" if ($verbose);
	  
      # print "Check through known intron coordinates: $f[3] $f[4]\n";
      
      foreach my $look (@introns) {
	my ($start,$stop,$seq) = split (/ /, $look);
	#	 print "  => $start $stop $seq\n";
	if (($f[3] == $start) && ($f[4] == $stop) ) {
	  # found match
	  $match = 1;
	  print " !! found match !!\n" if $verbose;
	  last;
	}
      }
	  
      unless ($match == 1) {	
	      
	my @data = $coords->LocateSpan($f[0], $f[3], $f[4]);
	print "$f[0] $f[3] $f[4] Maps to $data[0] from $data[1] - $data[2]\n" if $verbose;
	
	my $obj = $db->fetch(Sequence=>$data[0]);
	my $lab;
	unless (!defined ($obj)) {
	  $lab=$obj->From_laboratory(1);
	  $obj->DESTROY();
	}
	if ($lab eq "HX") {
	  print OUT_CAM "$line\tClone:$data[0] $data[1] $data[2]\tLab:$lab\n";
	}
	elsif ($lab eq "RW") {
		  print OUT_STL "$line\tClone:$data[0] $data[1] $data[2]\tLab:$lab\n";
		}
	$lab = "";
	$confirmed_intron{$chromosome}++;
      }
      # end of parse loop  
    }
  }
  close GFF;
  
  print "Completed GFF file: 'CHROMOSOME_${chromosome}'\t: Confirmed_introns not in GeneModel $confirmed_intron{$chromosome}\n";
}
close OUT_CAM;
close OUT_STL;

$db->close;

$log->mail();
print "Finished.\n" if ($verbose);
exit(0);

##############################################################
#
# Subroutines
#
##############################################################


sub numerically {
  my ($a,$b);
  $a <=> $b;
}

#######################################################################
# Help and error trap outputs                                         #
#######################################################################

sub run_details {
  print "# introncheck\n";     
  print "# run details    : $rundate $runtime\n";
  print "\n";
}

##########################################

sub usage {
  my $error = shift;
  
  if ($error == 1) {
    # No WormBase release number file
    print "The WormBase release number cannot be parsed\n";
    &run_details;
    exit(0);
  }
  elsif ($error == 0) {
    # Normal help menu
    system ('perldoc',$0);
    exit (0);
  }
}

# This creates a file of confirmed introns and file of introns in gene models for each chromosomes
sub make_intron_files {
  $log->write_to("making intron files\n");
  my $chrom = shift;
  my $est_introns  = $gffdir."/CHROMOSOME_${chrom}_est_introns.gff";
  my $gene_introns = $gffdir."/CHROMOSOME_${chrom}_gene_introns.gff";
  my ($est, $gene);
  open $est , ">$est_introns"  or $log->log_and_die("cant write $est_introns: $!\n");
  open $gene, ">$gene_introns" or $log->log_and_die("cant write $gene_introns: $!\n");
  
  #determine file to output to by methods
  my %method2file = ( 'Non_coding_transcript' => $gene,
		      'Pseudogene'            => $gene,
		      'Transposon_CDS'        => $gene,
		      'tRNAscan-SE-1.23'      => $gene,
		      '.'                     => $est,
		      'ncRNA'                 => $gene,
		      'curated'        => $gene,
		    );
  
  #read in the gff file intron lines
  open GFF,("grep intron ".$wormbase->chromosomes."/CHROMOSOME_${chrom}.gff |") 
    or $log->log_and_die("cant grep ".$wormbase->chromosomes."/CHROMOSOME_${chrom}.gff");

  while( <GFF> ){
    my @data = split;
    #    next unless ($data[3] eq "16252");
    
    if (($data[1] eq "twinscan") or ($data[1] eq "Genefinder")) {
      if ($_ =~ (/Confirmed_\S+/)) {
	print { $method2file{"."} } $_;
      }
      else {next};
    }
    
    elsif($method2file{$data[1]}) {
      print { $method2file{$data[1]} } $_;
    }
  }
}

__END__

=pod

=head1 NAME - introncheck

=back

=head1 USAGE

=over 4

=item introncheck [-options]

introncheck searches for confirmed introns which aren't part of a gene model yet.

=back

=head2 dbcheck MANDATORY arguments:

=over 4

=item none

=back

=head2 introncheck OPTIONAL arguments:

=over 4

=item -h, Help

=item -d, Debug/Verbose mode

=back

=head1 AUTHOR - Daniel Lawson

Email dl1@sanger.ac.uk

=cut

#!/usr/local/bin/perl5.8.0 -w
#
# introncheck
#
# introncheck searches for confirmed introns which aren't part of a gene model yet
#
# Usage: introncheck [-options]
#
# Last updated by: $Author: ar2 $     
# Last updated on: $Date: 2006-02-17 11:32:47 $      

use strict;                                      
use lib $ENV{'CVS_DIR'};
use Wormbase;
use Getopt::Long;
use Carp;
use Log_files;
use Storable;
use Ace;
use Coords_converter;

$| = 1;

##############################
# command-line options       #
##############################

my ($help, $debug, $test, $verbose, $store, $wormbase);

GetOptions ("help"       => \$help,
            "debug=s"    => \$debug,
	    "test"       => \$test,
	    "verbose"    => \$verbose,
	    "store:s"      => \$store,
	    );

if ( $store ) {
  $wormbase = retrieve( $store ) or croak("Can't restore wormbase from $store\n");
} else {
  $wormbase = Wormbase->new( -debug   => $debug,
                             -test    => $test,
			     );
}

# Display help if required
&usage("Help") if ($help);

# in test mode?
if ($test) {
  print "In test mode\n" if ($verbose);

}

# establish log file.
my $log = Log_files->make_build_log($wormbase);

##############################
# Script variables (run)     #
##############################

my $rundate = `date +%y%m%d`; chomp $rundate;
my $runtime = $wormbase->runtime;

 ##############################
 # Paths etc                  #
 ##############################

my $tace   = $wormbase->tace;    # tace executable path
my $dbdir  = $wormbase->autoace; # Database path
my $gffdir = $wormbase->gff_splits;

my @chromosomes = ('IV','II','III','I', 'V','X');
my %confirmed_intron = ();		  


our $coords = Coords_converter->invoke($dbdir, 1, $wormbase);         # invoke coordinate parser



########################################
# Connect with acedb server            #
########################################

my $db = Ace->connect(-path=>$dbdir) || die "Couldn't connect to $dbdir\n";

foreach my $chromosome (@chromosomes) {

  my (@coords, @introns);
  
  print "Checking GFF file: 'CHROMOSOME_${chromosome}'\n";

  open (OUT_CAM, ">$dbdir/CHECKS/CHROMOSOME_${chromosome}.check_intron_cam.gff");
  open (OUT_STL, ">$dbdir/CHECKS/CHROMOSOME_${chromosome}.check_intron_stl.gff");

  #######################################
  # make a hash for all curated introns #
  #######################################

  print "Make a hash for all curated introns on chromosome $chromosome\n";
  open (GFF_in, "$ENV{'CVS_DIR'}/gff_sort $gffdir/CHROMOSOME_${chromosome}.intron.gff |") || die "Failed to open gff file at $gffdir/CHROMOSOME_${chromosome}.intron.gff\n\n";
  
  while (<GFF_in>) {
    chomp;
    s/\#.*//;
    next unless /\S/;
    my @f = split /\t/;
    push (@introns,"$f[3] $f[4] $f[8]");
  }	
  close GFF_in;


  ###################################################
  # print "Cycle through introns in .gff file\n\n"; #
  ###################################################
  print "Cycle through all introns on chromosome $chromosome\n";
  
  open (GFF, "$ENV{'CVS_DIR'}/gff_sort $gffdir/CHROMOSOME_${chromosome}.intron_all.gff |") || die "Failed to open gff file at $gffdir/CHROMOSOME_${chromosome}.intron_all.gff \n\n";
  
  while (<GFF>) {       	
      chomp;
      s/\#.*//;
      next unless /\S/;
      
      # split the GFF line
      my @f = split /\t/;
      
      # reset match tag
      my $match = 0;
      my $line = $_;     
      
      # Confirmed_introns not in gene models
      
      # ignore some marked introns
#    print "discard as false : $line\n" if ($f[8] =~ /Confirmed_false/); 
      next if ($f[8] =~ /Confirmed_false/);                # Bad BLAT mapping
#    print "discard as inconsistent : $line\n" if ($f[8] =~ /Confirmed_inconsistent/); 
      next if ($f[8] =~ /Confirmed_inconsistent/);         # Can't make a valid CDS prediction from this
      
#	 ( ($f[2] eq "intron") && ($f[1] eq "Coding_transcript") ) || 
      
      
      if ( ( ($f[2] eq "intron") && ($f[1] eq ".") && (not $f[8] =~ /Confirmed_UTR/) ) || 
	   ( ($f[1] eq "NDB_CDS") && (($f[8] =~ /Confirmed_EST/) || ($f[8] =~ /Confirmed_cDNA/) ) ) ) {
	  
#      print "Parse : $line\n";
	  
	  # print "Check through known intron coordinates: $f[3] $f[4]\n";
	  
	  foreach my $look (@introns) {
	      my ($start,$stop,$seq) = split (/ /, $look);
#	 print "  => $start $stop $seq\n";
	      if (($f[3] == $start) && ($f[4] == $stop) ) {
		  # found match
		  $match = 1;
#	   print " !! found match !!\n";
		  last;
	      }
	  }
	  
	  unless ($match == 1) {	
	      
	      my @data = $coords->LocateSpan($f[0], $f[3], $f[4]);
	      print "$f[0] $f[3] $f[4] Maps to $data[0] from $data[1] - $data[2]\n";
	      
	      my $obj = $db->fetch(Sequence=>$data[0]);
	      my $lab;
	      unless (!defined ($obj)) {
		  $lab=$obj->From_laboratory(1);
		  $obj->DESTROY();
	      }
	      if ($lab eq "HX") {
		  # print "CAM => $line Clone:$data[0] Lab:$lab\n";
		  print OUT_CAM "$line\tClone:$data[0] $data[1] $data[2]\tLab:$lab\n";
	      }
	      elsif ($lab eq "RW") {
		  # print  "STL => $line Clone:$data[0] Lab:$lab\n";
		  print OUT_STL "$line\tClone:$data[0] $data[1] $data[2]\tLab:$lab\n";
	      }
	      $lab = "";
	      $confirmed_intron{$chromosome}++;
	  }
	  # end of parse loop  
      }
#    else {
#      print "discard : $line\n";
#    }
      
  }
  close GFF;
  
  print "Completed GFF file: 'CHROMOSOME_${chromosome}'\t: Confirmed_introns not in GeneModel $confirmed_intron{$chromosome}\n";
}
close OUT_CAM;
close OUT_STL;

$db->close;

$log->mail();
print "Finished.\n" if ($verbose);
exit(0);

##############################################################
#
# Subroutines
#
##############################################################


sub numerically {
  my ($a,$b);
  $a <=> $b;
}

#######################################################################
# Help and error trap outputs                                         #
#######################################################################

sub run_details {
    print "# introncheck\n";     
    print "# run details    : $rundate $runtime\n";
    print "\n";
}

##########################################

sub usage {
    my $error = shift;

    if ($error == 1) {
        # No WormBase release number file
        print "The WormBase release number cannot be parsed\n";
        &run_details;
        exit(0);
    }
    elsif ($error == 0) {
        # Normal help menu
        system ('perldoc',$0);
        exit (0);
    }
}


__END__

=pod

=head1 NAME - introncheck

=back

=head1 USAGE

=over 4

=item introncheck [-options]

introncheck searches for confirmed introns which aren't part of a gene model yet.

=back

=head2 dbcheck MANDATORY arguments:

=over 4

=item none

=back

=head2 introncheck OPTIONAL arguments:

=over 4

=item -h, Help

=item -d, Debug/Verbose mode

=back

=head1 AUTHOR - Daniel Lawson

Email dl1@sanger.ac.uk

=cut

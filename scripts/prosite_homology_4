#! /usr/local/bin/perl

#Script to create an .ace file to add prosite homologies for cosmid data
#940427; Steven Jones, Sanger Centre
#940614 updated to account for bug fix in PSsearch (previously prosearch)
#960125 change to using queryprosite, perl script

#Note: this program requires a number of other programs to run:

#revcomp - which returns the reverse complement of a given DNA sequence
#translate - which returns the translation of a given sequence
#PSsearch - which searches a database of prosite motifs. 
#efetch - which returns a prosite entry

#Usage: Prosite_Homology Sequence_name 

#Important - Prosite homology will then look for a file 
#Sequence_name.seq (i.e. the DNA file must have a .seq suffix.)
#the format of the DNA file must be plain. NO HEADERS etc. 

#I have not put much error trapping routines in this as it 
#will only be used in batch mode.

#Takes about 6 minutes per cosmid


#############################################
# command line switch for genomic sequences #
#############################################

while ($ARGV[0] =~ /^-/) {
    $_=shift;
    if (/^-y(.*)/) {
        $tab_file = 1;
        open(STDOUT,">${ARGV[0]}_pro.ace"); 
	}else {
	    &usage;
	}
}


#########
# usage #
#########

sub usage {
    print "prosite_homology_4\n\n";
    print "-y   print tab file for yeasties\n";
    exit;
}


#create prosite directory for this cosmid 
#if (! -e prosite) {system ("mkdir prosite");}
 -d "prosite" || mkdir("prosite",0777) || die "cannot make prosite directory";
#create temp filenames for each DNA file which is to be translated

open (temp_file, "> temp_file$$");

$cosmid=$ARGV[0];
print "\n";
$/="";
open(sequence, "$cosmid.seq");
	while(<sequence>) {
		#make series of cosmid sequences with 0 -> 2 bases removed		
	        $cosmid_sequence[0]=$_;
		s/^\w//;  $cosmid_sequence[1]=$_;
	 	s/^\w//;  $cosmid_sequence[2]=$_;
			}
		#need to make an array containing the reverse complement of the seqeunce
		 open(revcomp, "revcomp $cosmid.seq |");
	while (<revcomp>) {
	        #make series of cosmid sequences with 0 -> 2 bases removed
		$cosmid_sequence[3]=$_;
        	s/^\w//;  $cosmid_sequence[4]=$_;
        	s/^\w//;  $cosmid_sequence[5]=$_;
			}
#disable paragraph mode
		$/="\n";
		$i=-1;

#Now need to translate in each frame ready for the prosearch and print out the 
#prosite results and the data for each prosite match

foreach $sequence (@cosmid_sequence) {$i++;
	open (temp_file, "> temp_file$$");
	print temp_file $sequence;
	close temp_file;
	system("translate temp_file$$ >temp_file.pep");
	#960125 change to perl script to search prosite database
	system("queryprosite -g -d temp_file.pep > proresults"); 
	#place a copy of the prosite results in the prosite directory
	system ("cp proresults prosite/Queryprosite-$cosmid-$i");
	close temp_file;
	open(pro, "proresults");


	READPRORESULTSLINE:  while (<pro>) { if (/^PS/) { ($accessnumber, $location, $name, $pat) = split (/\s+/,$_);
				#Strip out PS00013 here since it is too common
				#960125 Also strip PS00014 & PS00294 for similar reasons
				if ($accessnumber eq "PS00013") {next READPRORESULTSLINE;};
	      	       		if ($accessnumber eq "PS00294") {next READPRORESULTSLINE;};
       				if ($accessnumber eq "PS00014") {next READPRORESULTSLINE;};
				($start, $finish) =split (/->/,$location);	
				#for some reason this difference between start and
				#finish one more than it should be , therefore 
				#$finish--;
				#940694 bug fix in prosearch eliminated the need for this also at this 
				#time proseaarch was renamed PSsearch.
				#work out actual co-ordinates
				if ($i==0){ $startdna=($start*3)-2;$finishdna=($finish*3)-2;}
				if ($i==1){ $startdna=($start*3)-1;$finishdna=($finish*3)-1;}
				if ($i==2){ $startdna=($start*3);$finishdna=($finish*3);}
				#work out dna coordinates for the reverse-complement
				@cosmid_length=split(/\w/, $cosmid_sequence[0]);
				if ($i==3){ $revstartdna=($start*3)-2;$revfinishdna=($finish*3)-2;
						$startdna=($#cosmid_length-$revstartdna)+1;
						$finishdna=($#cosmid_length-$revfinishdna)+1;}
                                if ($i==4){ $revstartdna=($start*3)-1;$revfinishdna=($finish*3)-1;
                                                 $startdna=($#cosmid_length-$revstartdna)+1;
						$finishdna=($#cosmid_length-$revfinishdna)+1;}
                                if ($i==5){ $revstartdna=($start*3);$revfinishdna=($finish*3);
                                                  $startdna=($#cosmid_length-$revstartdna)+1;
						  $finishdna=($#cosmid_length-$revfinishdna)+1;}
				#can calculate the length of the prosite match from startdna and finish 
				$length_prosite=(($startdna-$finishdna)/3);$length_prosite=~s/-//;
				$length_prosite++;
				#need to get the info_count and expected from the prosite entry
				open(entry,"efetch PS:$accessnumber|");
					while(<entry>) {  if (/INFO_CONT=/) {s/^CC\s+//;s/\/INFO_CONT=//;s/\/EXPECTED=//;
							  ($info_count, $expected)=split(/\s/,$_);
										}
							  if (/^DE\s+/) {chop;s/^DE\s+//;s/\.//;$title=$_;}

							}  
				print  "Sequence $cosmid\n";
     	                        print  "Homol Motif_homol PS:$accessnumber Queryprosite $info_count $startdna $finishdna 1 $length_prosite\n\n";
				#need to make sequence file for the prosite homology
				$pro = "Motif PS:$accessnumber \nTitle  \"$title\" \nDB_info Database PROSITE $accessnumber $accessnumber \nSubstrate Peptide\nHomol DNA_homol $cosmid Queryprosite  $info_count 1 $length_prosite $startdna $finishdna \n\n\n\n"; 
				print $pro;

							  if ($tab_file == 1) {
							      if ($i > 2)
							      {   $finishdna-=2;
								  $coords = "complement\($startdna\.\.$finishdna\)";}
							      else
							      {	$finishdna+=2;
								$coords = "$startdna\.\.$finishdna";}

							      # Marie-Adele's code for DIANA feature table (cosmid_pro_tab)
							      open (TABFILE, ">>${cosmid}_pro.tab");
							      
							      $feature = "FT   CDS_motif        $coords
FT                   \/note=\"$accessnumber $title, $pat, info count = $info_count\"
FT                   \/colour=8
FT                   \/label=*\n";
							      
							      print TABFILE $feature;
							  }



}
			}
}
#need to tidy up

unlink "temp_file$$";
unlink "temp_file.pep";
unlink "proresults";









	




#!/usr/local/bin/perl

# Script to maintain the ftp site.
#
#
# Steven Jones, Sanger Centre
# I hate this script.
# Tony Cox, Sanger Centre
# So do I.

my $CE_FTPDIR = '/nfs/disk69/ftp/pub/databases/C.elegans_sequences';
my $CD_DBDIR = '/nfs/disk100/wormpub/analysis/Sequence_Databases';

require glob('~sjj/scripts/sanger.pl');
$wormpub=&tilda(wormpub);

########################################################################
# Build a hash that maps clones to their chromosome numbers
########################################################################

%chrome=&mapchromes2;

########################################################################
# grab all clones from the St L. FTP site regardless
# and put them in /FINISHED dir ready to be sorted
########################################################################

# avc: ***OBSOLETE*** This is now done by the code below:
# system ("$wormpub/analysis/scripts/stlcmid2ftpsite");
# The stlcmid file is fetched from STL each night (cronjob: wormpub on ics1a) 
# by: ~wormpub/analysis/scripts/get_stlouis_data

open (FILE, "$wormpub/analysis/stlcosmids/stlcmid");

while (<FILE>){
	if (/^>(\w+)\//) {
		my $cosmid=$1;
		$cosmid=~tr/a-z/A-Z/;
		close OUTPUT;
		open (OUTPUT, ">$CE_FTPDIR/FINISHED_SEQUENCES/$cosmid.seq");		
		#print STDOUT "Processing $cosmid.seq...\n";
	}
	print OUTPUT "\U$_";
}

close (FILE);

############################################################################
#Put anything in FINISHED directory in the proper chromosome bin
############################################################################

print "Putting finished sequences in chromosome directories\n";
opendir(FINISHED, "$CE_FTPDIR/FINISHED_SEQUENCES");
@seqfiles = grep (/\.seq$/, readdir(FINISHED));
closedir(FINISHED);
 
foreach my $cosmid (@seqfiles){
	$cosmid =~ s/\.seq//;
	$chromosome=$chrome{$cosmid};
	
	if ($chromosome eq ""){
		print STDOUT "Position for cosmid $cosmid not found\n";
	}
	else{
		print STDOUT "FINISHED:$cosmid ==> Chromosome $chromosome\n";
		#Put a copy in the unsorted bin
		system ("\\cp -f $CE_FTPDIR/FINISHED_SEQUENCES/$cosmid.seq $CE_FTPDIR/FINISHED_SEQUENCES/UNSORTED/");
		#Move the sequence to the appropriate bin
		system ("\\mv -f $CE_FTPDIR/FINISHED_SEQUENCES/$cosmid.seq $CE_FTPDIR/FINISHED_SEQUENCES/$chromosome/");
	} 
}

# avc: ***OBSOLETE*** This is now done by the code below because the 'mv' was
# failing due to an over-long argument list.
# Move all the unsorted cosmids (without a home) to the unsorted directory.
# system("\\mv $CE_FTPDIR/FINISHED_SEQUENCES/*.seq $CE_FTPDIR/FINISHED_SEQUENCES/UNSORTED/");

my $pwd = `pwd`;
chomp ($pwd);
chdir ("$CE_FTPDIR/FINISHED_SEQUENCES/"); 
my @templist = <*.seq>;
print "Moving ".scalar @templist." sequences to UNSORTED dir...\n";
system("\\mv *.seq ./UNSORTED/");
chdir ("$pwd"); 


###############################################################################
# Sort out the UNIFINISHED DIRECTORY and put the shotgun data on the ftp site,
# data now goes into the UNSORTED dir of the UNFINISHED section of the ftp site
###############################################################################

print "Putting shotgun data on the ftp site\n";
system("echo '/nfs/disk100/wormpub/analysis/scripts/shotgunned_to_FTP_site' | /usr/bin/csh - "); 
# put in /nfs/disk69/ftp/pub/databases/C.elegans_sequences/UNFINISHED_SEQUENCES/UNSORTED/


#Need to remove all the sequences in the sorted bins. Otherwise
#these will accumulate sequences which have been finished. 

system ("\\rm $CE_FTPDIR/UNFINISHED_SEQUENCES/I/*.shg");
system ("\\rm $CE_FTPDIR/UNFINISHED_SEQUENCES/II/*.shg");
system ("\\rm $CE_FTPDIR/UNFINISHED_SEQUENCES/III/*.shg");
system ("\\rm $CE_FTPDIR/UNFINISHED_SEQUENCES/IV/*.shg");
system ("\\rm $CE_FTPDIR/UNFINISHED_SEQUENCES/V/*.shg");
system ("\\rm $CE_FTPDIR/UNFINISHED_SEQUENCES/X/*.shg");

#Sort the ftp data into chromosomes

print "Putting shotgun data from UNFINISHED/UNSORTED dir in proper chromosome directories\n";
opendir(SHOTGUNNED, "$CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED");
@unfinfiles = grep (/\.shg$/, readdir(SHOTGUNNED));
closedir(SHOTGUNNED);
 
foreach $cosmid (@unfinfiles) {
	$cosmid=~s/\.shg//;
	$chromosome=$chrome{$cosmid};
	
	if ($chromosome eq "") {
		$chromosome=&celechrom($cosmid);
	}
	if ($chromosome eq "") {
		print STDERR "Position for cosmid $cosmid not found\n";
	}
	else{
		print "UNFINISHED:$cosmid $chromosome\n";
		system ("cp -p $CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED/$cosmid.shg $CE_FTPDIR/UNFINISHED_SEQUENCES/$chromosome/");
	} 
}

##############################################################################################
# Maintain up to date copies of allcmid and unfincmid on the ftp site
#
# The cmid FASTA DB is only rebuilt when a cosmid analysis has been completed.
# This is done by the "cele-anacon" script in ~wormpub/analysis/scripts. It can
# be created by hand using ~wormpub/analysis/scripts/make_nemseq
#
##############################################################################################

open (OUTUNFIN, ">$CD_DBDIR/unfincmid") or die "Cannot create unfincmid FASTA file: $!\n";
open (UNFIN, "cat $CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED/*.shg |");

while(<UNFIN>) {
	print OUTUNFIN $_;
}
close UNFIN;
close OUTUNFIN;

system("\\cp $CD_DBDIR/allcmid $CE_FTPDIR/allcmid");
system("\\cp $CD_DBDIR/unfincmid $CE_FTPDIR/unfincmid");
system("\\cp $CD_DBDIR/cmid $CE_FTPDIR/cmid");

system("pressdb $CD_DBDIR/unfincmid");

############################################################################################
#Maintain St. louis unfinished. 
#@stlbin=(I,II,III,IV,V,X,UNSORTED);
#970305: The unsorted directory now contains all the Stl. unfinished stuff and so ignore this
############################################################################################

open(STLUNFINCMID,">$CD_DBDIR/stlunfincmid");
@stlbin=(I,II,III,IV,V,X);
foreach $bin (@stlbin) {
	open (FILE,"cat $CE_FTPDIR/UNFINISHED_SEQUENCES/STLOUIS_UNFINISHED/$bin/*.seq |");
	while (<FILE>) {
		if (/^>/) {
			chop;
			print STLUNFINCMID  "$_ STLOUIS UNFINISHED DATA FROM CHROMOSOME $bin\n";
		}
	    else {
			print STLUNFINCMID $_;
		}
	}
	close FILE;
}
close STLUNFINCMID;

##############################################################################################
#Maintain the blast databases 
#############################################################################################

#save existing allcmid in case of a meltdown
system("\\cp -f $CD_DBDIR/allcmid $CD_DBDIR/allcmid.from.yesterday");

#make allcmid and pressdb it
unlink "$CD_DBDIR/stlandcam-cmid"; 

## clean_up_cmid script
## makes sure the FASTA header only contains the seq or clone name (removes completion date)

system("cat $CD_DBDIR/cmid | clean_up_cmid - > $CD_DBDIR/stlandcam-cmid"); 
system("cat $CD_DBDIR/stlcmid | clean_up_cmid - >> $CD_DBDIR/stlandcam-cmid");

unlink "$CD_DBDIR/allcmid";
system("cat $CD_DBDIR/stlandcam-cmid > $CD_DBDIR/allcmid");
system("cat $CD_DBDIR/unfincmid >> $CD_DBDIR/allcmid");
system("cat $CD_DBDIR/stlunfincmid >> $CD_DBDIR/allcmid");

#modify FASTA headers that are not unique by adding the contig number to the name (avc: 17.6.99)

open (ALLCMID, "$CD_DBDIR/allcmid") or die "Can't modify fasta headers: $!\n";
open (TEMPCMID, ">$CD_DBDIR/tempallcmid") or die "Can't create temp allcmid file: $!\n";

while (<ALLCMID>){
	if (/>/){
		if (/Contig ID=(\w*)\s*/i){
			my $ctg = ".ctg$1";
			$_ =~ s/^>(\w*)(\s*)(.*)/>$1$ctg$2$3/i;
		}
	}
	print TEMPCMID $_;
}

close (TEMPCMID);
close (ALLCMID);
unlink "$CD_DBDIR/allcmid";
system ("\\mv $CD_DBDIR/tempallcmid $CD_DBDIR/allcmid");

system("pressdb $CD_DBDIR/allcmid");

##########################################################################
# Sanity check for pressdb & worm blast databases
##########################################################################

opendir (DIR, "$CD_DBDIR");
foreach $filename (readdir(DIR)){
    if ( -z $filename ){
		push(@filenames, $filename);
    }
}
closedir(DIR);
if ( $#filenames >= 0 ){
    open(MAIL, "| Mail -s \"Warning: pressdb failed on ALLCMID\" webmaster\@sanger.ac.uk");
    print MAIL "\n The following files have zero length:\n@filenames\n";
    close MAIL;
}
###############################################################################################
#Update the numbers for the Sanger Clock
###############################################################################################

unlink "/nfs/disk2/sign/orginfo/celegans.unfin";
unlink "/nfs/disk2/sign/orginfo/celegans.fin";

# seqcount returns the no. of bases in a FASTA file or database
system("seqcount $CD_DBDIR/unfincmid > /nfs/disk2/sign/orginfo/celegans.unfin");
system("seqcount $CD_DBDIR/cmid > /nfs/disk2/sign/orginfo/celegans.fin");

exit(1);

# We are finished - go home.


####################################################################################
# This subroutine is deprecated - the cam Db is no longer maintained
####################################################################################

sub mapchromes {
    local($command);
    #local(@chrome);
    local(%chrome);
    undef %chrome;
	local($map);
    $command=<<EOF;
    find genome_sequence *
    show -a map
    quit
EOF

	open(TEXTACE, "echo '$command' | tace /nfs/disk100/wormpub/acedb/ace4/cam | ");
    while (<TEXTACE>) {						#print;
		if (/^Sequence\s+:\s+\"(\w+)\"/)  {
			$sequence=$1;
		}
		if (/\s+\"Sequence-(\S+)"\s+/)  {
			$map=$1;
			#print "assigning $sequence to $map\n";
			$chrome{$sequence}=$map;
        }
    }
    close TEXTACE;     
    #return @chrome;
    return %chrome;
}

####################################################################################
# This is a slightly different version of the sub that get the chromosome locn. of
# a clone from the maintained cgc database using the "Interpolated_gMap" tag. The cgc
# DB does not have the "Map" tag any more.
####################################################################################


sub mapchromes2 {
    local($command);
    local(%chrome);
    undef %chrome;
	local($map);
    $command=<<EOF;
    find genome_sequence *
    show -a Interpolated_gMap
    quit
EOF

	open(TEXTACE, "echo '$command' | tace /nfs/disk100/wormpub/acedb/ace4/cgc | ");
    while (<TEXTACE>) {						
		#print;
		if (/^Sequence\s+:\s+\"(\w+)\"/)  {
			$sequence=$1;
		}
		if (/^Interpolated_gMap\s+\"(\S+)"\s+/)  {
			$map=$1;
			#print "Assigning $sequence to $map\n";
			$chrome{$sequence}=$map;
        }
    }
    close TEXTACE;     
	#print  "AH6 is on chromosome $chrome{'AH6'}\n";
    return %chrome;

}








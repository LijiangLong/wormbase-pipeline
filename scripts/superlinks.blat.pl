#!/usr/local/bin/perl5.6.0
#
# maps superlinks into overlapping virtual objects with a size of 120 000 bp
# to be used on a file generated by dumping chromosomes from autoace 
# (see ../blat2/rawdata/chromosomes.ace) 
#
# superlinks.blat.pl [-c -m -x] <file> > <outfile>
##
# 25.09.01 Kerstin Jekosch

use strict;
use Getopt::Std;
use vars qw($opt_c $opt_m $opt_x);

$opt_c = ""; # create output for camace clones only
$opt_m = ""; # create output for mRNAs (default is EST)
$opt_x = ""; # create output for parasitic nematode ESTs (blatx)
getopts('$cmx');
my %camace;

if ($opt_c) {
	my @camclones = qw(cTel3X cTel4X CTEL7X cTel33B CTEL54X LINK_6R55 LINK_cTel52S SUPERLINK_CB_I SUPERLINK_CB_II SUPERLINK_CB_IIIL SUPERLINK_CB_IIIR SUPERLINK_CB_IR SUPERLINK_CB_IV SUPERLINK_CB_V SUPERLINK_CB_X); 
	foreach my $camclone (@camclones) {
		$camace{$camclone} = 1;
	}
}

while (<>) {
	if (/Subsequence\s+"(\S+)" (\d+) (\d+)/) {
		my $name  = $1;
		my $length =  $3 - $2 + 1;
		if ((!$opt_c) || (exists $camace{$name})) {
			print "Sequence : \"$name\"\n";
		}
		my $total = int($length/100000) +1;
		for (my $n = 0; $n <= $total; $n++) {
			my $m = $n+1;
			my $first  = ($n*100000) + 1;
			my $second = $first+149999;
			if (($length - $first) < 100000) {
				$second = $length;
				if ((!$opt_c) || (exists $camace{$name})) {
					print "S_Child Homol_data BLAT_EST:$name"."_$m $first $second\n" unless ($opt_m || $opt_x);  
					print "S_Child Homol_data BLAT_mRNA:$name"."_$m $first $second\n"    if ($opt_m); 
					print "S_Child Homol_data BLAT_panem:$name"."_$m $first $second\n"   if ($opt_x); 
				}
				last;
			}					
			else {
				if ($second >  $length) {
					$second = $length;
				}	
				if ((!$opt_c) || (exists $camace{$name})) {
					print "S_Child Homol_data BLAT_EST:$name"."_$m $first $second\n" unless ($opt_m || $opt_x);  
					print "S_Child Homol_data BLAT_mRNA:$name"."_$m $first $second\n"    if ($opt_m);  
					print "S_Child Homol_data BLAT_panem:$name"."_$m $first $second\n"   if ($opt_x);  
				}
			}
		}
		print "\n";
	}
}

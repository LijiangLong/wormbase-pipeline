#!/usr/local/bin/perl5.6.0
#
# superlinks.confirmed_introns.pl
# kj2
#
# maps superlinks into overlapping virtual objects with a size of 120 000 bp
# to be used on a file generated by dumping chromosomes from autoace 
# superlinks.confirmed_introns.pl [-c] <file> > <outfile>
#
# superlinks.confirmed_intron.pl [-c -m -x -o -e -f] 
#
# -c        : create output for camace clones only
# -s        : create output for stlace clones only   => if neither is supplied then the default is autoace       
#
# -e        : create output for ESTs 
# -m        : create output for mRNAs 
# -x        : create output for parasitic nematode ESTs (blatx)
# -o        : create output for other CDS
#
# -f <file> :  chromosome.ace file to use, if not supplied then use default
#
# 25.09.01 Kerstin Jekosch

use strict;
use Getopt::Std;
use vars qw($opt_c $opt_s $opt_m $opt_e $opt_o $opt_f $opt_h);

my %camace;
my %stlace;

# default chromsome.ace file
our $acefile = "/wormsrv2/autoace/BLAT/chromosome.ace";
our $type = "";
our %word = (
	     e => 'Confirmed_intron_EST',
	     m => 'Confirmed_intron_mRNA',
	     o => 'Confirmed_intron_EMBL',
	     );

 ########################################
 # command-line options & ramifications #
 ########################################

getopts('csmeohf:');

# Help pod documentation
&usage(0) if ($opt_h);

# Exit if no data type choosen [EST|mRNA|EMBL]
&usage(1) unless ($opt_e || $opt_m || $opt_o); 

# Exit if multiple data types choosen [EST|mRNA|EMBL]
&usage(2) if (($opt_e + $opt_m + $opt_o) > 1);

# assign type variable
($type = 'e') if ($opt_e);
($type = 'm') if ($opt_m);
($type = 'o') if ($opt_o);

# Input data consistency
($acefile = $opt_f) if ($opt_f);
&usage(3) unless (-e $acefile);

# if no database option given then do both.
# (i know but oranges are not the only fruit)
if ((!$opt_c) && (!$opt_s)) {
    $opt_c = 1;
    $opt_s = 1;
}

 ##############################
 # parse camace only          #
 ##############################
 #
 # [dl] don't like these much. This is just to see which objects reside in which primary
 # this data can go stale. could this be re-written using aceperl/tablemaker and the hash
 # populated automatically => slower but more manageable.


if ($opt_c) {
	my @camclones = qw(cTel3X cTel4X cTel7X cTel33B cTel54X LINK_6R55 LINK_cTel52S SUPERLINK_CB_I SUPERLINK_CB_II SUPERLINK_CB_IIIL SUPERLINK_CB_IIIR SUPERLINK_CB_IR SUPERLINK_CB_IV SUPERLINK_CB_V SUPERLINK_CB_X); 
	foreach my $camclone (@camclones) {
		$camace{$camclone} = 1;
	}
}

 ##############################
 # parse stlace only          #
 ##############################

if ($opt_s) {
    my @stlclones = qw(SUPERLINK_RW1 SUPERLINK_RW1R SUPERLINK_RW2 SUPERLINK_RW3A SUPERLINK_RW3B SUPERLINK_RW4 SUPERLINK_RW5 SUPERLINK_RWXL SUPERLINK_RWXR);
    foreach my $stlclone (@stlclones) {
	$stlace{$stlclone} = 1;
    }
}

 ##############################
 # parse chromosom.ace file   #
 # to build virtual contigs   #
 ##############################

# vars used in this BLOCK
my ($name,$length,$total,$first,$second,$m,$n);

open (ACE, "<$acefile") || die &usage(3);
while (<ACE>) {
    if (/Subsequence\s+"(\S+)" (\d+) (\d+)/) {
	$name  = $1;
	$length =  $3 - $2 + 1;
	if ((exists $camace{$name}) || (exists $stlace{$name})) {
	    print "Sequence : \"$name\"\n";
	}
	$total = int($length/100000) +1;
	for ($n = 0; $n <= $total; $n++) {
	    $m = $n+1;
	    $first  = ($n*100000) + 1;
	    $second = $first + 149999;
	    if (($length - $first) < 100000) {
		$second = $length;
		if ((exists $camace{$name}) || (exists $stlace{$name})) {
		    print "S_Child Feature_data $word{$type}:$name"."_$m $first $second\n";
		}
		last;
	    }
	    else { 
		($second = $length) if ($second >  $length);
		if ((exists $camace{$name}) || (exists $stlace{$name})) {
		    print "S_Child Feature_data $word{$type}:$name"."_$m $first $second\n";
		}
	    }
	}
	print "\n";
    }
}
close ACE;


 ##############################
 # hasta luego                #
 ##############################

exit(0);

#################################################################################
### Subroutines                                                               ###
#################################################################################

sub usage {
    my $error = shift;

    if ($error == 1) {
	# No data-type choosen
	print "\nNo data option choosen [-e|m|o|x]\n";
	print "Run with one of the above options\n\n";
	exit(0);
    }
    if ($error == 2) {
	# 'Multiple data-types choosen
	print "\nMultiple data option choosen [-e|m|o|x]\n";
	print "Run with one of the above options\n\n";
	exit(0);
    }
    if ($error == 3) {
	# 'chromosome.ace' file is not there or unreadable
	print "\nThe WormBase 'chromosome.ace' file you specified does not exist or is non-readable.\n";
	print "Check File: '$acefile'\n\n";
	exit(0);
    }
    elsif ($error == 0) {
	# Normal help menu
	exec ('perldoc',$0);
    }
}


__END__

=pod

=head2 NAME - superlinks.confirmed_introns.pl

=head1 USAGE 

=over 4

=item superlinks.confirmed_introns.pl [-options]

=back

superlinks.confirmed_introns.pl creates the 150 kb virtual objects used in feature mappings. 

superlinks.confirmed_introns.pl mandatory arguments:

=over 4

=item -e, create virtual objects for EST mappings

=item -m, create virtual objects for mRNA mappings

=item -o, create virtual objects for other EMBL CDS mappings

=back

superlinks.confirmed_introns.pl  OPTIONAL arguments:

=over 4

=item -c, create virtual objects for camace only

=item -s, create virtual objects for stlace only

=item -f <file>, use alternative chromosome.ace file 

=item -h, Help pages

=back

Examples:

superlinks.confirmed_introns.pl -e
Uses the chromosome.ace dump file to generate virtual objects for feature mappings of 
the EST confirmed introns. 
This covers all Subsequence children of each CHROMOSOME in the current WS release.

superlinks.confirmed_introns.pl -cm
Uses the chromosome.ace dump file to generate virtual objects for feature mappings of 
the mRNA confirmed introns.
This covers all Subsequence children of each CHROMOSOME in camace.

=head1 AUTHOR

Kerstin Jekosch (kj2@sanger.ac.uk)

=cut

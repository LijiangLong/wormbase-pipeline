#!/usr/local/bin/perl

##########################################################
#
# Makelinks program which will link up cosmid sequences and 
# their subsequences to create the minimal number of links.
# Performs a number of checks to make sure of the integrity 
# of the new links
# 1) Will check that all cosmids which should have overlap_right 
#    integer will have one
# 2) Will check that all sequences that previously were in a link
#    are put back into a link
# 3) Will check that all subsequences from links are put back into 
#    links.
#
#    WARNING: Current implementation relies on the fact that 
#    all links have the word LINK in their object name.
#    The program can only make links from sequences tagged
#    as being Genome_Sequence and which have the 
#    overlap_left and overlap_right tags filled
#
#   961122: Added a feature so that the output is only
#           printed IF the process has been successful. 
#
# Steven Jones, Sanger Centre, created 12/3/96
##########################################################


require glob('~sjj/scripts/sanger.pl');

select((select(STDOUT),$|=1)[0]);
open(file,">/tmp/file$$");


&coslength(\%cosmidlength);
&right(\%right,\%rights);



###########################################
#make links from each of the seeds 
###########################################


foreach $cosmid (&getseeds) {
    
    $endoflink=0;
    $count=0;
    $startright=0;
    $rightcosmid=$right{$cosmid};
    $link="LINK_$cosmid";
    print file "\n\nSequence $link\n";
    print file "Subsequence $cosmid 1 ";
    $length=$cosmidlength{$cosmid};
    print file "$length \n"; 

    #Capture link info
    $link{$cosmid}=$link;
    $start{$cosmid}=1;
    $end{$cosmid}=$length;
    #$beginninglink{$link}=$cosmid;


		while ($endoflink != 1) {
				$rightcosmid=$right{$cosmid};
    				if ($rightcosmid eq "") {$endoflink=1;next;}
				$startright=$startright+$rights{$cosmid};
				if ($count==1) {$startright--;} else {$count=1;}
				$lengthright=$cosmidlength{$rightcosmid};
       				$endright=($startright+$lengthright)-1;	
				print file "Subsequence $rightcosmid $startright $endright\n"; 
       				$link{$rightcosmid}=$link;
				$start{$rightcosmid}=$startright;
				$end{$rightcosmid}=$endright;
       				$cosmid=$rightcosmid;
				}		
	    
}


###########################################
#Do a quick check to make sure that everything 
#that was in a link has been put back in one
#e.g. a link where no overlap info existed
###########################################

foreach $lcosmid (&linkedcosmids) {
    if ($link{$lcosmid} eq "") {$result=$result."Cosmid $lcosmid was not put back in a link\n";}
}
if ($result ne "") {print STDERR "$result";exit;}

###########################################
#Re-map subsequences back onto the new links 
###########################################

&mapsubseq;

	foreach $subsequence (&subseq) {

	    #if the subsequence cannot be mapped back to a link then
	    #we should quit and fix the problem otherwise the subsequence
	    #will be lost.
 
	    if ($link{$namesake{$subsequence}} eq "") {print STDERR "$subsequence cannot be mapped back to a link\n";
						       exit;}

	    print file "\nSequence $link{$namesake{$subsequence}}\n";
	    print file "Subsequence $subsequence ";
	    print file $start{$namesake{$subsequence}}+$start{$subsequence};
	    print file " ";
	    print file $start{$namesake{$subsequence}}+$end{$subsequence};
	    print file "\n";

}

close file;
system("cat /tmp/file$$");
#unlink "/tmp/file$$";

exit;

###########
#Functions# 
###########

######################################################
#Function to map subsequence information to namesakes
######################################################

sub mapsubseq {
	$ENV{'ACEDB'}="/nfs/disk100/wormpub/acedb/ace4/cam";
        local ($exec);
        local (*textace);
        local ($command);
	$exec=&tace;
	foreach $subsequence (&subseq) {
		#Calc namesake		
		if ($subsequence=~/(\S+)\.\d+/) {$namesake{$subsequence}=$1;};
		$command=<<EOF;
		find sequence $namesake{$subsequence}
		follow source 
		show
		quit
EOF
		open(textace, "echo '$command' | $exec  | ");
		$correctlink=0;
		while (<textace>) {
			if (/\s+$namesake{$subsequence}\s+(\d+)\s+(\d+)/) {$namesakestart=$1;} #$namesakeend=$2;};
			if (/\s+$subsequence\s+(\d+)\s+(\d+)/) {$subsequencestart=$1;$subsequenceend=$2;$correctlink=1;
							    };
			$start{$subsequence}=$subsequencestart-$namesakestart;
			$end{$subsequence}=$subsequenceend-$namesakestart;
		    }
			#check that the subsequence has been found in the same link as the cosmid
			#if not send an error. This will also mean that the sequence will be put in the 
			#wrong place in the new links - this can be corrected by hand as I think this 
			#will not be a common error since it only occurs where links are with within links
		        if ($correctlink !=1) {print STDERR "$subsequence not found in same link as $namesake{$subsequence}\n";exit;}              
		                     
			}


}

#########################################################
#Map for each link return an array of the subsequences to
#be mapped to namesakes
#########################################################


sub subseq {
	$ENV{'ACEDB'}="/nfs/disk100/wormpub/acedb/ace4/cam";
        local ($exec);
        local (*textace);
        local ($command);
	$exec=&tace;
	$command=<<EOF;
	find sequence *link*
	follow subsequence	
	where coding OR pseudogene
	list -f - 
	quit
EOF
	open(textace, "echo '$command' | $exec  | ");
	while (<textace>) {
			 if (/^Sequence\s+:\s+\"(\S+)\"/) {push (@array,$1);}
			 #print "pushing $1 to array\n";
         	          }
	return @array;
	}


##########################################################
# Function to return an array of link seeds.
# We will define link seeds as genomic sequences for which 
# there is a cosmid known to the right with DNA but no 
# cosmids to the left which have DNA.  
##########################################################

sub getseeds {
		
	$ENV{'ACEDB'}="/nfs/disk100/wormpub/acedb/ace4/cam";
        local ($exec);
        local (*textace);
        local ($command);
	local (@array);
	undef @array;
	$exec=&tace;
	$command=<<EOF;
	find Genome_Sequence 
	where DNA
	where !  remark=unfinishe*      
	follow overlap_right
	where DNA
	where ! remark=unfinishe*    
	follow overlap_left
	where ! overlap_left=?*
	list -f - 
        undo
	where overlap_left=?*
	follow overlap_left
	where ! DNA
	follow overlap_right
	list -f - 
	quit
EOF
	open(textace, "echo '$command' | $exec  | ");
	while (<textace>) {if (/^Sequence\s+:\s+\"(\S+)\"/) {push (@array,$1);}}
	return @array;
}


#################################################################
#returns information about cosmid
#################################################################

sub right  {
           
        $rightname=$_[0];
	$ENV{'ACEDB'}="/nfs/disk100/wormpub/acedb/ace4/cam";
        local ($rightname);
        $rightname=$_[0];
        local ($startright);
        $startright=$_[1];
        local ($exec);
	local ($result);
        local (*textace);
        local ($command);
	local ($cosmid);
	$exec=&tace;
	$command=<<EOF;
	find Genome_Sequence
        where DNA
	where ! remark="unfinishe*"    
	follow overlap_right    
	where DNA 
	where ! remark="unfinishe*"
        follow overlap_left
        show -a overlap_right
	quit
EOF
	open(textace, "echo '$command' | $exec  |");
	while (<textace>) {if (/^Sequence\s+:\s+\"(\S+)\"/) {$cosmid=$1;}
			   if (/^Overlap_right\s+"(\S+)"\s+(\d+)$/)  {
			                       $rightname->{$cosmid}=$1;
					       $startright->{$cosmid}=$2;
					 	    }		   
			   if (/^Overlap_right\s+\S+$/) {$result=$result."Cosmid $cosmid needs overlap_right info\n";}
		      }
	if ($result ne "") {print STDERR "$result";exit}
    }



########################################################################
#returns lengths of all cosmids 
#######################################################################


sub coslength {
       
        $ENV{'ACEDB'}="/nfs/disk100/wormpub/acedb/ace4/cam";
        local ($exec);
        local (*textace);
        local ($command);
	local ($cosmid);
	local ($length);
	$length=$_[0];
	$exec=&tace;
	$command=<<EOF;
	find Genome_Sequence
        show DNA
	quit
EOF
    	open(textace, "echo '$command' | $exec  | ");
	while (<textace>) {tr/a-z/A-Z/;if (/\s+(\S+)\s+(\S+)/) {$length->{$1}=$2;}}
		       
}


########################################################################
#Return an array of cosmids in links 
#######################################################################


sub linkedcosmids {
 
     $ENV{'ACEDB'}="/nfs/disk100/wormpub/acedb/ace4/cam";
     local ($exec);
     local (*textace);
     local ($command);
     local (@lcosmid);
     $exec=&tace;
     undef @lcosmid;
     $command=<<EOF;
     find Genome_Sequence 
     where Source
     list -f -
     quit
EOF
    open(textace, "echo '$command' | $exec  | ");
     while (<textace>) {if (/^Sequence\s+:\s+\"(\S+)\"/) {push (@lcosmid,$1);}}
     return @lcosmid;
			
 }


















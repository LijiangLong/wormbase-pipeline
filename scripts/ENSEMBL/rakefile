# this Rakefile is to run the compara pipeline
# including dumping and packaging a tarball of the databases
# it requires rake to run

# major advantage is the shared configuration file across quite
# a few PERL scripts and the management through rake
# 


require 'yaml'
require 'fileutils'

tmp_place = '/lustre/scratch101/ensembl/wormpipe/compara_build'
perl='/software/bin/perl'
basedir='/software/worm/ensembl'

# check to see if the old build was cleaned
# will raise an error if not
desc 'check if the directories are cleaned up'
task :check_clean do
	files=Dir.glob('/lustre/scratch101/ensembl/wormpipe/compara/Caenorhabditis* /lustre/scratch101/ensembl/wormpipe/compara/Brugia*  /lustre/scratch101/ensembl/wormpipe/compara/Pristionchus*')
	raise("the last run was not cleaned up! delete:\n#{files.join("\n")}") unless files.size == 0
end

# that is the basic environment setup task
# on which most other tasks depend on
desc 'setup environment variables'
task :env_setup do
        old_perl5=ENV['PERL5LIB']
        additional='/software/worm/ensembl-63/ensembl-config/celegans/generic-elegans:/software/worm/ensembl-63/ensembl-pipeline/modules:/software/worm/ensembl-63/ensembl-analysis/modules:/software/worm/ensembl-63/bioperl-live:/software/worm/ensembl/bioperl-run:/software/worm/ensembl-63/ensembl/modules:/software/worm/ensembl-63/ensembl-hive/modules:/software/worm/ensembl-63/ensembl-compara/modules:/software/worm/lib:.:/software/worm/lib/perl5:'

        ENV['ENSEMBL_CVS_ROOT_DIR'] = '/software/worm/ensembl/'
        ENV['PERL5LIB']             = additional+old_perl5
end

# updates the C.elegans assembly version to the current build
desc 'update the configuration file'
task :update_conf do
  yml_file='etc/ensembl_lite.conf'
	yml=YAML::load_file(yml_file)
	yml['elegans']['version']="WS#{Dir.glob("/nfs/wormpub/DATABASES/WS*").sort[-2].scan(/\d+/)[-1].to_i+1}"
	File.open(yml_file,'w') do |out|
		YAML.dump(yml,out)
	end
end

##############################
# setup of the core databases
#

# small shorthand
def build_db(db_name)
	sh "/software/bin/perl scripts/worm_lite.pl -species #{db_name} -setup -load_dna -load_gene"
end


##############################################
# setup of the compara databases
# - note the hardcoded paths to the sql-files
#

desc 'build genetree database'
task :build_homology  do
  yml=YAML::load_file('etc/ensembl_lite.conf')
  db=yml['elegans']['database']

  # set up the pipeline and output database
  # +++ need to update the pt_species_tree.txt to add all required species
  # the -mlss_id value is the number of species we are comparing
##  sh "#{perl} /software/worm/ensembl/ensembl-hive/scripts/init_pipeline.pl Bio::EnsEMBL::Compara::PipeConfig::WormProteinTrees_conf -password #{db['password']} -mlss_id 11 -species_tree_input_file /software/worm/ensembl/compara-conf/pt_species_tree.txt"
#  sh "#{perl} /software/worm/ensembl/ensembl-hive/scripts/init_pipeline.pl Bio::EnsEMBL::Compara::PipeConfig::WormProteinTrees_conf -password #{db['password']} -mlss_id 12 -species_tree_input_file /software/worm/ensembl/compara-conf/njtree.12.worm_compara_test_orthotree.nh"
  sh "#{perl} /software/worm/ensembl/ensembl-hive/scripts/init_pipeline.pl Bio::EnsEMBL::Compara::PipeConfig::WormProteinTrees_conf -password #{db['password']} -mlss_id 333 -species_tree_input_file /software/worm/ensembl/compara-conf/njtree.12.worm_compara_test_orthotree.nh"



end

desc 'build PECAN database'
task :build_pecan => [:env_setup] do
  conf='etc/pecan-12.conf'
  yml=YAML::load_file('etc/ensembl_lite.conf')
  db=yml['elegans']['database']

	sh "mysql -h #{db['host']} -P#{db['port']} -u #{db['user']} -p#{db['password']} -e 'DROP DATABASE IF EXISTS worm_compara_pecan;CREATE DATABASE worm_compara_pecan;'"
	sh "cat #{basedir}/ensembl-hive/sql/tables.sql #{basedir}/ensembl-compara/sql/table.sql #{basedir}/ensembl-compara/sql/pipeline-tables.sql |mysql -h #{db['host']} -u #{db['user']} -p#{db['password']} worm_compara_pecan"
	
	sh "bzcat #{basedir}/compara-conf/ncbi_taxon.sql.bz2 |mysql -h #{db['host']} -u #{db['user']} -p#{db['password']} worm_compara_pecan"
	
	sh "#{perl} #{basedir}/ensembl-compara/scripts/pipeline/comparaLoadGenomes.pl -conf #{conf}"
	sh "#{perl} #{basedir}/ensembl-compara/scripts/pipeline/loadMultipleAlignerSystem.pl -conf #{conf}"
	
end

##########################
# run the beehive
#

# hive shorthand
def run_beehive(db_name,perl,basedir)
	yml=YAML::load_file('etc/ensembl_lite.conf')
        db=yml['elegans']['database'] # lets default to elegans for dbconnection details
	FileUtils.cd("/tmp") # now go to a directory where mcoffee can write its temporary files
	sh "#{perl} #{basedir}/ensembl-hive/scripts/beekeeper.pl -url mysql://wormadmin:#{db['password']}@farmdb1:3306/#{db_name} -sync"
	sh "#{perl} #{basedir}/ensembl-hive/scripts/beekeeper.pl -url mysql://wormadmin:#{db['password']}@farmdb1:3306/#{db_name} -loop"

end


desc 'run homology beehive'
task :run_homology => [:env_setup] do
	run_beehive("worm_compara_homology_63WS#{ENV['WORMBASE_RELEASE']}",perl,basedir)
end

desc 'run pecan beehive'
task :run_pecan => [:env_setup] do
	#run_beehive('worm_compara_pecan',perl,basedir)
end


#####################################
# dump data and copy it around
#

desc 'dump homology ace file'
task :dump_homology => [:env_setup] do
	puts "making #{tmp_place}/compara"
	FileUtils.mkdir_p("#{tmp_place}/compara")
	sh "/software/bin/perl scripts/get_all_elegans_orthologues.pl -database worm_compara_homology_63WS#{ENV['WORMBASE_RELEASE']} > #{tmp_place}/compara.ace"
end

desc 'dump conservation wiggle files'
task :dump_gerp =>[:env_setup] do

       yml=YAML::load_file('etc/ensembl_lite.conf')
       db=yml['elegans']['database'] # that one is technically not cool

       sh "mysql -h #{db['host']} -P#{db['port']} -u #{db['user']} -p#{db['password']} worm_compara_pecan -e 'INSERT IGNORE INTO meta (meta_key,meta_value) VALUES (\"max_align_2\",(SELECT MAX(dnafrag_end-dnafrag_start) FROM genomic_align));'"
	['elegans','briggsae','brenneri','remanei','japonica','pristionchus','brugia','mhapla','mincognita','hcontortus','cangaria','tspiralis'].each{|species|

	  spec_dir= "#{tmp_place}/compara/#{species}"
	  FileUtils.mkdir_p(spec_dir)
          sh "#{perl} scripts/getConservationScores.pl -species #{species} -o #{spec_dir}/#{species}.wig"
          
	  # split it
          sh "#{perl} scripts/split_wig.pl #{spec_dir}/#{species}.wig"
	  File.unlink("#{spec_dir}/#{species}.wig")

	  # wiblification
          FileList["#{spec_dir}/#{species}.wig*"].each{|f|
		  # wiblify it
		  system("#{perl} ../wiggle2gff3.pl --trackname gerp --method syntheny --source gerp --path=#{spec_dir} #{f} >> #{spec_dir}/#{species}_gerp.gff3")
		  File.unlink(f)

		  # path munglification
	  }

	  # archive it
	  currentDir=FileUtils.pwd
	  FileUtils.cd("#{tmp_place}/compara")
	  sh "tar cvSf #{species}_gerp.tar #{species}"
	  FileUtils.remove_dir(spec_dir,true)
          sh "gzip -9  #{species}_gerp.tar"
	  FileUtils.cd(currentDir)
	}
end

### this may still need attention - it has not been tested under ensembl release 63
desc 'dump pecan files'
task :dump_pecan => [:env_setup] do
	FileUtils.mkdir_p("#{tmp_place}/compara")
 
 	ENV['ENSEMBL_REGISTRY'] = './etc/E_registry.pl'

	sh "#{perl} scripts/getsynteny.pl > #{tmp_place}/compara/pecan.gff"   # dump gff

#	['I','II','III','IV','V','X'].each {|c|
	   sh "#{perl} scripts/dump_all_clustal.pl > #{tmp_place}/compara/pecan.clw" # dump clustal
#	}
end

desc "make a compara tarball"
task :dump_compara do
	conf=YAML.load_file('etc/ensembl_lite.conf')

	#mysqldir=''
	#dump_options='--add-drop-table -u wormro -a -h farmdb1'

	# to_dump =[ 'briggsae','elegans','remanei','brenneri','brugia']

	########### if needed, commment out the mysql dumping part #####
	#FileUtils.mkdir_p("#{tmp_place}/compara")
	#FileUtils.cd("#{tmp_place}/compara") do
	#	conf.each_key{|org|
	#		next unless to_dump.include?(org)
	#		db=conf[org]['database']
	#		file="#{db['dbname']}.sql"
	#		sh "#{mysqldir}mysqldump #{dump_options} -B #{db['dbname']} > #{file}"
	#	}
	#	sh "#{mysqldir}mysqldump #{dump_options} -B worm_compara > worm_compara.sql"
	#	sh "#{mysqldir}mysqldump #{dump_options} -B worm_compara_lagan > worm_compara_lagan.sql"
	#end
	# # # # # # # # # # # # # # # #
	
	FileUtils.cd(tmp_place) do
		File.unlink("compara.tar.gz") if File.exists?("compara.tar.gz")
		sh "tar cvf compara.tar compara/*"
		sh "gzip -9 compara.tar"
		FileList['compara/*'].each{|f|File.unlink(f)}
	end
end

desc 'copy release files'
task :copy_release do
	target_dir='/nfs/wormpub/BUILD/autoace/'
	cp "#{tmp_place}/compara.ace","#{target_dir}acefiles/"
	cp "#{tmp_place}/compara.tar.gz",target_dir
end



#################
# final cleanup
#

desc 'cleanup the compara work directories'
task :cleanup do
	sh 'rm -rf /lustre/scratch101/ensembl/wormpipe/compara/logs/*'      # remove the logs
	sh 'rm -f /lustre/scratch101/ensembl/wormpipe/compara/Caenorhabditis*' # remove the blast databases
	sh 'rm -f /lustre/scratch101/ensembl/wormpipe/compara/Brugia*' # remove the blast databases
	sh 'rm -f /lustre/scratch101/ensembl/wormpipe/compara/Pristionchus*' # remove the blast databases
	sh "rm -f #{tmp_place}/compara.ace" # remove the compara ace file
	sh "rm -rf #{tmp_place}/compara"    # remove the compara dump directory
end

desc 'build and setup all databases'
task :build => [:check_clean,:env_setup,:build_homology,:run_homology,:build_pecan,:run_pecan,:cleanup]

desc 'dump all databases into the various flatfiles'
#task :dump => [:dump_homology,:dump_pecan,:dump_gerp,:dump_compara,:copy_release,:cleanup]
task :dump => [:dump_homology,:dump_compara,:copy_release,:cleanup]

task :default => [:build,:dump]

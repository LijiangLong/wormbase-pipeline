#!/usr/local/bin/perl
 
# ms2 990930

################################
# creates a new wormpep release
################################
use strict;
use Ace;
use Socket;
    
$| = 1;

unless (defined($ARGV[0])) {
    die "usage make_wormpep.pl version_number\n";
}

my $version = $ARGV[0]; 
my $old_version = $version-1;

my @t = localtime(time) ; while ($t[5] >= 100) { $t[5] -= 100 ; }
my $date = sprintf "%02d%02d%02d", $t[5], $t[4]+1, $t[3] ;

########################################################################
# files in wormpep directory
#   wp.fasta              all sequences ever assigned (wpid and sequence)
#   wormpep.table         dotname (primary), wpid, locus, brief_id, lab origin
#   wormpep               current proteins with info from wormpep.table
#   wormpep.accession     wpid, if active all associated dotnames, if duplicate link to active wpid
#   wormpep.history       dotname, wpid, start (version Nr.), stop (version Nr.) if inactive
########################################################################
# set variables

my $autodir = glob "/wormsrv2/autoace";
my $wpdir = glob "/wormsrv2/WORMPEP/wormpep$old_version";
my $new_wpdir = glob "/wormsrv2/WORMPEP/wormpep$version";

mkdir ("$new_wpdir" , 0755) || die "cannot create the $new_wpdir directory\n";
open (LOG , ">$new_wpdir/wp.log$version") || die "cannot create $new_wpdir/wp.log$version\n" ;
print LOG "making wormpep$version for $date\n\n\n\n";

########################################################################
# read in the wp.fasta file, which contains all the protein sequences ever assigned,
# creating %seq2num, @num2seq and @num2dot (template for wp.table)

my (%seq2num , @num2seq , @num2dot);
undef (my $id) ; my $wpmax = 0 ; my $seq = ""; my $duplicates = 0;

open (WP , "$wpdir/wp.fasta$old_version") || die "couldn't open $wpdir/wp.fasta$old_version\n";
while (<WP>) {
    chomp;
    if (/^>(\S+)/) {
        my $new_id = $1;
	if ($id) {
            $id =~ /CE0*([1-9]\d*)/ ; my $num = $1 ;
	    if ($num > $wpmax) {
               $wpmax = $num;
	    }
            $num2seq[$num] = $seq;
            unless (exists ($seq2num{$seq})) { 
                $seq2num{$seq} = $num;
                $num2dot[$num] = $id;
            } else {
                ++$duplicates;
                my $old_id = $seq2num{$seq};
                my $old_id_pad = sprintf "%05d" , $old_id;
                $num2dot[$num] = "$id -> CE$old_id_pad";
              }
	}
	$id = $new_id ; $seq = "" ;
     } elsif (eof) {
        if ($id) {
            $id =~ /CE0*([1-9]\d*)/ ; my $num = $1 ;
	    if ($num > $wpmax) {
               $wpmax = $num;
	    }
            $seq .= $_ ;
            $num2seq[$num] = $seq;
            unless (exists ($seq2num{$seq})) { 
                $seq2num{$seq} = $num;
                $num2dot[$num] = $id;
            } else {
                ++$duplicates;
                my $old_id = $seq2num{$seq};
                my $old_id_pad = sprintf "%05d" , $old_id;
                $num2dot[$num] = "$id -> CE$old_id_pad";
              }
        }
     } else {
         $seq .= $_ ;
       }
}

my $old_wpmax = $wpmax;

print LOG "the wp.fasta file contains $duplicates duplicate sequences\n\n";
print LOG "wpmax of wp.fasta$old_version equals $old_wpmax\n\n\n";
close WP;

###########################################################################
# connect to autoace, and retrieve the desired sequence objects (CDS)

my $db = Ace->connect (-path => $autodir) || die "cannot connect to autoace\n";
my @dotnames_1 = $db->fetch (-query => 'FIND Genome_sequence ; FOLLOW Subsequence ; CDS');
my @dotnames_2 = $db->fetch (-query => 'FIND Sequence *LINK* ; FOLLOW Subsequence ; CDS');

push (@dotnames_1 , @dotnames_2);
@dotnames_1 = sort @dotnames_1;

###########################################################################
# get the dna and peptide sequence, write a dna.fasta file,
# and map the peptide sequences onto wormpep, deleting Peptides containing an X or a *,
# and giving a new wpid if necessary, creating %dot2num

open (DNA , ">$new_wpdir/wormpep.dna$version") || die "cannot create $new_wpdir/wormpep.dna$version\n";
my (%dot2num , @dotnames , @c_dotnames);
foreach my $dot (@dotnames_1) {
    if ($dot =~ /temp/) {
       print LOG "$dot is only a temporary sequence\n";
       next;
    }
    unless (($dot =~ /^[A-Z0-9]+\.[1-9]\d?[A-Za-z]?$/) || ($dot =~ /^[A-Z0-9]+\.[A-Za-z]{1,2}$/)) {
        print LOG "the sequence $dot has an incorrect dotname\n";
    }
    undef (my $dna);
    undef (my $method);

#    $method = $dot -> at ('Method.[1]');
#    if ($method !~ /curated/) {
#	print LOG "the sequence $dot has NON-CURATED method $method\n";
#	next;
#    }

    $dna = $dot -> asDNA();
    if ((!defined ($dna)) || ($dna eq "")) {
        print LOG "cannot extract dna sequence for $dot\n";
    }
    $dna =~ /^>(\S+)\s+(\w.*)/s ; my $dseq = $2 ; $dseq =~ tr/a-z/A-Z/ ; $dseq =~ s/\s//g;
    if ($dseq =~ /[^ACGT]/) {
	if ($dseq =~ /\-/) {                                  # - seems to indicate that e.g the subsequence
	    print LOG "the dna sequence $dot contains a -\n"; # coordinates differ from the last exon coordinate
	} elsif ($dseq =~ /N/) {
            print LOG "the dna sequence $dot contains a N\n";
	  } else {                         
	      print LOG "the dna sequence $dot contains a non ACGT character different from - and N\n";  
	    }
    }
    print DNA "$dna";
    undef (my $pep);
    $pep = $dot -> asPeptide();
    if ((!defined ($pep)) || ($pep eq "")) {
       print LOG "cannot extract peptide sequence for $dot\n";
       next;
    }
    $pep =~ /^>(\S+)\s+([\w\*].*)/s ; my $pseq = $2 ; $pseq =~ tr/a-z/A-Z/ ; $pseq =~ s/\s//g;
    if (($pseq =~ /X/) && ($dot ne "M106\.2") && ($dot ne "B0303\.7") && ($dot ne "B0303\.8") && ($dot ne "M04F3\.2")) {
       print LOG "the peptide sequence $dot contains an X\n";             
       next;                                                   # perhaps I should check if $pname=$1
    }                                                          # equals $dot in all cases
    if ($pseq =~ /\*/) {
       print LOG "the peptide sequence $dot contains a *\n";              
       next;
    }
    unless ($pseq =~ /^M/) {
       print LOG "the peptide sequence $dot does not start with a M\n";
    } 
    my $c_dot = $dot;
    $c_dot =~ tr/a-z/A-Z/;
    unless (exists ($seq2num{$pseq})) {
        $num2seq[++$wpmax] = $pseq;
        $seq2num{$pseq} = $wpmax;
        $dot2num{$c_dot} = $wpmax;
        my $pad = sprintf "%05d" , $wpmax;
        $num2dot[$wpmax] = "CE$pad\t$c_dot";
    } else {
        $dot2num{$c_dot} = $seq2num{$pseq};
        my $num = $seq2num{$pseq};
        $num2dot[$num] .= "\t$c_dot";
      }             
    push (@dotnames , $dot);
    push (@c_dotnames , $c_dot);
}   

close DNA;
chmod (0444 , "$new_wpdir/wormpep.dna$version") || print LOG "cannot chmod $new_wpdir/dotnames.dna$version\n";

############################################################################
# write the new wp.fasta file, and wrap the sequences using rd's seqpress

open (WPFASTA , ">$new_wpdir/wp.fasta_unwrap$version");
for (my $i = 1 ; $i <= $wpmax ; $i++) {
    if (defined ($num2seq[$i])) {
       my $i_pad = sprintf "%05d" , $i;
       print WPFASTA ">CE$i_pad\n$num2seq[$i]\n";
    }
}
close WPFASTA;
system ("/nfs/disk100/wormpub/bin.ALPHA/seqpress -a $new_wpdir/wp.fasta_unwrap$version > $new_wpdir/wp.fasta$version");
chmod (0444 , "$new_wpdir/wp.fasta$version") || print LOG "cannot chmod $new_wpdir/wp.fasta$version\n";


###########################################################################
# retrieve the protein_id and the SWISS-PROT or SPTREMBL accession using srs
# socketsrs: query srs with socket to retrieve large data sets.
# The actual SRS query is
# [libs={embl emblnew}-Organism: Caenorhabditis elegans]
# & ([libs-FtQualifier: gene] > parent) & [libs-AllText: cosmid]
# ag3 271099, modified ms2 991029

my $querycontent="%5Blibs%3D%7Bembl_SP_emblnew%7D-Organism%3A%22Caenorhabditis%20elegans%22%5D%26%28%5Blibs-FtQualifier%3Agene%5D%3Eparent%29%26%5Blibs-AllText%3Acosmid%5D+-f+div+-f+key+-f+org+-f+prd+-f+ftd+-f+ftl+-f+date";
my $request = "/srs5bin/cgi-bin/wgetz?$querycontent";

# The EBI server is well hidden under something weird |-(
# Let's use HGMP for the moment

my $server = "srs.hgmp.mrc.ac.uk";
if (!defined(open_TCP(*F,$server,80))) {
	print "Error connecting to server at \n";
	exit(-1);
	}
print F "GET $request HTTP/1.0\n\n";
print F "Accept: */*\n";
print F "User-Agent: socketsrs/1.0\n\n";
my $GENE ; my $GENE_1 ; my $SPT ; my $SWISS;
my %SPTREMBL ; my %SWISS_PROT ; my %PROTEIN;

# Parsing annotation

while (my $return_line=<F>) {
  if ($return_line =~ /ID\s+(\w+)/) {
     undef $GENE;
     undef $GENE_1;
     undef $SPT;
     undef $SWISS;
  }
  if ($return_line =~ /\>CDS\</) {
     undef $GENE;
     undef $GENE_1;
     undef $SPT;
     undef $SWISS; 
  }
  if ($return_line =~ /db_xref=\"SPTREMBL\:\<A HREF.*\>(\w+)\</) {
      $SPT = $1;
  }      
  if ($return_line =~ /db_xref=\"SWISS-PROT\:\<A HREF.*\>(\w+)\</) {
      $SWISS = $1;
  }
  if ($return_line =~ /note=\"(\w+\.\w+)\;/) {
    $GENE_1=$1;
  }
  if ($return_line =~ /gene=/) {
    $GENE=$';
    chomp $GENE;
    $GENE=~s/\"//g;
    $GENE=~s/\s+//g; 
    if ($GENE =~ /^[A-Z0-9]+\.t[1-9]/) {   # get rid of tRNA's!!
        next;
    }
    if ($GENE =~ /\-/) {   # in some cases the gene tag contains the locus name, gene is in note tag!!
        $GENE = $GENE_1; 
    }
    $SPTREMBL{$GENE} = $SPT;
    $SWISS_PROT{$GENE} = $SWISS;
  }
  if ($return_line =~ /protein_id=/) {
     my $PROTEIN=$';
     chomp $PROTEIN;
     $PROTEIN=~s/\"//g;
     $PROTEIN=~s/\s+//g;
     $PROTEIN{$GENE}=$PROTEIN;
  }
}
close F;


#Output: successful network connection in file handle
sub open_TCP 
{
	my ($FS,$dest,$port) = @_;
	my $proto = getprotobyname ('tcp');
	socket ($FS,PF_INET,SOCK_STREAM,$proto);
	my $sin = sockaddr_in($port,inet_aton($dest));
	connect($FS,$sin) || return undef;
	my $old_fh = select($FS);
        $| = 1;
	select($old_fh);

}

###########################################################################
# get from autoace the data required to write the wormpep file and the wormpep.table file
# use rd's seqpress to wrap the sequence lines in the wormpep file 


open (USERFASTA , ">$new_wpdir/wormpep_unwrap$version") || die "cannot create wormpep_unwrap$version\n";
open (USERTABLE , ">$new_wpdir/wormpep.table$version") || die "cannot create wormpep.table$version\n";
foreach (@dotnames) {
    undef (my $locus_1);
    undef (my $locus);
    undef (my $brief_id);
    undef (my $cosmid);
    undef (my $lab);
    my $c_dot = $_;
    $c_dot =~ tr/a-z/A-Z/;
    my $wpid = $dot2num{$c_dot};
    my $wpid_pad = sprintf "%05d" , $wpid;
    my $pepseq = $num2seq[$wpid];
    $locus = $_->at ('Visible.Locus[1]');
    if (defined ($locus)) {
       $locus_1 = "locus\:".$locus;                         
    }
    $brief_id = $_->at ('Visible.Brief_identification[1]'); 
    $cosmid = $_-> at('Structure.From.Source[1]') -> fetch;
    $lab = $cosmid-> at('Origin.From_Laboratory[1]');
    if ($lab eq "CB") {$lab = "CAMBRIDGE";}
    if ($lab eq "RW") {$lab = "ST.LOUIS";}
    if ($lab eq "HX") {$lab = "HINXTON";}
    if ((defined ($PROTEIN{$_})) && ($PROTEIN{$_} ne "")) {
       if ((defined ($SWISS_PROT{$_})) && ($SWISS_PROT{$_} ne "")) {
          print USERFASTA ">$c_dot CE$wpid_pad  $locus_1 $brief_id ($lab) SW\:$SWISS_PROT{$_} protein_id\:$PROTEIN{$_}\n$pepseq\n";
          print USERTABLE "$c_dot\tCE$wpid_pad\t$locus\t$brief_id\t$lab\tSW\:$SWISS_PROT{$_}\t$PROTEIN{$_}\n";
       } else {
           if ((defined ($SPTREMBL{$_})) && ($SPTREMBL{$_} ne "")) {
              print USERFASTA ">$c_dot CE$wpid_pad  $locus_1 $brief_id ($lab) TR\:$SPTREMBL{$_} protein_id\:$PROTEIN{$_}\n$pepseq\n";
              print USERTABLE "$c_dot\tCE$wpid_pad\t$locus\t$brief_id\t$lab\tTR\:$SPTREMBL{$_}\t$PROTEIN{$_}\n";
           } else {
                print USERFASTA ">$c_dot CE$wpid_pad  $locus_1 $brief_id ($lab) protein_id\:$PROTEIN{$_}\n$pepseq\n";
                print USERTABLE "$c_dot\tCE$wpid_pad\t$locus\t$brief_id\t$lab\t\t$PROTEIN{$_}\n";
	     }
         }
    } else {
       if ((defined ($SWISS_PROT{$_})) && ($SWISS_PROT{$_} ne "")) {
          print USERFASTA ">$c_dot CE$wpid_pad  $locus_1 $brief_id ($lab) SW\:$SWISS_PROT{$_}\n$pepseq\n";
          print USERTABLE "$c_dot\tCE$wpid_pad\t$locus\t$brief_id\t$lab\tSW\:$SWISS_PROT{$_}\n";
       } else {
           if ((defined ($SPTREMBL{$_})) && ($SPTREMBL{$_} ne "")) {
              print USERFASTA ">$c_dot CE$wpid_pad  $locus_1 $brief_id ($lab) TR\:$SPTREMBL{$_}\n$pepseq\n";
              print USERTABLE "$c_dot\tCE$wpid_pad\t$locus\t$brief_id\t$lab\tTR\:$SPTREMBL{$_}\n";
           } else {
                print USERFASTA ">$c_dot CE$wpid_pad  $locus_1 $brief_id ($lab)\n$pepseq\n";
                print USERTABLE "$c_dot\tCE$wpid_pad\t$locus\t$brief_id\t$lab\n";
	     }
         }          
       }
}  

close USERFASTA;
close USERTABLE;
system ("/nfs/disk100/wormpub/bin.ALPHA/seqpress -a $new_wpdir/wormpep_unwrap$version > $new_wpdir/wormpep$version");
chmod (0444 , "$new_wpdir/wormpep$version") || print LOG "cannot chmod $new_wpdir/wormpep$version\n";
chmod (0444 , "$new_wpdir/wormpep.table$version") || print LOG "cannot chmod $new_wpdir/wormpep.table$version\n";


###########################################################################
# create a blast'able database (indexing) using setdb for Wublast (not formatdb, which is  for blastall)

system ("cp $new_wpdir/wormpep$version $new_wpdir/wormpep_current");
system ("/usr/local/pubseq/bin/setdb $new_wpdir/wormpep_current > $new_wpdir/wormpep_current.log");

###########################################################################
# count the CDS (with and without alternate splice forms) based on the wormpep file

my @end_dotnames;
open (FILE , "$new_wpdir/wormpep$version") || print LOG  "cannot open the wormpep$version file\n";
while (<FILE>) {
    if (/^\>(\S+)\s+\S+/) {
       my $dot = $1;
       push (@end_dotnames , $dot);
    }
}
close FILE;
my $number_cds = 0;
my $number_total = 0;
my $number_alternate = 0;
my %new_name2x;
foreach (@end_dotnames) {
    $number_total++;
    tr/a-z/A-Z/;
    /^([A-Z0-9]+)\.(.*)$/;
    my $cosmid = $1;
    my $dot = $2;
    if ($dot =~ /^[1-9][0-9]?$/) {
        $number_cds++;
    } elsif ($dot =~ /^[A-Z][A-Z]?$/) {
         $number_cds++;
    } elsif ($dot =~ /(^[1-9][0-9]?)([A-Z])/) {
        my $number = $1;
	my $letter = $2;
        my $new_name = $cosmid."_".$number;
        unless (exists ($new_name2x{$new_name})) {
	    $number_cds++;
        } else {
	    $number_alternate++;
          }
        $new_name2x{$new_name} = "x";
    } else {
        print LOG "$_ has a non\-acceptable name in wormpep$version \(has not been counted\)\n";
        next;
    }
}
print LOG "\n\nthere are $number_cds CDS in autoace, $number_total when counting \($number_alternate\) alternate splice_forms\n";

###########################################################################
# create the new wormpep.accession,
# wp.table contains tab-separated:  wpid, list of associated dotnames if active, 
# empty if inactive, and link to active wpid in case of duplicate sequences in wp.fasta

open (WPTABLE , ">$new_wpdir/wormpep.accession$version") || die "cannot create wormpep.accession$version\n";

for (my $i = 1 ; $i <= $wpmax ; $i++) {
    if (defined ($num2dot[$i])) {
           print WPTABLE "$num2dot[$i]\n";
    }
}

close WPTABLE;

chmod (0444 , "$new_wpdir/wormpep.accession$version") || print LOG "cannot chmod $new_wpdir/wormpep.accession$version\n";

############################################################################
# read in the current wormpep.history file, update it, and read it back out,
# wormpep.history contains tab-separated:  dotname, wpid, start (version), end (version)

open (OLDHISTORY , "$wpdir/wormpep.history$old_version") || die "cannot open $wpdir/wormpep.history$old_version\n";
open (HISTORY , ">$new_wpdir/wormpep.history$version") || die " cannot create $wpdir/wormpep.history$version\n";
open (DIFF , ">$new_wpdir/wormpep.diff$version") || die " cannot create $wpdir/wormpep.diff$version\n";

my %line;
while (my $line = <OLDHISTORY>) {
    chomp $line;
    my $dotname = ""; my $wpid = ""; my $start = ""; my $end = "";
    ($dotname , $wpid , $start , $end) = split (/\t/ , $line);
    my $c_dot = $dotname;
    $c_dot =~ tr/a-z/A-Z/;
    $wpid =~ /CE0*([1-9]\d*)/ ; my $num = $1;
    $line{$c_dot} = $line;
    if ((!exists ($dot2num{$c_dot}) && ($end eq ""))) {
       print HISTORY "$c_dot\t$wpid\t$start\t$version\n";
       print DIFF "lost:\t$c_dot\t$wpid\n";
   } elsif (($dot2num{$c_dot} ne $num) && ($end eq "")) {
        print HISTORY "$c_dot\t$wpid\t$start\t$version\n";
        my $new_num = $dot2num{$c_dot};
        my $new_pad = sprintf "%05d" , $new_num;
        print HISTORY "$c_dot\tCE$new_pad\t$version\t$end\n";
        print DIFF "changed:\t$c_dot\t$wpid --> CE$new_pad\n";
     } else {
         print HISTORY "$c_dot\t$wpid\t$start\t$end\n";
       }
}

foreach (keys (%dot2num)) {
    my $empty = "";
    my $c_dot = $_;
    $c_dot =~ tr/a-z/A-Z/;
    if (!exists ($line{$c_dot})) {
        my $num = $dot2num{$c_dot};
        my $pad = sprintf "%05d" , $num;
        print HISTORY "$c_dot\tCE$pad\t$version\t$empty\n";
        print DIFF "new:\t$c_dot\tCE$pad\n";
        next;
    }
    my $dotname = ""; my $wpid = ""; my $start = ""; my $end = "";
    ($dotname , $wpid , $start , $end) = split (/\t/ , $line{$c_dot});
    if ($end ne "") {   
        my $new_num = $dot2num{$c_dot};
        my $new_pad = sprintf "%05d" , $new_num;
        print HISTORY "$c_dot\tCE$new_pad\t$version\t$empty\n";
        print DIFF "reappeared:\t$c_dot\tCE$new_pad\n";
    }
}


close OLDHISTORY;
close HISTORY;
close DIFF;
chmod (0444 , "$new_wpdir/wormpep.history$version") || print LOG "cannot chmod $new_wpdir/wormpep.history$version\n";
chmod (0444 , "$new_wpdir/wormpep.diff$version") || print LOG "cannot chmod $new_wpdir/wormpep.diff$version\n";
my $wpdiff = $wpmax - $old_wpmax;
print LOG "\n\nnew wpmax of wp.fasta$version equals $wpmax\n$wpdiff new sequences have been added\n";

close LOG;


open (MAIL , "|/usr/bin/mailx -s new_wormpep dl1\@sanger.ac.uk");
print MAIL "the new wormpep$version has been created (date: $date)\n\n\n";
open (ELOG , "$new_wpdir/wp.log$version");
while (<ELOG>) {
    print MAIL "$_\n";
}
close ELOG;
close MAIL;
chmod (0444 , "$new_wpdir/wp.log$version") || print LOG "cannot chmod $new_wpdir/wp.log$version\n";
unlink ("$new_wpdir/wp.fasta_unwrap$version") || print LOG "cannot delete $new_wpdir/wp.fasta_unwrap$version\n";
unlink ("$new_wpdir/wormpep_unwrap$version") || print LOG "cannot delete $new_wpdir/wormpep_unwrap$version\n";

###########################################################################

exit;





























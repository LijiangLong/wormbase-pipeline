#!/usr/local/bin/perl

# This script extract all the C.elegans ests available
# from local dbEST for a given organism and writes ace file, fasta
# file, list file according to request.

use Getopt::Std;
use IO::Handle;
use vars qw($SWITCH $ACCNO $CLONEID $DBESTID $DNA $LENGTH $DNASTRING $TEMP 
	    $CLONEID $ACE $CLONE $ACECLONE $CLONESEQ %SEQS %COUNT 
	    $line $opt_a $opt_f $opt_l $opt_o $opt_w $lab);
use strict 'vars';
use strict 'subs';

getopts('w:o:afl');

if ((!$opt_w)&&(!$opt_o)) {
  &PrintHelp;
}

if ((!$opt_a)&&(!$opt_f)&&(!$opt_l)) {
  &PrintHelp;
}

my $acefile = "$opt_o".".ace";
my $clonefile = "$opt_o".".clones".".ace";
my $fastafile = "$opt_o".".fasta";
my $listfile = "$opt_o".".list";
my $worm = $opt_w;

$SWITCH="OFF";

if ($opt_a){
  open (ACEFILE,">$acefile");
  ACEFILE->autoflush();
}
if ($opt_f){
  open (BLASTFILE,">$fastafile");
  BLASTFILE->autoflush();
}
if ($opt_l){
  open (LISTFILE,">$listfile");
  LISTFILE->autoflush();
}

# Retrieve sequences from the public database; build an ACE file with them
open (PUBLIC,"getz -f AccNumber -f ID -f ESTName -f CloneID -f Sequence -sf embl \'\[dbest-organism:\"$worm\"\]\' |");

while ($line=<PUBLIC>) {
  if ($line=~/(dbEST Id\:\s+)/) {
    $DBESTID=$';
  }
  if ($line=~/(GenBank Acc\:\s+)/) {
    $ACCNO=$';
  }
  if ($line =~ /(Clone Id\:)/) {
    $CLONEID=$';
    chomp $CLONEID;
    $CLONEID =~ s/\s+\(/./;
    $CLONEID =~ s/\'\)//;
    $CLONEID =~ s/^\s+//;
    if (($CLONEID =~ /^\.3/)||($CLONEID =~ /^\.5/)) {
      $CLONEID = $ACCNO;
    }
#-------------------------
# Add here all the specie-
# specific informations
#
    if ($worm=~/elegans/) {
# For CE- C.elegans clones, substitutes accession number to clone id
# because single sequences are not named in unequivocal manner.
      if ($CLONEID =~ /^(CE\w+)/) {
	$CLONE=$CLONEID;
	$CLONEID = $ACCNO;
	push (@{$SEQS{$CLONE}},$CLONEID);
	$COUNT{$CLONE}++;
	$lab="TIGR";                      # TIGR CE clones
      }
	if ($CLONEID=~/^cm/) {$lab="CM";} # Chris Martin
	if ($CLONEID=~/^AW/) {$lab="WU";} # Wash U
	if ($CLONEID=~/^DD/) {$lab="DU";} # Duke University
	if ($CLONEID=~/^yk/) {$lab="YK";} # Kohara ESTs  
    }
# Briggsae also does not have clone sequence names
    if ($worm=~/briggsae/) {
      $CLONEID = $ACCNO; 
      $lab="WU";  
    }
    if ($CLONEID =~ /(yk\w+)\./) {
      $CLONE = $1;
      push (@{$SEQS{$CLONE}},$CLONEID);
      $COUNT{$CLONE}++;
    }
  }
  if ($line=~/\/\//) {
    &PrintEntry;
    $SWITCH="OFF";
    next;
  }
  if ($SWITCH eq "ON") {
    $line=~s/\d+//mg;
    $line=~s/\s+//mg;
    $line.="\n";
    $DNA.=$line;
  }
  if ($line =~ /^SQ/) {
    $SWITCH="ON";
    next;
  }
}
close PUBLIC;
close ACEFILE;
close BLASTFILE;
close LISTFILE;

# Prints out the clonefile if the ace file was requested
if ($opt_a) {
  open (CLONEFILE,">$clonefile");
  CLONEFILE->autoflush();
  foreach $CLONE (sort keys %SEQS) {
    print CLONEFILE "\nClone: $CLONE\n";
    foreach $CLONESEQ (sort @{$SEQS{$CLONE}}) {
	chomp $CLONESEQ;	
        print CLONEFILE "Sequence    $CLONESEQ\n";
    }
  }
  close CLONEFILE;
}

#--------------------
# Prints entries in
# ace format
#

sub PrintEntry {
  $DNASTRING=$DNA;
  $LENGTH=length($DNASTRING);
  chomp $ACCNO;
  chomp $CLONEID;
  chomp $DBESTID;
  $ACECLONE="";
  if ($opt_a) {
    if ($COUNT{$CLONE} >= 1) {
      $ACECLONE="Visible Clone  $CLONE";
    } else {
      $ACECLONE="";
    }
  }
  $ACE=<<END;
  
Sequence :  $CLONEID
DNA         $CLONEID  $LENGTH
Database    dbEST     $DBESTID  $ACCNO
Origin      From_Laboratory   $lab
Origin      Species           "$worm"
cDNA_EST
$ACECLONE
		

END
  print ACEFILE $ACE;
  print ACEFILE "DNA    \"$CLONEID\" \n";
  print ACEFILE "$DNA\n"; 
  if ($opt_f) {
    print BLASTFILE ">$CLONEID $ACCNO $CLONE\n";
    print BLASTFILE "$DNA";
  }
  if ($opt_l) {
    print LISTFILE "$CLONEID $ACCNO $CLONE\n";
  }
  undef $DNA;
  undef $CLONE;
}


#---------------------
# Prints documentation
#
sub PrintHelp {
  exec ('perldoc',$0);
}

__END__

=pod

=head2   NAME - ESTDump_from_SRS

=head1 DESCRIPTION

ESTDump_from_SRS will retrieve all the EST sequences 
belonging to C.elegans from dbEST, and produce 
one or more output files :
* an ace file containing the EST sequences to be 
read in the acedb database; a clonefile containing
the relations clone<>sequence will also be produced.
* a FastA-format database containing the EST sequences,
* A list of all the EST names as they should be stored
in acedb (they correspond to clone names).


=head1 REQUIRED ARGUMENTS

=over 4

=item o filename, name for the output file (in the current directory)

=item w speciename, the worm specie name

=item a for ace output

=item f for producing fasta database 

=item l for producing list of clone names

=back

=head1 USAGE EXAMPLE



ESTDump_from_SRS -o EST -w elegans -a -f => Will produce EST.ace (ace
file) and EST.fasta (fasta seqs) with all the C.elegans ests

=cut


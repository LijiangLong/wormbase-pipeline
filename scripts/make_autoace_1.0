#!/usr/local/bin/perl
# make_autoace 
#  
# This makes the autoace database from
# its composite sources.
# The steps marked with * are mandatory, i.e.
# their failure will abort this job.
# The switch -C will create the database
# The switch -F will move the current database
# to the anonymous ftp repository

use IO::Handle;
use Getopt::Std;
use File::Find;
use File::Path;
use POSIX qw(:signal_h :errno_h :sys_wait_h);

$|=1;
$tace="/nfs/disk100/acedb/RELEASE.SUPPORTED/bin.ALPHA_4/tace";
$giface="/nfs/disk100/acedb/RELEASE.SUPPORTED/bin.ALPHA_4/giface";
$makeChromLinks="/nfs/disk100/wormpub/analysis/scripts/makeChromLinks.pl -a";
$maintainer = "wormpub\@sanger.ac.uk";
$autodir = glob("~wormpub/acedb/ace4/autoace") ;
$acedir = glob ("~wormpub/acedb/ace4");
$logfile = "$autodir"."/make_autoace.log";
$gzfile = "$logfile".".gz";

# Avoid filling process table with zombies
$SIG{CHLD} = \&REAPER;
sub REAPER {
  my $pid;
  $pid=waitpid(-1,&WNOHANG);
  $SIG{CHLD}=\&REAPER;
}

getopts("CF");

if ((!$opt_C)&&(!$opt_F)) {
    &PrintHelp;
} elsif ($opt_F) {
  # Transfer the whole database to ftp repository
  &transfer_to_FTP();
} elsif ($opt_C) {
  
  if (-e $gzfile) {
    unlink $gzfile;
  }
  system ("/usr/local/bin/gzip $logfile");
  open (LOGFILE,">$logfile");
  LOGFILE->autoflush;
  # Add a time stamp
  &GetTime();
  # Remove temp_gene sequences from stlace, camace *
  &rmtempgene();
  # Make new acefiles *
#  &mknewacefiles();
  # Remove confidential remarks from certain files *
#  &rmconfremark();
  # Get status information from allcmid (maintained by Maintain_ftp_site cron job) 
#  &getstatus();
  # Make the non-celegans ESTs  
#  &nonelegansests();
  # Re-initialize the database *
#  &reinitdb();
  # Remove the genewise objects [rd 990427] *
#  &rmgenewise();
  # Remove the halfwise objects [ag3 000209] *
#  &rmhalfwise();
  # Read in the physical map and make all maps  *
#  &contigC();
  # Read in acefiles in the fixfiles directory *
#  &fixfiles();
  # Make the maps *
#  &makemaps();
  # Make the chromosomal links * 
#  &makechromlink();
  # Add peptides to the database *
#  &addpeptides();
  # Set the date correctly in displays.wrm 
#  &setdate();
  # Make the db files for distribution *
#  &makedistr();
  # Dump DNA and gff files.
#  &gffdump();

# RD 990718 temporary exit
  exit 0;

# Make the chromosomal positions
# &makepositions();
# exit 0;

}

############ SUBROUTINES ###########

#--------------------------------------
# Transfer the autoace compressed files
# to FTP site directory
#
sub transfer_to_FTP {
  # If old log exists, gzip it
  if (-e $gzfile) {
    unlink $gzfile;
  }
  if (-e $logfile) {
  system ("/usr/local/bin/gzip $logfile");
  }
  open (LOGFILE,">$logfile");
  LOGFILE->autoflush;
  $srcdir="$autodir/release";
  $ftpdir="/nfs/disk69/ftp/pub2/acedb/celegans/";
  opendir(DIR,$srcdir);
  @Zfiles= grep {/tar\.Z$/} readdir(DIR);
  closedir(DIR);
  print LOGFILE "These files will be transferred: @Zfiles\n";
  foreach (@Zfiles) {
      $src_file="$srcdir"."/"."$_";
      $tgt_file="$ftpdir"."/"."$_";
      print LOGFILE "Copying file $src_file ..\n";
      print "Copying file $src_file ..\n";
      $rs = system ("\/usr/bin/cp $src_file $tgt_file");
      &chksignal($rs);
      $O_SIZE = (stat($src_file))[7];
      $N_SIZE = (stat($tgt_file))[7];
      if ($O_SIZE != $N_SIZE) {
	print LOGFILE "*Error - file $src_file not transferred regularly - please check\n";
	print "*Error - file $src_file not transferred regularly - please check\n";
	die (0);
      }
    }
  close LOGFILE;
}


#------------------------
# Get time coordinates
#
sub GetTime {
  my ($SECS,$MINS,$HOURS,$DAY,$MONTH,$YEAR)=(localtime)[0,1,2,3,4,5];
  if ($MINS=~/^\d{1,1}$/) {
    $MINS="0"."$MINS";
  }
  my $REALMONTH=$MONTH+1;
  my $REALYEAR=$YEAR+1900;
  my $TODAY = "$DAY $REALMONTH $REALYEAR at $HOURS:$MINS";
  print LOGFILE "*Make_autoace run $$ at $TODAY\n\n";
} # end GetTime


#---------------------------
# Remove temp_gene sequences 
# from stlace, camace
#
sub rmtempgene {
  my $command=<<EOF;
find Sequence temp_gene_*
kill
save
quit
EOF
  print LOGFILE "*Rmtempgene: removing temp_gene_* from stlace, camace\n";
  open (TACE,"| $tace $acedir/cam >> $logfile") || die ("could not open Camace");
  print TACE $command;
  close TACE;
#  $rs = system ("echo '$command' | $tace $acedir/cam >/dev/null");
  open (STL,"| $tace $acedir/stl >> $logfile") || die ("could not open Camace");
  print STL $command;
  close STL;
#  $rs = system ("echo '$command' | $tace $acedir/stl >/dev/null");
  print LOGFILE "** Signal2: $rs\n";
#  &chksignal($rs);
} # end rmtempgene


#---------------------------
# Erases old acefiles and
# make new ones
#
sub mknewacefiles {
  system ("\\rm  $autodir/acefiles/*");
  open(config,"$autodir/autoace.config");
  while(<config>) {
    if (/^#/ || /^$/) {
	next;
      }
    s/^\s+//;s/\s+$//;    
    if (/^(\S+)\s+(\S+)$/ || /^(\S+)\s+(\S+)\s+(\S+)$/) {$database=$1;$object=$2;$criteria=$3;}
    $database=~/\/(\w+)$/;$databasename=$1;
    $criteria=~/(\S+)\*/;$criterianoasterisk=$1;
    $filename="$autodir/acefiles/".$databasename."_".$object.$criterianoasterisk.".ace";
    push (@filenames,$filename);
    print LOGFILE "*Mknewacefiles: creating $filename criteria $criteria\n";
    my $command=<<EOF;
find $object $criteria
write $filename
quit
EOF
    $rs = system ("echo '$command' | $tace $database >/dev/null");
    &chksignal($rs);
  }
} # end mknewacefiles


#-------------------------------------------
# Get status information from allcmid
# (maintained by Maintain_ftp_site cron job)
#
sub getstatus {
  $ftpdir = glob ("~ftp/pub3/databases/C.elegans_sequences") ;
  open (ALLCMID, "$ftpdir/allcmid") or do {print LOGFILE "failed to open $ftpdir/allcmid\n"; return 1;};
  system ("\\rm $autodir/status/*");
  open (CAMUNFIN, ">$autodir/status/cam.shg") or do { print LOGFILE "failed to open $autodir/status/cam.shg\n"; close ALLCMID; return 1;}; 
  open (STLUNFIN, ">$autodir/status/stl.shg") or do { print LOGFILE "failed to open $autodir/status/stl.shg\n"; close ALLCMID; close CAMUNFIN; return 1;};
  open (FIN, ">$autodir/status/all.fin") or do { print LOGFILE "failed to open $autodir/status/all.fin\n"; close ALLCMID; close CAMUNFIN; close STLUNFIN;  return 1;};
  open(STATUS,">$autodir/acefiles/status.ace")  or do { print LOGFILE "failed to open $autodir/acefiles/status.ace\n"; close ALLCMID; close CAMUNFIN; close STLUNFIN; close FIN; return 1;};
  while (<ALLCMID>) {
    next unless (/^>(\w+)/) ;
    $id = $1 ;
    next if ($statusAlready{$id}++) ;
    if (/Cambridge-Unfinished/) { print CAMUNFIN "$id\n" ; print STATUS "\nClone $id\nShotgun\n\nSequence $id\nShotgun\n" ; }
    elsif (/STLOUIS UNFINISHED/) { print STLUNFIN "$id\n" ; print STATUS "\nClone $id\nShotgun\n\nSequence $id\nShotgun\n" ; }
    else { print FIN "$id\n" ; print STATUS "\nClone $id\nFinished\n\nSequence $id\nFinished\n" ; }
  }
  close ALLCMID ; close CAMUNFIN ; close STLUNFIN ; close FIN ; close STATUS ;
  push(@filenames,"$autodir/acefiles/status.ace");
  $time = localtime ;
  print LOGFILE "*Getstatus: status.ace made at $time\n" ;
}				# end getstatus


#---------------------
# Remove confidential 
# remarks from certain
# files
#
sub rmconfremark { 
  @remove_confid=("stl_Sequencestl.ace","cam_Sequencecam.ace");
  foreach $confid (@remove_confid) {
    open(temp,">$autodir/acefiles/temp$$");
    open(acefile,"$autodir/acefiles/$confid");
    while(<acefile>) {
      if (/^Confidential_remark/)  {$confidential=1;}
      if ($confidential !=1) {print temp $_;}
      if (/"$/ && !/\\"$/) {$confidential=0;}
    }
    close temp;
    close acefile;
    print LOGFILE "*Rmconfremark: renaming temp$$ to $confid\n" ;
    $rs = system("\\mv $autodir/acefiles/temp$$  $autodir/acefiles/$confid");
    &chksignal($rs);
  }
} # end rmconfremark


#---------------------------
# Make the non-celegans ESTs
# 
sub nonelegansests {
  open (ESTFILE, ">$autodir/acefiles/nonelegansests.ace");
  open (SEQUENCES, "/usr/local/pubseq/bin/getz -d  -f \"id acc org des\" \'([emblnew-org:nematoda\! caenorhabditis elegans] \& [emblnew-key:est]) | ([embl-org:nematoda\! caenorhabditis elegans] \& [embl-key:est])\' |") ;
  while (<SEQUENCES>) {
    if (/^ID\s+(\S+)/) {$id=$1;}
    if (/^AC\s+(\S+);/) {print ESTFILE "\nSequence EMBL:$id\ncDNA_EST\nAC_number $1\nDatabase EMBL $id $1\n";}
    if (/^OS\s+(.+)/) {print ESTFILE "Species \"$1\"\n";}        
    if (/^DE\s+(.+)/) {$def=$def." ".$1;}
    if (/^SQ\s+/) {$def=~s/^\s+//;print ESTFILE "Title \"$def\"\n";$def="";}
  }
  close SEQUENCES;
  close ESTFILE;
  push(@filenames,"$autodir/acefiles/nonelegansests.ace");
  $time = localtime ;
  print LOGFILE "*Nonelegansests: acefiles/nonelegansests.ace made at $time\n" ;
} # end nonelegansests


#---------------------------
# Re-initialize the database
#
sub reinitdb {
  #remove anything from the touched and new directories otherwise
  #the disk will fill up with these 
  system ("\\rm $autodir/database/new/*");
  system ("\\rm $autodir/database/touched/*");
  #Die if a lockfile is present
  if (-e "$autodir/database/lock.wrm") {
    print LOGFILE "*Reinitdb error - lock.wrm file present..\n";
    close LOGFILE;
    die();
  }
  #move the log file
  system ("\\mv $autodir/database/log.wrm $autodir/database/log.old");  
  #reinitialise the database
  unlink "$autodir/database/ACEDB.wrm";
  $command=<<EOF;
y
EOF
print LOGFILE "*Reinitdb: reinitializing the database ..\n";
  $rs = system ("echo '$command' | $tace $autodir >/dev/null"); 
  &chksignal($rs);
  open(mapfile,">>$autodir/database/database.map");
  for ($i=21;$i<40;$i++) {print mapfile "1 local ACEDB block",$i,".wrm 50000 0 0\n";}
  close mapfile;  
  #read in the new ace files
  foreach $filename (@filenames) {
   my $command=<<EOF;
pparse $filename
save 
quit
EOF
    print LOGFILE "*Reinitdb: reading in new database  $filename\n";
    $rs = system ("echo '$command' | $tace $autodir >/dev/null"); 
    &chksignal($rs);
  }
} # end reinitdb


#-----------------
# Remove genewise 
# 
#
sub rmgenewise {
  my $command=<<EOF;
find sequence *.gw.*
kill
save    
quit
EOF
  print LOGFILE "*Rmgenewise: deleting genewise objects\n";
  $rs = system ("echo '$command' | $tace $autodir >/dev/null"); 
  &chksignal($rs);
}				# end rmgenewise


#-----------------
# Remove HALFWISE
#
sub rmhalfwise {
  my $command=<<EOF;
find sequence *.PF*
kill
save    
quit
EOF
  print LOGFILE "*RmHalfwise: deleting halfwisewise objects\n";
  $rs = system ("echo '$command' | $tace $autodir >/dev/null"); 
  &chksignal($rs);
}				# end rmhalfwise


#-----------------------------------------
# Alan Coulson maintains a ContigC 
# database in ~cemap for the physical map.
# This is dumped in file ~cemap/cen2hs.ace 
# (nightly cron job on rathbin)
#
sub contigC {
  my $command=<<EOF;
find clone
edit -D pMap
edit -D Fingerprint
edit -D Contig9
edit -D Remark
pparse $autodir/physical_map/cen2hs.ace
save    
quit
EOF
  print LOGFILE "*ContigC: parsing physical map\n" ;
  $rs = system ("echo '$command' | $tace $autodir >/dev/null"); 
  &chksignal($rs);
}				# end contigC


#-------------------------
# Read in acefiles in the 
# fixfiles directory 
#
sub fixfiles {
  opendir(fixfiles,"$autodir/fixfiles");
  @acefiles = grep (/\.ace$/, readdir(fixfiles));
  closedir(fixfiles);
  foreach $acefile (@acefiles) {
  my $command=<<EOF;
pparse $autodir/fixfiles/$acefile
save 
quit
EOF
  print LOGFILE "Fixfiles: reading in $acefile\n";
  $rs = system ("echo '$command' | $tace $autodir >/dev/null"); 
  &chksignal($rs);
  }
} # end fixfiles


#------------------
# Make the maps
#
sub makemaps {
  my $command=<<EOF;
gif makemaps -all
save
gif makemaps -seqclonemap $autodir/acefiles/seqclonemap.ace
pparse $autodir/acefiles/seqclonemap.ace
save	    
quit
EOF
  print LOGFILE "*Makemaps: making clone maps\n" ;
  $rs = system ("echo '$command' | $giface  $autodir  >/dev/null"); 
  &chksignal($rs);
} # end makemaps


#---------------------------
# Make the chromosomal links 
#
sub makechromlink {
  print LOGFILE "*Makechromlink: making chromosome links\n" ;
  $rs = system ("$makeChromLinks > $autodir/acefiles/chromlinks.ace"); 
  &chksignal($rs);
  my $command=<<EOF;
pparse $autodir/acefiles/chromlinks.ace
save 
quit
EOF
  print LOGFILE "*Makechromlink: reading in $autodir/acefiles/chromlinks.ace\n";
  $rs = system ("echo '$command' | $tace $autodir >/dev/null"); 
  &chksignal($rs);
} # end makechromlink


#-----------------------------
# Add peptides to the database 
#
sub addpeptides {
  $tremblfile="$autodir/peptides/trembl";
  $wormpepfile="$autodir/peptides/wormpep";
  $swissfile="$autodir/peptides/swissprot";
  $peptidefile="$autodir/acefiles/peptides.ace";
  # Retrieve the list of proteins from autoace
  my $command=<<EOF;
find protein 
list -a 
quit
EOF
  open(TREMBL,">$tremblfile");
  open(WORMPEP,">$wormpepfile");
  open(SWISSPROT,">$swissfile");
  open(TEXTACE, "echo '$command' | $tace $autodir |") or do {print LOGFILE "Could not open tace to read protein information\n"};
  while (<TEXTACE>) {
    if (/^Protein\s+:\s+"(\S+)"/) {
      $protein=$1;
      if ($protein=~/TR:(\S+)/) {$protein=~s/TR/SPTREMBL/; print TREMBL "$protein\n";}
      if ($protein=~/WP:(\S+)/) {$protein=~s/WP/WORMPEP/; print WORMPEP "$protein\n";}
      if ($protein=~/SW:(\S+)/) {$protein=~s/SW/SWISSPROT/; print SWISSPROT "$protein\n";}
    }
  }
  close TEXTACE;
  close TREMBL;
  close WORMPEP;
  close SWISSPROT;
  
  # Produce the .ace file with protein sequences
  open(PEPTIDE,">$peptidefile");
  open (GETZTREMBL,"/usr/local/pubseq/bin/getz6 -d -sf fasta \'\@$tremblfile\' |");
  while (<GETZTREMBL>) {
    if (/^>(\w+)/) {$protein="TR:"."$1"; print PEPTIDE "\nPeptide $protein\n"; next;} else {print PEPTIDE $_;next;}
  }
  close GETZTREMBL;
  open (GETZWP,"/usr/local/pubseq/bin/getz6 -d -sf fasta \'\@$wormpepfile\' |");
  while (<GETZWP>) {
    if (/^>(\w+)/) {$protein="WP:"."$1"; print PEPTIDE "\nPeptide $protein\n"; next;} else {print PEPTIDE $_; next;}
  }
  close GETZWP;
  open (GETZSWISS,"/usr/local/pubseq/bin/getz6 -d -sf fasta \'\@$swissfile\' |");
  while (<GETZSWISS>) {
    if (/^>(\w+)/) {$protein="SW:"."$1";print PEPTIDE "\nPeptide $protein\n"; next;} else {print PEPTIDE $_; next;}
  }
  close GETZSWISS;
  close PEPTIDE;
  
  # Read in the .ace file with the protein sequences
  $command=<<EOF;
pparse $autodir/acefiles/peptides.ace
save 
quit
EOF
  print LOGFILE "*Addpeptides: parsing peptide file\n" ;
  $rs = system ("echo '$command' | $tace $autodir >/dev/null"); 
  &chksignal($rs);
} # end addpeptides


#------------------------
# set the date correctly 
# in displays.wrm
#
sub setdate {
  @t = localtime ; while ($t[5] >= 100) { $t[5] -= 100 ; }
  $dat = sprintf "%02d\/%02d\/%02d", $t[3], $t[4]+1, $t[5] ;
  system ("mv $autodir/wspec/displays.wrm $autodir/wspec/displays.old") ;
  open(file,"$autodir/wspec/displays.old") or do { print LOGFILE "failed to open $autodir/wspec/displays.old\n"; return 1;};
  open(newfile,">$autodir/wspec/displays.wrm") or do { print LOGFILE "failed to open $autodir/wspec/displays.wrm\n"; return 1;};
  while (<file>) 
    {if (/^_DDtMain/) {
      print newfile "_DDtMain -g TEXT_FIT -t \"AutoAce $dat\"  -w .43 -height .23 -help acedb\n";
    } else {print newfile $_;}
   }
  close file;
  close newfile;
  unlink "$autodir/wspec/displays.old" ;
  print LOGFILE "*Setdate: displays.wrm updated\n";
}				# end setdate


#-------------------------
# make the database files 
# for distribution
#
sub makedistr {
  open(databasewrm,"grep ^NAME $autodir/wspec/database.wrm |");
  while(<databasewrm>) {if (/NAME\s+(\S+)/) {$dbname=$1;}}
  close databasewrm;
  $tarfiles[0] = "w* pictures database/log.wrm database/database.map database/ACEDB.wrm" ;
  for ($i = 1 ; -e "$autodir/database/block$i.wrm" ; ++$i) {
    $tarfiles[($i+4)/5] .= " database/block$i.wrm" ;
  }
  # tar on ics-sparc1 because Solaris has the most generic tar function
  # rm any old tar files 
  # uncouple from logfile writing because there amy be problem with rsh
  print LOGFILE "*Makedistr: beginning remote tar on ics-sparc1 ..\n";
  close LOGFILE;
  my $remove1 = `\\rm $autodir/release/database.$dbname.*.tar 2>/dev/null`;
  my $remove2 = `\\rm $autodir/release/database.$dbname.*.tar.Z 2>/dev/null`;
  for ($i = 0 ; $i < @tarfiles ; ++$i) {
    $rs = `rsh ics-sparc1 \"cd $autodir/release ; tar -hcf database.$dbname.4-$i.tar $tarfiles[$i]\"`;
    push (@MESSAGES,"*Makedistr: made  tar file database.$dbname.4-$i.tar\n");
    if ($rs != 0) {
      push (@MESSAGES,"* Warning error $rs\n");
    } else {
      push (@MESSAGES,"return value $retvalue - signal $signal\n");
    }
  }
  open (LOGFILE,">>$logfile");
  foreach (@MESSAGES) {
    print LOGFILE $_;
  }
  print LOGFILE "*Makedistr: compressing relase files\n";
  $rs = system ("compress -f $autodir/release/*.tar");
  &chksignal($rs);
} # end makedistr


#---------------------------------------------------
# Dump DNA and gff files.
# Since this is a very long process, it is
# launched as an indipendent child so that we can
# end with make_autoace and manually check the log.
#
sub gffdump {
  print LOGFILE "Gffdump: launching process for making CHROMOSOME_*.[gff,dna] files\n" ;
  close LOGFILE;
  unless (fork) {
    unless (fork) {
      sleep 1 until getppid == 1;
      open (LOGFILE,">>$logfile");
      $rs = system ("$autodir/chrom_dump") ;
      printf LOGFILE (" chrom_dump return value %d - signal %x at %s\n", $rs >> 8, $rs & 0xff, scalar localtime) ;
      close LOGFILE;
      system "/usr/bin/mailx -s make_autoace_log $maintainer < $logfile";
      exit 0;
    }
    exit 0;
  } 
} # end gffdump


#-------------------------------------------------
# For internal Sanger use the chromosomal
# positions are needed for our database
# make these now as they therefore will not appear 
# in the official release
#
sub makepositions {
  undef $make_seqmaps ; 
  if (defined $make_seqmaps) {
   my $command=<<EOF;
gif makemaps -seqmap $autodir/acefiles/seqmap.ace
pparse $autodir/acefiles/seqmap.ace
gif makemaps -all
save        
quit
EOF
    print "*Makepositions: making seqmaps\n" ;
    $rs = system ("echo '$command' | $giface $autodir >/dev/null"); 
    &chksignal($rs);
  }
} # end makepositions


#--------------------------------
# Check output signals from every 
# operation.
# Dies if something goes wrong
#
sub chksignal {
  my $sig = shift;
  $retvalue = $sig >> 8;
  $signal = $sig & 0xff;
  if ($retvalue != 0) {
    print LOGFILE "* Fatal error $retvalue\n"; close LOGFILE; exit 0;
  } else {
    printf LOGFILE (" return value $retvalue - signal $signal at %s\n", scalar localtime);
  }
} # end chksignal 


#--------------------------------
# Check output signals from every 
# operation.
# Warns if something goes wrong
#
sub warnsignal {
  my $sig = shift;
  $retvalue = $sig >> 8;
  $signal = $sig & 0xff;
  if ($retvalue != 0) {
    print LOGFILE "* Warning error $retvalue\n"; return 1;
  } else {
    printf LOGFILE (" return value $retvalue - signal $signal at %s\n", scalar localtime) ;
  }
} # end warnsignal


#---------------------------
# Prints help and disappears
#
sub PrintHelp {
   exec ('perldoc',$0);
}


__END__

=pod

=head1   NAME - make_autoace

=head2 USAGE

make_autoace makes the autoace file from its composite sources. 
It alternatively transfers autoace compressed files to the ftp 
repository in /nfs/disk69/ftp/pub2/acedb/celegans/

make_autoace mandatory arguments:

=over 4

=item *
-C creates the new autoace database

=item *
-F transfers the autoace package to the ftp site

=back

=cut


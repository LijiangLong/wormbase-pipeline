#!/usr/local/bin/perl5.6.0 -w
#
# make_acefiles 
# dl1
#

#################################################################################
# Variables                                                                     #
#################################################################################

$|=1;
use lib "/wormsrv2/scripts/";   
use strict;
use Wormbase;
use IPC::Open2;
use IO::Handle;
use Getopt::Std;
use vars qw( $opt_n $opt_s $opt_e $opt_d $opt_h);

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainer = "dl1\@sanger.ac.uk kj2\@sanger.ac.uk krb\@sanger.ac.uk";
my $rundate = `date +%y%m%d`;   chomp $rundate;
my $runtime = `date +%H:%M:%S`; chomp $runtime;
my $version = &get_cvs_version('/wormsrv2/scripts/make_acefiles');

 ##############################
 # Paths etc                  #
 ##############################

my $autoace_config = "/wormsrv2/autoace_config/autoace.config";
my $basedir        = "/wormsrv2/wormbase";
my $miscdir        = "$basedir/misc";
my $estfile        = "$miscdir/misc_nonelegansests.ace";
my $tace           = "/nfs/disk100/acedb/RELEASE.DEVELOPMENT/bin.ALPHA_4/tace";
my $autodir        = "/wormsrv2/autoace";

 ##############################
 # command-line options       #
 ##############################

getopts ('nedhs:');

# help page
&usage(0) if ($opt_h);

# no option supplied
&usage(1) if ((!$opt_n)&&(!$opt_e));

# single database mode
if ($opt_s) {
    &usage(2) unless (($opt_s eq "camace") || ($opt_s eq "stlace") || ($opt_s eq "briggsae") || ($opt_s eq "geneace"));
}

# set dl1 as only mail recipient if running debug mode
$maintainer = "dl1\@sanger.ac.uk" if ($opt_d);

#################################################################################
# Get the WS version number and set the wormpep release number                  #
#################################################################################

my $WS_version = &get_wormbase_version_name;

 ########################################
 # Open logfile                         #
 ########################################

my $logfile = "/wormsrv2/logs/make_acefiles.${WS_version}.$rundate.$$";
system ("/bin/touch $logfile");
open (LOG,">>$logfile") or die ("Could not create logfile\n");
LOG->autoflush();
open (STDOUT,">>$logfile");
STDOUT->autoflush();
open (STDERR,">>$logfile"); 
STDERR->autoflush();

print LOG "# make_acefiles\n\n";     
print LOG "# version        : $version\n";
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";
print LOG "WormBase version : ${WS_version}\n";
print LOG "\n";
print LOG "======================================================================\n";
print LOG " -n : Write .ace files\n"                            if ($opt_n);
print LOG "    : from database $opt_s\n"                        if ($opt_s);
print LOG " -e : Write non-elegans nematode EST data sets\n"    if ($opt_e);
print LOG "======================================================================\n";
print LOG "\n";
print LOG "Starting make_acefiles .. \n\n";

#################################################################################
# Main Loop                                                                     #
#################################################################################

&mknewacefiles   if ($opt_n);
&nonelegansests  if ($opt_e);

my $endtime = `date +%H:%M:%S`; chomp $endtime;
print LOG "Ended make_acefiles @ $endtime\n";
close STDERR;
close STDOUT;
close LOG;

 ##############################
 # mail $maintainer report    #
 ##############################

&mail_maintainer("WormBase Report: make_acefiles ",$maintainer,$logfile);

# hasta luego
exit (0);

#################################################################################
### Subroutines                                                               ###
#################################################################################


#################################################################################
# Erases old acefiles and make new ones                                         #
#################################################################################

sub mknewacefiles {
    
    my ($dbname,$dbdir,$targetdir,$exe,$object,$criteria,$criterianoasterisk);
    my ($filename,$command,$outfile,$tag,@deletes);

    local (*CONFIG);

    open (CONFIG, "$autoace_config");
    while (<CONFIG>) {
	s/^\s+//;s/\s+$//;    
	
	# next if comment line
	next if (/^\#/  || /^$/);

        # single database mode
	if ($opt_s) {
	    next unless (/$opt_s/);
	}

	if (/^P\s+(\S+)\s+(\S+)$/) {
	    $dbname    = $1;
	    $dbdir     = $2;
	    $targetdir = "$basedir"."/$dbname";
	    $exe       = "$tace $dbdir";
	    next;
	}
	next if ($dbname =~ /misc/);
	# single database mode
	next if (($opt_s) && ($opt_s ne "$dbname"));

	# nuts and bolts of acefile generation
	# format:  database object criteria
	
	# deal with complete queries
	unless (/\[(\S+.+)\]$/) { 
	    if (/^\S+\s+(\S+)$/) {
		$object=$1; 
		$criteria=""; 
		$criterianoasterisk="";
	    }
	    elsif (/^\S+\s+(\S+)\s+(\S+.+)$/) {
		$object   = $1; 
		$criteria = $2;
		$criterianoasterisk = $2;
		chop($criterianoasterisk) if ($criteria =~ /\*$/);
	    } 
	}
	# deal with queries requiring tag deletions
	else {
	    (/\[(\S+.+)\]$/);
	    @deletes = split (/\s/,$1);
	    print LOG "add " . scalar (@deletes) . " tags to delete array\n";
	    my $report = join ' + ', @deletes;
	
	    if (/^\S+\s+(\S+)\s+\[/) {  
		$object=$1; 
		$criteria=""; 
		$criterianoasterisk="";
	    } 
	    elsif (/^\S+\s+(\S+)\s+(\S+.+)\s+\[/) {
		$object   = $1; 
		$criteria = $2;
		$criterianoasterisk = $2;
		chop($criterianoasterisk) if ($criteria =~ /\*$/);
	    }
	}

	# write tace command for different options:
	# Simple   :- whole ?Class
	# Advanced :- ?Class with tag deletions based on @deletes
	# DNA      :- ?Sequence with Species, follow DNA

	if ($object eq "DNA") {
	    ($command,$filename) = &make_command_DNA($object,$dbname,$targetdir,$criteria);
	}
	elsif ($criteria ne "") {
	    ($command,$filename) = &make_command_advanced($object,$dbname,$targetdir,$criteria,$criterianoasterisk);
	}
	else {
	    ($command,$filename) = &make_command_simple($object,$dbname,$targetdir,$criteria,$criterianoasterisk);
	}
	
	# dump out from ACEDB
	print LOG "Filename: $filename\n";
        print LOG "Command : 'find $object $criteria' in $dbname\n";
	open (TACE,"| $exe");
	print TACE $command;
	close TACE;
	print LOG "Made file $filename\n";
	
	# delete things
	if (scalar (@deletes) > 0) {
	    print "Going to delete some tags ....\n";
	    &strip_object($filename,@deletes);
	}

	# remove ghost objects
	&strip_ghosts($filename,$object);

	# process database dumps to add database names into time stamps
	# rather than keeping the existing 'wormpub', 'lstein' etc.  name
	&process_ace_file($filename,$dbname);

	next;
    }
    close CONFIG;
}

sub make_command_simple {

   my ($object,$dbname,$targetdir,$criteria,$criterianoasterisk) = @_;

   my $filename="$targetdir/".$dbname."_".$object.".ace";
   my $command;
   $command=<<END;
query find $object
show -a -f $filename
quit
END

   return ($command,$filename);
}

sub make_command_advanced {

   my ($object,$dbname,$targetdir,$criteria,$criterianoasterisk) = @_;

   my $filename="$targetdir/".$dbname."_".$object.".ace";
   my $command;
   $command=<<END;
query find $object where ($criteria)
show -a -f $filename
quit
END
   return ($command,$filename);
}

sub make_command_DNA {

    my ($object,$dbname,$targetdir,$criteria) = @_;    
    my $filename = "$targetdir/" . $dbname . "_DNA.ace";
    my $command;

    if($dbname eq "camace" || $dbname eq "stlace" || $dbname eq "briggsae"){
      $command=<<END;
query find Sequence where ($criteria)
follow DNA
show -a -T -f $filename
quit
END
}
    else{
      $command=<<END;
find Sequence
follow DNA
show -a -f $filename
quit
END

    }
    return ($command,$filename);

}

#######################################################################
# Strip unwanted lines from the acefiles                              #
#######################################################################

sub strip_object {
    my ($filename,@deletes) = @_;
    my $strip = "";
    local (*OUT,*FILE);

    foreach $strip (@deletes) {
	print LOG "Remove '$strip' from file $filename\n";

	open (OUT, ">${filename}.rm");
	open (FILE, "<$filename") || warn "can't do this chappie\n";
	while (<FILE>) {
	    next if (/$strip/);
	    print OUT "$_";
	}
	close FILE;
	close OUT;
	system ("mv -f ${filename}.rm $filename");
    }
}

sub strip_ghosts {
    my ($filename,$object) = @_;
    my ($object_header) = "";
    my $object_look = 0;

    local (*OUT,*FILE);

    open (OUT, ">${filename}.rm");
    open (FILE, "<$filename") || warn "can't do this either chappie\n";
    while (<FILE>) { 
	chomp;
	if (/^$object \: \"\S+.+\"$/) {
	    $object_header = $_;
	    $object_look = 1;
	    next;
	}
	
	if (($object_look == 1) && ($_ ne "")) {
	    print OUT "$object_header\n";
	    print OUT "$_\n";
	    $object_look = 0;
	    next;
	}
	elsif (($object_look == 1) && ($_ eq "")) {
	    $object_header = "";
	    $object_look = 0;
	    next;
	}

	print OUT "$_\n";
    }
    close FILE;
    close OUT;
    system ("mv -f ${filename}.rm $filename");
}



#######################################################################
# Make the non-celegans ESTs                                          #
#######################################################################
# 
# SRS call for ESTs in EMBL which are nematode but not C.elegans
# makes an .acefile for the object which contains the db info
# the species and def line. 
# 
# These have the method 'EST_nematode" 
#
# n.b this breaks the 

sub nonelegansests {
    
    my ($id,$def,$ac,$sv,$method);

    system ("/bin/rm $estfile");
    open (ESTFILE,   ">$estfile");
    open (SEQUENCES, "/usr/local/pubseq/bin/getz -d  -f \"id acc sv org des\" \'([emblnew-org:nematoda\! caenorhabditis elegans] \& [emblnew-key:est]) | ([embl-org:nematoda\! caenorhabditis elegans] \& [embl-key:est])\' |");
    while (<SEQUENCES>) {
	if (/^ID\s+(\S+)/) {
	    $id=$1;
	}
	if (/^SV\s+(.+)/) {
	    ($ac,$sv) = split (/\./,$1);
	    print ESTFILE "\nSequence : \"$ac\"\nDatabase EMBL $id $ac $sv\n";
	}
	if (/^OS\s+(.+)/) {
	    print ESTFILE "Species \"$1\"\n";
	    if ($1 eq "Caenorhabditis briggsae") {
		$method = "EST_briggsae";
	    }
	    else {
		$method = "EST_nematode";
	    }
	}        
	if (/^DE\s+(.+)/) {
	    $def=$def." ".$1;
	}
	if (/^SQ\s+/) {
	    $def=~s/^\s+//;
	    print ESTFILE "Title \"$def\"\ncDNA_EST\nMethod $method\n\n";
	    $def="";
	}
    }
    close SEQUENCES;
    close ESTFILE;
    print LOG "Made $estfile\n";
    return;
}





########################################################################
# Process ace files to change 'wormpub' in timestamps to database name #
########################################################################

sub process_ace_file{
    my $filename = shift;
    my $database = shift;

    print LOG "Changing timestamp information to contain $database\n\n";
    
    open (INPUT, "<$filename") || die "Couldn't open $filename for reading\n";
    open (OUTPUT, ">${filename}.tmpfile") || die "Couldn't write to tmpfile\n";

    
    while (<INPUT>) {

      if (/\"\d{4}-\d{2}-\d{2}_\d{2}:\d{2}:.*?_.*?\"/){
	s/(\"\d{4}-\d{2}-\d{2}_\d{2}:\d{2}:.*?)_.*?\"/$1_$database\"/g;
	print OUTPUT "$_";
      }
      else{
	print OUTPUT "$_";
      }
    }
    close(INPUT);
    close(OUTPUT);
    system ("mv -f ${filename}.tmpfile $filename");
}


#######################################################################
# Help and error trap outputs                                         #
#######################################################################
 
sub run_details {
    print "# make_acefiles\n#\n";     
    print "# version        : $version\n";
    print "# run details    : $rundate $runtime\n";
    print "\n";
    print "WormBase version : ${WS_version}\n";
    print "\n";
    print "======================================================================\n";
    print " -n : Write .ace files\n" if ($opt_n);
    print " -e : Write non-elegans nematode EST data sets\n" if ($opt_e);
    print "======================================================================\n";
    print "\n\n";
}


sub usage {
    my $error = shift;
    
    if ($error == 1) {
	# No command-line options
	print "\nNo command line options given\n\n";
	print "Usage: make_acefiles [-options]\n";
	print " -n : Write .ace files\n";
	print " -e : Write non-elegans nematode EST data sets\n";
	exit(0);
    }
    elsif($error == 2) {
	# Single database mode: database name not recognised
	print "\nNo database of this name exists ('$opt_s')\n";
	print "Check database names in config file\n\n";
	exit(0);
    }
    elsif ($error == 0) {
	# Normal help menu
	system ('perldoc',$0);
	exit (0);
    }
}

__END__

=pod

=head2   NAME - make_acefiles

=head1 USAGE

=over 4

=item make_acefiles [-options]

=back

make_acefiles is the first step in a WS build. It has 2 functions:

to write a number of .acefiles which are data dumps from the respective
ACEDB databases which make up the full C.elegans release (i.e. camace,
stlace, geneace, brigace)

to make a non-elegans nematode EST data set using getz

make_acrefiles mandatory arguments:

=over 4

=item none, (but it will not do anything)

=back

make_acefiles OPTIONAL arguments:

=over 4

=item -n, make new acefiles

=item -s text, single database mode. Only dumps acefiles for the named database

=item -e, make non-elegans est files

=back

=cut



#!/usr/local/bin/perl5.6.0 -w
#
# make_acefiles 
#
# dl1
#
# Generates the .acefiles from the primary databases as a prelim for building
# autoace.
#
# Last updated by: $Author: dl1 $                     
# Last updated on: $Date: 2002-08-16 11:48:42 $       

#################################################################################
# Variables                                                                     #
#################################################################################

$|=1;
use lib "/wormsrv2/scripts/";   
use strict;
use Wormbase;
use IPC::Open2;
use IO::Handle;
use Getopt::Long;

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainers = "All";
my $rundate     = `date +%y%m%d`;   chomp $rundate;
my $runtime     = `date +%H:%M:%S`; chomp $runtime;

 ##############################
 # command-line options       #
 ##############################

my $help;       # Help perdoc
my $db;         # Database name for single db option
my $debug;      # Debug mode, verbose output to dl1 only
my $dev;        # Write to development stream (/wormsrv1/ not /wormsrv2/)

GetOptions (
	    "debug"     => \$debug,
	    "help"      => \$help,
	    "db=s"      => \$db,
	    "dev"       => \$dev
	    );

 ##############################
 # Paths etc                  #
 ##############################

my $tace           = "/nfs/disk100/wormpub/ACEDB/bin.ALPHA_4/tace";
my $autoace_config = "/wormsrv2/autoace_config/autoace.config";
my $basedir        = "/wormsrv2/wormbase";
my $miscdir        = "$basedir/misc";

 ##############################
 # Paths for dev run          #
 ##############################

if ($dev) {
    $basedir        = "/nfs/griffin2/dl1/perlscrip/MAKE_ACEFILES";
    $miscdir        = "$basedir/misc";
}

# help page
&usage("Help") if ($help);

# single database mode
if ($db) {
    &usage("Bad_database_name") unless (($db eq "camace") || ($db eq "stlace") || ($db eq "briggsae") || ($db eq "cshace") || ($db eq "citace") || ($db eq "geneace"));
}

# set dl1 as only mail recipient if running debug mode
$maintainers = "dl1\@sanger.ac.uk" if ($debug);

#################################################################################
# Get the WS version number and set the wormpep release number                  #
#################################################################################

my $WS_version = &get_wormbase_version_name;

 ########################################
 # Open logfile                         #
 ########################################

my $logfile = "/wormsrv2/logs/make_acefiles.${WS_version}.$rundate.$$";
system ("/bin/touch $logfile");
open (LOG,">>$logfile") or die ("Could not create logfile\n");
LOG->autoflush();
open (STDOUT,">>$logfile");
STDOUT->autoflush();
open (STDERR,">>$logfile"); 
STDERR->autoflush();

print LOG "# make_acefiles\n\n";     
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";
print LOG "WormBase version : ${WS_version}\n";
print LOG "\n";
print LOG "======================================================================\n";
print LOG " Write .ace files\n";                     
print LOG "  from database $db\n"                           if ($db);
print LOG "  Output to /wormsrv1\n"                         if ($dev);
print LOG "======================================================================\n";
print LOG "\n";
print LOG "Starting make_acefiles .. \n\n";

if ($debug) {
    print "# make_acefiles\n\n";
    print "# run details    : $rundate $runtime\n";
    print "\n";
    print "WormBase version : ${WS_version}\n";
    print "\n";
    print "======================================================================\n";
    print " Write .ace files\n";
    print "  from database $db\n"                           if ($db);
    print "  Output to /wormsrv1\n"                         if ($dev);
    print "======================================================================\n";
    print "\n";
    print "Starting make_acefiles .. \n\n";
    print "writing .acefiled to '$basedir'\n";
}

#################################################################################
# Main Loop                                                                     #
#################################################################################

&mknewacefiles;

my $endtime = `date +%H:%M:%S`; chomp $endtime;
print LOG "Ended make_acefiles @ $endtime\n";
print "Ended make_acefiles @ $endtime\n" if ($debug);
close STDERR;
close STDOUT;
close LOG;

 ##############################
 # mail $maintainer report    #
 ##############################

&mail_maintainer("WormBase Report: make_acefiles",$maintainers,$logfile);

# hasta luego
exit (0);

#################################################################################
### Subroutines                                                               ###
#################################################################################

#################################################################################
# Erases old acefiles and make new ones                                         #
#################################################################################

sub mknewacefiles {
    
    my ($dbname,$dbdir,$targetdir,$exe,$object,$criteria,$criterianoasterisk);
    my ($filename,$filepath,$command,$outfile,$tag,@deletes,$include);

    local (*CONFIG);

    open (CONFIG, "<$autoace_config");
    while (<CONFIG>) {
	
	# some formating, remove leading and trailing whitespace
	s/^\s+//;
	s/\s+$//;    
			
	# next if comment line
	next if (/^\#/  || /^$/);

        # single database mode, next unless line contains db name
	if ($db) {
	    next unless (/$db/);
	}
	# parse database information
	if (/^P\s+(\S+)\s+(\S+)$/) {
	    $dbname    = $1;
	    $dbdir     = $2;
	    $targetdir = "$basedir/$dbname";
	    $exe       = "$tace $dbdir";
	    next;
	}

	next if ($dbname =~ /misc/);

	# nuts and bolts of acefile generation
	# format:  database object criteria

	# clear out the @deletes array eachtime
	undef (@deletes);

	# parse filename
	($filename) = (/^\S+\s+(\S+)/);
	$filepath   = "$basedir/$dbname/$filename";
		    
	print "Noting filename:$filename\n" if ($debug);

	# deal with queries requiring tag deletion
	if (/\[(\S+.+)\]$/) { 
	    @deletes = split (/\s/,$1);
	    print LOG "add " . scalar (@deletes) . " tags to delete array\n";
	    my $report = join ' + ', @deletes;
	    
	    if (/^\S+\s+\S+\s+(\S+)\s+\[/) {  
		$object = $1; ($criteria,$criterianoasterisk) = ""; 

		$command = "nosave\nquery find $object\n";
		foreach my $delete (@deletes) {
		    $command .= "eedit -D $delete\n";
		}
		$command .= "show -a -T -f $filepath\nquit\n";
	    } 
	    elsif (/^\S+\s+\S+\s+(\S+)\s+(\S+.+)\s+\[/) {
		$object   = $1; ($criteria,$criterianoasterisk) = $2; 
		chop($criterianoasterisk) if ($criteria =~ /\*$/);

		$command ="nosave\nquery find $object where ($criteria)\n";
		foreach my $delete (@deletes) {
		    $command .= "eedit -D $delete\n";
		}
		$command .= "show -a -T -f $filepath\nquit\n";
	    }
	}
	# queries requiring tag inclusion
	elsif (/\{(\S+)\}$/) { 
	    $include = $1;
	    print LOG "add $include tags\n";
	    if (/^\S+\s+\S+\s+(\S+)\s+\{/) {  
		$object = $1; 
		($criteria,$criterianoasterisk) = ""; 
		
		$command = "nosave\nquery find $object\n";
		$command .= "show -a -T $include -f $filepath\nquit\n";
	    } 
	    elsif (/^\S+\s+\S+\s+(\S+)\s+(\S+.+)\s+\{/) {
		$object   = $1; 
		($criteria,$criterianoasterisk) = $2; 
		chop($criterianoasterisk) if ($criteria =~ /\*$/);
		
		$command ="nosave\nquery find $object where ($criteria)\n";
		$command .= "show -a -T $include -f $filepath\nquit\n";
	    }
	}
	# simple query
	else { 
	    if (/^\S+\s+\S+\s+(\S+)$/) {
		$object=$1; 
		($criteria,$criterianoasterisk) = ""; 
		if ($object eq "DNA") {
		    $command   = "nosave\nquery find Sequence\nfollow DNA\n";
		    $command  .= "show -a -T -f $filepath\nquit\n";
		}
		else {
		    $command   = "nosave\nquery find $object\n";
		    $command  .= "show -a -T -f $filepath\nquit\n";
		}
	    }
	    elsif (/^\S+\s+\S+\s+(\S+)\s+(\S+.+)$/) {
		$object   = $1; 
		$criteria = $2;
		($criteria,$criterianoasterisk) = $2;
		chop($criterianoasterisk) if ($criteria =~ /\*$/);

		if ($object eq "DNA") {
		    $command   = "nosave\nquery find Sequence where ($criteria)\nfollow DNA\n";
		    $command  .= "show -a -T -f $filepath\nquit\n";
		}
		else {
		    $command   ="nosave\nquery find $object where ($criteria)\n";
		    $command  .= "show -a -T -f $filepath\nquit\n";
		}
	    }
	}
		
	# dump out from ACEDB
	print "\nFilename: $filepath\n";
        print "Command : 'find $object $criteria' in $dbname\n";
	open (TACE,"| $exe");
	print TACE $command;
	close TACE;
	print "Made file $filepath\n";
	
	# process database dumps to add database names into time stamps
	&process_ace_file($filepath,$dbname);

	next;
    }
    close CONFIG;
}

########################################################################
# Process ace files to change 'wormpub' in timestamps to database name #
########################################################################

sub process_ace_file{
    my $filename = shift;
    my $database = shift;

    print LOG "Changing timestamp information to contain $database\n\n";
    
    open (INPUT, "<$filename")            || die "Couldn't open $filename for reading\n";
    open (OUTPUT, ">${filename}.tmpfile") || die "Couldn't write to tmpfile\n";

    
    while (<INPUT>) {

      if (/\"\d{4}-\d{2}-\d{2}_\d{2}:\d{2}:.*?_.*?\"/){
	s/(\"\d{4}-\d{2}-\d{2}_\d{2}:\d{2}:.*?)_.*?\"/$1_$database\"/g;
	print OUTPUT "$_";
      }
      else{
	print OUTPUT "$_";
      }
    }
    close(INPUT);
    close(OUTPUT);
    system ("mv -f ${filename}.tmpfile $filename");
}


#######################################################################
# Help and error trap outputs                                         #
#######################################################################
 
sub usage {
    my $error = shift;
    
    if ($error eq "Bad_database_name") {
	# Single database mode: database name not recognised
	print "\nNo database of this name exists ('$db')\n";
	print "Check database names in config file\n\n";
	exit(0);
    }
    elsif ($error eq "Help") {
	# Normal help menu
	system ('perldoc',$0);
	exit (0);
    }
}

__END__

=pod

=head2   NAME - make_acefiles

=head1 USAGE

=over 4

=item make_acefiles [-options]

=back

make_acefiles is the first step in a WS build.

to write a number of .acefiles which are data dumps from the respective
ACEDB databases which make up the full C.elegans release (i.e. camace,
stlace, geneace, brigace, citace & cshace)

make_acefiles MANDATORY arguments:

=over 4

=item none, 

=back

make_acefiles OPTIONAL arguments:

=over 4

=item -db text, single database mode. Only dumps acefiles for the named database

=item -debug, verbose report (e-mails dl1 only)

=item -dev, builds new acefiles into /wormsrv1 development area

=item -help, this help page

=back

make_acefiles DEFAULT behaviour:

make_acefiles will write .acefiles for each of the primary databases to the
/wormsrv2/wormbase/ directories camace, stlace, briggsae, caltech, csh,
emblace, and geneace.

=head1 REQUIREMENTS

=back

This script must run on a machine which can see the /wormsrv2 disk.

This script requires the following data files:

=over 4

=item autoace_config

=back

This script is called by the following scripts:

=over 4

=item autoace_minder

=item dev_minder

=back

=head1 AUTHOR

=over 4

=item Dan Lawson (dl1@sanger.ac.uk)

=back

=cut



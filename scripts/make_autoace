#!/usr/local/bin/perl5.6.0 -w
#
# make_autoace
# dl1/ag3 & others
#
# Usage : make_autoace [-options]
#
# This makes the autoace database from its composite sources.


###########################################################################################
# Variables                                                                               #
###########################################################################################

$|=1;
use lib "/wormsrv2/scripts/";
use Wormbase;
use Check_Classes('check_classes');
use IO::Handle;
use POSIX qw(:signal_h :errno_h :sys_wait_h);
use Getopt::Std;
use Cwd;
use vars qw($opt_r $opt_d $opt_c $opt_p);

 ##################################################
 # Script variables (run)                         #
 ##################################################

my $maintainers   = "dl1\@sanger.ac.uk kj2\@sanger.ac.uk krb\@sanger.ac.uk";
my $rundate       = `date +%y%m%d`; chomp $rundate;
my $runtime       = `date +%H:%M:%S`; chomp $runtime;
my $WS_current    = &get_wormbase_version;
my $WS_previous   = $WS_current - 1;
our $WS_version   = &get_wormbase_version_name;

# grab version number from cvs
my $cvs_version = &get_cvs_version($0);

my $CWD = cwd;

 ##################################################
 # Get the new target database directory          #
 # and all the run options                        #
 ##################################################

$opt_p="";
getopts ('rdcp:');

if ($opt_p =~ /^(\~\w+)\//){
    $autodir=glob("$1");
    $autodir =~ s/\/tmp_mnt//;
    $FILENAME=$';
    $autodir="$autodir"."/"."$FILENAME";
} elsif ($opt_p =~ /^(\w+)/) {
    $autodir="$CWD"."/"."$opt_p";
} elsif ($opt_p =~ /\/\w+/) {
    $autodir=$opt_p;
} else {
    &PrintHelp; 
}

if ((!$opt_r)&&(!$opt_d)&&(!$opt_c)) { &PrintHelp; }

 ################################################
 # ACEDB executables                            #
 ################################################

$tace="/nfs/disk100/acedb/RELEASE.DEVELOPMENT/bin.ALPHA_4/tace";
$giface="/nfs/disk100/acedb/RELEASE.DEVELOPMENT/bin.ALPHA_4/giface";

 ################################################
 # database paths                               #
 ################################################
   
$basedir = "/wormsrv2";
$autoacedir = "$basedir/autoace";
$stlacedir = "$basedir/stlace";
$camacedir = "$basedir/camace";
$wormbasedir = "$basedir/wormbase";


 ################################################
 # others                                       #
 ################################################

$configfile = "/wormsrv2/autoace_config/autoace.config";
$makeChromLinks = "/wormsrv2/scripts/makeChromLinks.pl -l $autodir";

 ################################################
 # Avoid filling process table with zombies     #
 ################################################

$SIG{CHLD} = \&REAPER;
sub REAPER {
    my $pid;
    $pid=waitpid(-1,&WNOHANG);
    $SIG{CHLD}=\&REAPER;
}



##################################################	
# Create the directory structure                 #
##################################################

&sendmails("STARTED");
#$now = &GetTime();
&createdirs($autodir);	

##################################################
# Open logfile                                   #
##################################################

my $logfile = "/wormsrv2/logs/make_autoace.${WS_version}.${rundate}.$$";
system ("/bin/touch $logfile");
open (LOGFILE,">>$logfile");
LOGFILE->autoflush;

print LOGFILE "# make_autoace\n\n";     
print LOGFILE "# version        : $cvs_version\n";
print LOGFILE "# run details    : $rundate $runtime\n";
print LOGFILE "\n";
print LOGFILE "WormBase version : ${WS_version}\n";
print LOGFILE "\n";

my $now = `date +%H:%M:%S`; chomp $now;
print LOGFILE "* Directory structure created for $autodir at $now\n\n";
  

################################################
# Start rebuilding the database	
# Remove temp_gene sequences from stl & cam    
################################################

if ($opt_r) {

  &rmtempgene();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Removed temp_gene sequences at $now\n\n";
  
  ################################################
  # Parse config file                            
  ################################################
  
  &parseconfig;
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Parsed config file at $now\n\n";
  
  ################################################
  # Remove confidential remarks                  *
  ################################################

  &rmconfremark();  
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Removed confidential remarks at $now\n\n";

  ################################################
  # Re-initialize the database                      
  # Re-initializing database is more complex as the .acefiles 
  # will be spread over a number of
  # directories - use the config file to find them all
  ################################################

  &reinitdb();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Database re-initialized at $now\n\n";
  
  ################################################
  # Remove the genewise objects [rd 990427]      
  # modify to use Method = "postwise" selection [dl 000403]
  # modify to do all such genes together when adding gaze [rd 010606]
  ################################################

  &rmautogenes();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Genewise etc. objects removed at $now\n\n";
  
  ################################################
  # Read in the physical map and make all maps   *
  ################################################

  &contigC();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Physical map rebuilt $now\n\n";
    
  ################################################
  # Make the maps                                *
  ################################################

  &makemaps();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Maps done at $now\n\n";

  ################################################
  # Make the chromosomal links                   * 
   ################################################

  &makechromlink();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Chromosomal links rebuilt at $now\n\n";

  ################################################
  # Remove history sequences from autoace        #
  ################################################
  # 000403 : dl  :  Added to remove history gene models
  
  &rmhistory();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOGFILE "* Removed history sequences at $now\n\n";
    
  ################################################
  # Set the date correctly in displays.wrm       #
  ################################################

# disabled 010724 dl

#    &setdate();
#    $now = `date +%H:%M:%S`; chomp $now;
#    print LOGFILE "* New display date set at $now\n\n";

}

################################################
# Dump DNA and gff (CHROMOSOME) files          #
################################################

if ($opt_c) {
    &gffdump("$autodir"); 
    $now = `date +%H:%M:%S`; chomp $now;
    print LOGFILE "* GFFdump launched at $now\n\n";
}	

   ################################################
   # Make the db files for distribution           *	
   ################################################

if ($opt_d) {	
    &makedistr();
    $now = `date +%H:%M:%S`; chomp $now;
    print LOGFILE "* Distribution rebuilt at $now\n\n";
}

 ################################################
 # Send emails to group                         #
 ################################################

&sendmails("ENDED");
$now = `date +%H:%M:%S`; chomp $now;
print LOGFILE "* Send END mail at $now\n\n";
close LOGFILE;

 ###############
 # hasta luego #
 ###############
 
exit (0);

   ################################################
   ################## SUBROUTINES #################
   ################################################


###################################################
# Email the log file to wormpub                   

sub sendmails {
    $SUBJ = shift;
    open(MAIL, "| Mail -s \"make_autoace $SUBJ\" $maintainers ");


    print MAIL "make_autoace $$ has $SUBJ\n\n";
    
    print MAIL "=============================================\n";
    print MAIL "# make_autoace\n\n";     
    print MAIL "# version        : $cvs_version\n";
    print MAIL "# run details    : $rundate $runtime\n";
    print MAIL "\n";
    print MAIL "WormBase version : ${WS_version}\n";
    print MAIL "=============================================\n";
    print MAIL "\n";

    close MAIL;
    return;
}


###################################################
# Subroutine for writing to a given database      

sub DbWrite {
  my ($command,$exec,$dir,$name)=@_;
  open (WRITEDB,"| $exec $dir >> $logfile") or do {print LOGFILE "$name DbWrite failed\n";close LOGFILE; die();};
  print WRITEDB $command;
  close WRITEDB;
}


###################################################
# Get time coordinates                            

sub GetTime {
  my ($SECS,$MINS,$HOURS,$DAY,$MONTH,$YEAR)=(localtime)[0,1,2,3,4,5];
  if ($MINS=~/^\d{1,1}$/) {
    $MINS="0"."$MINS";
  }
  my $REALMONTH=$MONTH+1;
  my $REALYEAR=$YEAR+1900;
  my $NOW = "$DAY-$REALMONTH-$REALYEAR:$HOURS:$MINS";
  return $NOW;
} 


################################################
# Remove temp_gene sequences from stlace, camace 

sub rmtempgene {
  my $camace = "$camacedir";
  my $stlace = "$stlacedir";
  my $command=<<END;
query find sequence method = hand_built
kill
save
quit
END
  &DbWrite($command,$tace,$camace,"CamAce");
  &DbWrite($command,$tace,$stlace,"StlAce");
  my $command2=<<END;
query find sequence temp*
kill
save
quit
END
  &DbWrite($command2,$tace,$camace,"CamAce");
  &DbWrite($command2,$tace,$stlace,"StlAce");
}


############################################
# Create directories

sub createdirs {
 my $basedir = shift @_;
 my $chromes = "$basedir/CHROMOSOMES";
 my $db = "$basedir/database";		
 my $new = "$db/new";
 my $touch = "$db/touched";
 my $ace = "$basedir/acefiles";
 my $rel = "$basedir/release";
 my $wspec = "$basedir/wspec";
 my $pictures = "$basedir/pictures";
 @dirarray = ("$basedir","$chromes","$db","$new","$touch","$ace","$rel","$wspec");
 @args1 = ();
 @args2 = ("/bin/mkdir");
 foreach (@dirarray) {	
	$present_dir = $_;
	if (-d $present_dir) {
		print "** Skipping $present_dir - already present\n";
		next;
	} else {
		push (@args1,"$present_dir");
	}			
 }
 $argsize = scalar (@args1);
 if ($argsize == 0) {
  print "** No new directories to create .. end mkdirectories\n";
  return;
 }
 push (@args2,@args1);
 system (@args2) && die "Couldn't run 'system (@args2)'\n";
 foreach (@args1) {
	$made_dir = $_;
	if ($made_dir =~ /wspec/) {
		print "** Copying wspec from $autoacedir .. \n";
		system ("/bin/cp $autoacedir/wspec/* $wspec/.") && die "Couldn't cp wspec directory\n";
	}
	if (!-d $made_dir) {
		print " ** mkdir for $basedir failed ** \n\n";
		&sendmails ("MKDIR FAILED");
		die(0);
	} 
 }
 system ("/bin/ln -s /wormsrv2/geneace/pictures $pictures") && die "Couldn't make symbolic link\n";
 return;
}


###################################################
# Parses the lists from the config files     

sub parseconfig {
    open(CONFIG,"$configfile");
    while(<CONFIG>) {
	s/^\s+//;s/\s+$//;   
	if (/^#/ || /^$/) {
	    next;
	}	 
	
	# parse database information
	if (/^P\s+(\S+)\s+(\S+)$/) {
	    $dbname = $1;
	    $dbdir  = $2;
	    $targetdir="$wormbasedir"."/$dbname";
	    next;
	}
	
	# parse file name
	if (/^\S+\s+(\S+)/) {
	    $object=$1; 
	    $filename="$targetdir/".$dbname."_".$object.".ace";
	}
	
	# next if no filename parsed
	if (!defined $filename) {
	    print LOGFILE "* Failed to parse filename ..\n";
	    next;
	}

	# check that file exists before adding to array
	if (-e $filename) {
	    push (@filenames,$filename);
	    print LOGFILE "* Parse config file : file $filename noted ..\n";
	} 
	else {
	    print LOGFILE "** Warning - file $filename is not existent !\n";
	    next;
	}
	
    }
    close(CONFIG);
}


###################################################
# Remove confidential remarks from certain files  

sub rmconfremark { 
  @remove_confid=("stlace/stlace_Sequence.ace","camace/camace_Sequence.ace","briggsae/briggsae_Sequence.ace");
  foreach $confid (@remove_confid) {
    $this_acefile="$wormbasedir"."/$confid";
    open(TEMP,">$autodir/acefiles/temp$$");
    open(ACEFILE,"$this_acefile");
    while(<ACEFILE>) {
      if (/^Confidential_remark/)  {$confidential=1;}
      if ($confidential !=1) {print TEMP $_;}
      if (/"$/ && !/\\"$/) {$confidential=0;}
    }
    close ACEFILE;
    close TEMP;
    system("\\mv $autodir/acefiles/temp$$ $this_acefile");
  }
}


###################################################
# Re-initialize the database                      
# cleans and re-initalizes the ACEDB residing in $autodir
# then parses .ace files in @filenames
#
# 011016 : dl  : Added '-f' option to the rm lines. This will ensure that non 
#                wormpub owned files within group worm are deleted without the
#                need for an interactive prompt

sub reinitdb {
  system ("\\rm -f $autodir/database/new/*");
  system ("\\rm -f $autodir/database/touched/*");
  if (-e "$autodir/database/lock.wrm") {
    print LOGFILE "*Reinitdb error - lock.wrm file present..\n";
    close LOGFILE;
    die();
  }
  system ("\\mv $autodir/database/log.wrm $autodir/database/log.old");  
  system ("\\rm $autodir/database/*.wrm");
  unlink "$autodir/database/ACEDB.wrm";
  $command=<<EOF;
y
EOF
  print LOGFILE "* Reinitdb: reinitializing the database ..\n";
  &DbWrite($command,$tace,$autodir,"ReInitDB");
  foreach $filename (@filenames) {
   my $command=<<END;
pparse $filename
save 
quit
END
    if (-e $filename) {
	$now = `date +%H:%M:%S`; chomp $now;
	print LOGFILE "* Reinitdb: reading in new database  $filename at $now\n";
	if ($filename =~ /misc/){
	  &DbWrite($command,"$tace -tsuser misc_files",$autodir,"ParseFile");
	}
	else{
	  &DbWrite($command,$tace,$autodir,"ParseFile");
	}

    } else {
	print LOGFILE "* Reinitdb: $filename is not existent - skipping ..\n";
	next;
    }
}
}


###################################################
# Remove GeneWise, HalfWise, Gaze genes                                 
# edited by RD 010606 to do all such genes in one routine

sub rmautogenes {
  my $command=<<END;
query find sequence method = postwise
kill
save    
quit
END
  &DbWrite($command,$tace,$autodir,"RmGeneWise");
  $command=<<EOF;
query find sequence method = HALFWISE
kill
save    
quit
EOF
  &DbWrite($command,$tace,$autodir,"RmHalfWise");
  $command=<<EOF;
query find sequence method = gaze
kill
save    
quit
EOF
  &DbWrite($command,$tace,$autodir,"RmGaze");
}

###################################################
# Alan Coulson maintains a ContigC                
# database in ~cemap for the physical map.
# This is dumped in file ~cemap/cen2hs.ace 
# (makecen2hs.pl nightly cron job on rathbin)

sub contigC {
  my $command=<<END;
find clone
edit -D pMap
edit -D Fingerprint
edit -D Contig9
edit -D Remark
pparse $autoacedir/physical_map/cen2hs.ace
save    
quit
END
  &DbWrite($command,"$tace -tsuser Coulson",$autodir,"ContigC");
}


#################################################
# Make the maps                                   

sub makemaps {
  my $command=<<EOF;
gif makemaps -all
save
gif makemaps -seqclonemap $autodir/acefiles/seqclonemap.ace
pparse $autodir/acefiles/seqclonemap.ace
save	    
quit
EOF
  &DbWrite($command,$giface,$autodir,"MakeMaps");
}


###################################################
# Set the date correctly in displays.wrm          

sub setdate {
  @t = localtime ; while ($t[5] >= 100) { $t[5] -= 100 ; }
  $dat = sprintf "%02d\/%02d\/%02d", $t[3], $t[4]+1, $t[5] ;
  system ("mv $autodir/wspec/displays.wrm $autodir/wspec/displays.old") ;
  open(FILE,"$autodir/wspec/displays.old") or do { print LOGFILE "failed to open $autodir/wspec/displays.old\n"; return 1;};
  open(NEWFILE,">$autodir/wspec/displays.wrm") or do { print LOGFILE "failed to open $autodir/wspec/displays.wrm\n"; return 1;};
  while (<FILE>) 
    {if (/^_DDtMain/) {
      print NEWFILE "_DDtMain -g TEXT_FIT -t \"C.elegans database $dat\"  -w .43 -height .23 -help acedb\n";
    } else {print NEWFILE $_;}
   }
  close(FILE);
  close(NEWFILE);
  unlink "$autodir/wspec/displays.old" ;
}


###################################################
# make the database files for distribution        
#
# 010927 : dl : md5sum file is named based on the release i.e. md5sum.WS56

sub makedistr {

  # Remove old release files if present
  if (-e "$autodir/release/database.WS"."$WS_previous".".4-0.tar.gz"){
    print LOGFILE "Older WS version files exist, removing them\n";
    system("rm -f $autodir/release/*WS"."$WS_previous"."*") && die "Can't remove old release files\n";
  }


    open (DBWRM,"<$autodir/wspec/database.wrm");
    while (<DBWRM>) {
	if ($_ =~ /^NAME\s+(\S+)/) {
	    $dbname=$1;
	}
    }
    close DBWRM;
    print LOGFILE "makedistr: dbname $dbname\n\n";

    system ("/bin/touch $autodir/release/files_in_tar");
    system ("/bin/touch $autodir/release/md5sum.${dbname}");


    $tarfiles[0] = "wspec/cachesize.wrm  wspec/constraints.wrm wspec/copyright wspec/database.wrm wspec/displays.wrm wspec/help.wrm wspec/layout.wrm wspec/models.wrm wspec/options.wrm wspec/passwd.wrm wspec/psfonts.wrm wspec/subclasses.wrm wspec/xfonts.wrm wgf wquery wscripts  pictures database/log.wrm database/database.map database/ACEDB.wrm" ;
    for ($i = 1 ; -e "$autodir/database/block$i.wrm" ; ++$i) {
	$tarfiles[($i+4)/5] .= " database/block$i.wrm" ;
    }
    print LOGFILE "* Makedistr: beginning tar ..\n";
    my $remove1 = `\\rm $autodir/release/database.$dbname.*.tar 2>/dev/null`;
    my $remove2 = `\\rm $autodir/release/database.$dbname.*.tar.gz 2>/dev/null`;
    for ($i = 0; $i < @tarfiles; ++$i) {
	$rs = `cd $autodir; tar -hcf $autodir/release/database.$dbname.4-$i.tar $tarfiles[$i]\"`;
	print LOGFILE "* Makedistr: made  tar file $autodir/release/database.$dbname.4-$i.tar\n";
    if ($rs != 0) {
	print LOGFILE "* Warning: signal $rs\n";
    }


	# list files in the tar archive
	system ("tar -tf $autodir/release/database.$dbname.4-$i.tar >> $autodir/release/files_in_tar");

	# gzip the tar archive
	system ("/bin/gzip $autodir/release/database.$dbname.4-$i.tar");

	# check consistency of gzip file
	system ("/bin/gzip -t $autodir/release/database.$dbname.4-$i.tar.gz >> $autodir/release/files_in_tar");

	# calculate md5sum for the gzip file
	system ("/nfs/disk100/wormpub/bin.ALPHA/md5sum $autodir/release/database.$dbname.4-$i.tar.gz >> $autodir/release/md5sum.$dbname");
	
    }

}


#############################
# Make chromosomal links    #
#############################
#
# 010605 : rd  : removed extra "wormbase/" from paths following $wormbasedir
# 001218 : dl  : Altered path of file to fit wormbase designations
# 001307 : dl  : Added call to remove old file and state 'autoace' as the db to query
#

sub makechromlink {

    system ("rm -f $wormbasedir/misc/misc_chromlinks.ace");
    system ("$makeChromLinks -a > $wormbasedir/misc/misc_chromlinks.ace"); 
    if (-z "$wormbasedir/misc/misc_chromlinks.ace") {
	print LOGFILE "*Makechromlink: chromlinks.ace has ZERO size\n";  
	return;
    } 
    else {
	
my $command=<<EOF;
pparse $wormbasedir/misc/misc_chromlinks.ace
save     
quit
EOF
    &DbWrite($command,"$tace -tsuser make_autoace",$autodir,"MakeChromLinks");
    }
}


###################################################
# Remove History                                  

sub rmhistory {
  my $command=<<END;
query find sequence method = history
kill
save    
quit
END
  &DbWrite($command,$tace,$autodir,"RmHistory");
}


###################################################
# Dump DNA and gff files                          
# Since this is a very long process, it is
# launched as an indipendent child so that we can
# end with make_autoace and manually check the log.

sub gffdump {
  my $dumpdir = shift @_;
  print LOGFILE "* DNAdump: launching process for making CHROMOSOME_*.dna files\n" ;
  unless (fork) {
    unless (fork) {
      sleep 1 until getppid == 1;
      $rs = system ("/wormsrv2/scripts/chromosome_dump.pl -dec") ;
      open(MAIL, "| Mail -s \"make_autoace_log\" $maintainers");
      open (INLOG,"/bin/cat $logfile |");
      while (<INLOG>) {
	print MAIL $_;
      }
      close INLOG;
      close MAIL;
      exit 0;
    }
    exit 0;
  } 
  return;
}


###################################################
# Prints help and disappears                      

sub PrintHelp {
   exec ('perldoc',$0);
   exit;	
}


__END__

=pod

=head1 NAME - make_autoace

=head2 USAGE

make_autoace  makes the autoace database in a given directory.

make_autoace  arguments:

=over 4

=item *

-p path_of_database => location of the new autoace directory

=item *

-r => rebuild the database, excluding distribution and CHROMOSOMES (.dna/.gff) files; and/or

=item *

-d => creates only the distribution files; and/or

=item *

-c => creates only the CHROMOSOMES (.dna/.gff) files; and/or

=back
 
Examples:

make_autoace -p /wormsrv2/WS15 -d 
Creates the distribution files of the database in subdirectory /wormsrv2/WS15

make_autoace -p WS15 -rdc
Creates the new database in the WS15 subdirectory of the current path.
Creates the whole database, including distribution and CHROMOSOME files.

make_autoace -p ~wormpub/new_databases/WS15 -r
Creates the new database in the /new_databases/WS15 subdirectory of the ~wormpub user.
Re-create only the database files, not the distribution or the CHROMOSOME files


=back
=cut

















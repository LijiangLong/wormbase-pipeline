#!/usr/local/bin/perl5.6.1 -w
#
# make_autoace
# dl1/ag3 & others
#
# Usage : make_autoace [-options]
#
# This makes the autoace database from its composite sources.
#
# Last edited by: $Author: krb $
# Last edited on: $Date: 2003-02-11 17:49:01 $


$|=1;
use strict;
use lib "/wormsrv2/scripts/";
use Wormbase;
use Check_Classes('check_classes');
use IO::Handle;
use POSIX qw(:signal_h :errno_h :sys_wait_h);
use Getopt::Long;
use Cwd;


#############
# variables # 
#############

my $maintainers   = "All";
my $rundate       = `date +%y%m%d`; chomp $rundate;
my $runtime       = `date +%H:%M:%S`; chomp $runtime;
my $WS_current    = &get_wormbase_version;
my $WS_previous   = $WS_current - 1;
our @filenames; # for storing contents of autoace_config

# database/file paths and locations
our $basedir     = "/wormsrv2";
our $wormbasedir = "$basedir/wormbase";
our $autoacedir  = "$basedir/autoace";
our $stlacedir   = "$basedir/stlace";
our $camacedir   = "$basedir/camace";
our $configfile  = "/wormsrv2/autoace_config/autoace.config";

our $WS_version   = &get_wormbase_version_name;
my $CWD = cwd;
our $tace   = &tace;
our $giface = &giface;
our $dbpath; # Name of database to build/or make release files for


#################################
# Command-line options          #
#################################

our ($help, $debug, $database, $buildautoace, $buildrelease, $log);

GetOptions ("help"         => \$help,
            "debug=s"      => \$debug,
	    "database=s"   => \$database,
	    "buildautoace" => \$buildautoace,
	    "buildrelease" => \$buildrelease);


# Display help if required
&usage("Help") if ($help);

# Use debug mode?
if($debug){
  print "DEBUG = \"$debug\"\n\n";
  ($maintainers = $debug . '\@sanger.ac.uk');
}


###################################
# Check command-line arguments    #
###################################

&usage("Help") if ((!$buildautoace)&&(!$buildrelease));

# Exit if no database specified
if(!$database){
  &usage("Database");
}
else{
  if($database =~ /^(\~\w+)\//){ # do we need to expand path if ~path specified?
    $dbpath = glob("$1");
    $dbpath =~ s/\/tmp_mnt//;
    my $filename = "$'";
    $dbpath = "$dbpath"."/"."$filename";
  } 
  elsif($database =~ /^(\w+)/) { # for incomplete paths, expand using CWD
    $dbpath="$CWD"."/"."$database";
  }  
  elsif ($database =~ /\/\w+/) { # else assume path is ok
    $dbpath=$database;
  } 
  else {
    &usage("Help");
  }
}


# Open logfile                                   
&create_log_files;




################################################
# Avoid filling process table with zombies     #
################################################

$SIG{CHLD} = \&REAPER;
sub REAPER {
  my $pid;
  $pid=waitpid(-1,&WNOHANG);
  $SIG{CHLD}=\&REAPER;
}


##################################################	
# Create the directory structure                 #
##################################################

&buildautoace if($buildautoace);
&buildrelease if($buildrelease);


################################################
# Finish and tidy up                           #
################################################

my $time = `date +%H:%M:%S`; chomp $time;
print LOG "make_autoace finished at $time\n\n";
close (LOG);

&mail_maintainer("WormBase Report: make_autoace $WS_version",$maintainers,$log);
 

exit (0);





##############################################################
#
# Subroutines
#
##############################################################




################################################
# Build new autoace database
################################################

sub buildautoace{

  #Set up correct database structure if it doesn't exist
  &createdirs;	




  &rmtempgene();
  my $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Removed temp_gene sequences at $now\n\n";
  
  ################################################
  # Parse config file                            
  ################################################

  &parseconfig;
  $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Parsed config file at $now\n\n";
  
  ################################################
  # Remove confidential remarks                  *
  ################################################

  &rmconfremark();  
  $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Removed confidential remarks at $now\n\n";

  ################################################
  # Re-initialize the database                      
  # Re-initializing database is more complex as the .acefiles 
  # will be spread over a number of
  # directories - use the config file to find them all
  ################################################

  &reinitdb();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Database re-initialized at $now\n\n";
  
  ################################################
  # Remove the genewise objects [rd 990427]      
  # modify to use Method = "postwise" selection [dl 000403]
  # modify to do all such genes together when adding gaze [rd 010606]
  ################################################

  &rmautogenes();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Genewise etc. objects removed at $now\n\n";
  
  ################################################
  # Read in the physical map and make all maps   *
  ################################################

  &contigC();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Physical map rebuilt $now\n\n";
    
  ################################################
  # Make the maps                                *
  ################################################

  &makemaps();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Maps done at $now\n\n";

  ################################################
  # Make the chromosomal links                   * 
   ################################################

  &makechromlink();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Chromosomal links rebuilt at $now\n\n";

  ################################################
  # Remove history sequences from autoace        #
  ################################################
  # 000403 : dl  :  Added to remove history gene models
  
  &rmhistory();
  $now = `date +%H:%M:%S`; chomp $now;
  print LOG "* Removed history Sequences and Transcripts at $now\n\n";
    
}


###################################################################


sub create_log_files{

  # Create history logfile for script activity analysis
  $0 =~ m/\/*([^\/]+)$/; 
  system ("touch /wormsrv2/logs/history/$1.`date +%y%m%d`");

  # create main log file using script name for
  my $script_name = $1;
  $script_name =~ s/\.pl//; # don't really need to keep perl extension in log name
  my $rundate     = `date +%y%m%d`; chomp $rundate;
  $log        = "/wormsrv2/logs/$script_name.$rundate.$$";

  open (LOG, ">$log") or die "cant open $log";
  print LOG "$script_name\n";
  print LOG "started at ",`date`,"\n";
  print LOG "=============================================\n";
  print LOG "\n";

}




###################################################
# Subroutine for writing to a given database      

sub DbWrite {
    my ($command,$exec,$dir,$name)=@_;
    open (WRITEDB,"| $exec $dir >> $log") or do {print LOG "$name DbWrite failed\n";close LOG; die();};
    print WRITEDB $command;
    close WRITEDB;
}


###################################################
# Get time coordinates                            

sub GetTime {
    my ($SECS,$MINS,$HOURS,$DAY,$MONTH,$YEAR)=(localtime)[0,1,2,3,4,5];
    if ($MINS=~/^\d{1,1}$/) {
	$MINS="0"."$MINS";
    }
    my $REALMONTH=$MONTH+1;
    my $REALYEAR=$YEAR+1900;
    my $NOW = "$DAY-$REALMONTH-$REALYEAR:$HOURS:$MINS";
    return $NOW;
} 


################################################
# Remove temp_gene sequences from stlace, camace 

sub rmtempgene {
    my $camace  = "$camacedir";
    my $stlace  = "$stlacedir";
    my $command = "query find sequence method = hand_built\nkill\nsave\nquit\n";
    &DbWrite($command,$tace,$camace,"CamAce");
    &DbWrite($command,$tace,$stlace,"StlAce");
    my $command2 = "query find sequence temp*\nkill\nsave\nquit\n";
    &DbWrite($command2,$tace,$camace,"CamAce");
    &DbWrite($command2,$tace,$stlace,"StlAce");
}


############################################
# Create directories

sub createdirs {
  my $chromes  = "$dbpath/CHROMOSOMES";
  my $db       = "$dbpath/database";		
  my $new      = "$db/new";
  my $touch    = "$db/touched";
  my $ace      = "$dbpath/acefiles";
  my $rel      = "$dbpath/release";
  my $wspec    = "$dbpath/wspec";
  my $pictures = "$dbpath/pictures";
  my @dirarray    = ("$dbpath","$chromes","$db","$new","$touch","$ace","$rel","$wspec");
  my @args1       = ();
  my @args2       = ("/bin/mkdir");
  
  foreach (@dirarray) {	
    my $present_dir = $_;
    if (-d $present_dir) {
      print "** Skipping $present_dir - already present\n";
      next;
    }
    else {
      push (@args1,"$present_dir");
    }			
  }
  my $argsize = scalar (@args1);
  if ($argsize == 0) {
    print "** No new directories to create .. end mkdirectories\n";
    return;
  }
  push (@args2,@args1);
  system (@args2) && print LOG "ERROR: Couldn't run 'system (@args2)'\n";
  foreach my $made_dir (@args1) {
    if ($made_dir =~ /wspec/) {
      print "** Copying wspec from $autoacedir .. \n";
      system ("/bin/cp $autoacedir/wspec/* $wspec/.") && print LOG "ERROR: Couldn't cp wspec directory\n";
    }
    if (!-d $made_dir) {
      print " ** mkdir for $made_dir failed ** \n\n";
      print LOG "ERROR: mkdir command failed\n";
      die(0);
    } 
  }
  system ("/bin/ln -s /wormsrv2/geneace/pictures $pictures") && print LOG "ERROR: Couldn't make symbolic link\n";
  return;
}


###################################################
# Parses the lists from the config files     

sub parseconfig {
  my ($filename,$dbname);
  open(CONFIG,"$configfile");
  while(<CONFIG>) {

    # some formating, remove leading and trailing whitespace
    s/^\s+//;
    s/\s+$//;   
    
    # next if comment line
    next if (/^\#/ || /^$/);
    
    # parse database information
    if (/^P\s+(\S+)\s+(\S+)$/) {
      $dbname = $1;
      #	    $dbdir  = $2;
      #	    $targetdir="$wormbasedir"."/$dbname";
      next;
    }
    
    # parse file name
    if (/^\S+\s+(\S+)/) {
      $filename = $1;
    }
    
    # next if no filename parsed
    if (!defined $filename) {
      print LOG "* Failed to parse filename ..\n";
      next;
    }
    
    # check that file exists before adding to array
    if (-e "$wormbasedir"."/$dbname/"."$filename") {
      push (@filenames,"$wormbasedir"."/$dbname/"."$filename");
      print LOG "* Parse config file : file $wormbasedir/$dbname/$filename noted ..\n";
    } 
    else {
      print LOG "ERROR: file $wormbasedir/$dbname/$filename is not existent !\n";
      next;
    }
    
  }
  close(CONFIG);
}


###################################################
# Remove confidential remarks from certain files  

sub rmconfremark { 
  my @remove_confid=("stlace/stlace_Sequence.ace","camace/camace_Sequence.ace","briggsae/briggsae_Sequence.ace");
  
  my $confidential = 0;
  foreach my $confid (@remove_confid) {
    my $this_acefile="$wormbasedir"."/$confid";
    open(TEMP,">$dbpath/acefiles/temp$$");
    open(ACEFILE,"$this_acefile");
    while(<ACEFILE>) {
      ($confidential = 1) if (/^Confidential_remark/);
      (print TEMP $_) if ($confidential !=1);
      ($confidential = 0) if (/"$/ && !/\\"$/);
    }
    close ACEFILE;
    close TEMP;
    system("\\mv $dbpath/acefiles/temp$$ $this_acefile") && print LOG "ERROR: can't move acefile\n";
  }
}


###################################################
# Re-initialize the database                      
# cleans and re-initalizes the ACEDB residing in $dbpath
# then parses .ace files in @filenames
#
# 011016 : dl  : Added '-f' option to the rm lines. This will ensure that non 
#                wormpub owned files within group worm are deleted without the
#                need for an interactive prompt
# 021025 : dl  : Added single Dbwrite command which parses the first section of
#                a filename to assign the timestamp user string. i.e. a file
#                camace_Sequence.ace will be loaded as camace.

sub reinitdb {
    system ("\\rm -f $dbpath/database/new/*") && print LOG "ERROR: Couldn't remove database/new/ file\n";
    system ("\\rm -f $dbpath/database/touched/*") && print LOG "ERROR: Couldn't remove database/touched/ file\n";
    if (-e "$dbpath/database/lock.wrm") {
	print LOG "*Reinitdb error - lock.wrm file present..\n";
	close LOG;
	die();
    }
    system ("\\mv $dbpath/database/log.wrm $dbpath/database/log.old") && print LOG "ERROR: couldn't mv log.wrm\n";  
    system ("\\rm $dbpath/database/*.wrm") && print LOG "ERROR: couldn't mv *.wrm file\n";
    unlink "$dbpath/database/ACEDB.wrm";
    my $command = "y\n";
    print LOG "* Reinitdb: reinitializing the database ..\n";
    &DbWrite($command,$tace,$dbpath,"ReInitDB");
    foreach my $filename (@filenames) {
      my $command = "pparse $filename\nsave\nquit\n";
      if (-e $filename) {
	my $now = `date +%H:%M:%S`; chomp $now;
	print LOG "* Reinitdb: reading in new database  $filename at $now\n";
	my ($tsuser) = $filename =~ (/^\S+\/(\S+)\_/);
	&DbWrite($command,"$tace -tsuser $tsuser",$dbpath,"ParseFile");
      }
      else {
	print LOG "* Reinitdb: $filename is not existent - skipping ..\n";
	next;
      }
    }
}


###################################################
# Remove GeneWise, HalfWise, Gaze genes                                 
# edited by RD 010606 to do all such genes in one routine
# edited by dl 020327 to remove GAZE link objects 

sub rmautogenes {
    my $command;
    $command = "query find sequence method = postwise\nkill\nsave\nquit\n";
    &DbWrite($command,$tace,$dbpath,"RmGeneWise");
    $command = "query find sequence method = HALFWISE\nkill\nsave\nquit\n";
    &DbWrite($command,$tace,$dbpath,"RmHalfWise");
    $command = "query find sequence method = gaze\nkill\nsave\nquit\n";
    &DbWrite($command,$tace,$dbpath,"RmGaze");
    $command = "query find sequence \"GAZE:LINK*\"\nsave\nquit\n";
    &DbWrite($command,$tace,$dbpath,"RmGazeLink");

}

###################################################
# Alan Coulson maintains a ContigC                
# database in ~cemap for the physical map.
# This is dumped in file ~cemap/cen2hs.ace 
# (makecen2hs.pl nightly cron job on rathbin)

sub contigC {
    my $command = "find clone\nedit -D pMap\nedit -D Fingerprint\nedit -D Contig9\nedit -D Remark\n";
    $command .= "pparse $autoacedir/physical_map/cen2hs.ace\nsave\nquit\n";
    &DbWrite($command,"$tace -tsuser Coulson",$dbpath,"ContigC");
}


#################################################
# Make the maps                                   

sub makemaps {
    my $command = "gif makemaps -all\nsave\ngif makemaps -seqclonemap $dbpath/acefiles/seqclonemap.ace\n";
    $command .= "pparse $dbpath/acefiles/seqclonemap.ace\nsave\nquit\n";
    &DbWrite($command,$giface,$dbpath,"MakeMaps");
}


###################################################
# Set the date correctly in displays.wrm          

sub setdate {
  my @t   = localtime ; while ($t[5] >= 100) { $t[5] -= 100 ; }
  my $dat = sprintf "%02d\/%02d\/%02d", $t[3], $t[4]+1, $t[5] ;
  system ("mv $dbpath/wspec/displays.wrm $dbpath/wspec/displays.old") && print LOG "ERROR: Can't move displays.wrm file\n";
  open(FILE,"$dbpath/wspec/displays.old") or do { print LOG "failed to open $dbpath/wspec/displays.old\n"; return 1;};
  open(NEWFILE,">$dbpath/wspec/displays.wrm") or do { print LOG "failed to open $dbpath/wspec/displays.wrm\n"; return 1;};
  while (<FILE>) {
    if (/^_DDtMain/) {
      print NEWFILE "_DDtMain -g TEXT_FIT -t \"C.elegans database $dat\"  -w .43 -height .23 -help acedb\n";
    } 
    else {
      print NEWFILE $_;
    }
  }
  close(FILE);
  close(NEWFILE);
  unlink "$dbpath/wspec/displays.old" ;
}





#############################
# Make chromosomal links    #
#############################
#
# 010605 : rd  : removed extra "wormbase/" from paths following $wormbasedir
# 001218 : dl  : Altered path of file to fit wormbase designations
# 001307 : dl  : Added call to remove old file and state 'autoace' as the db to query
#

sub makechromlink {
  system ("rm -f $wormbasedir/misc/misc_chromlinks.ace") && print LOG "ERROR: Couldn't rm chromlinks file\n";
  system ("/wormsrv2/scripts/makeChromLinks.pl > $wormbasedir/misc/misc_chromlinks.ace") && print LOG "ERROR: couldn't run makechromlinks\n"; 
  if (-z "$wormbasedir/misc/misc_chromlinks.ace") {
    print LOG "*Makechromlink: chromlinks.ace has ZERO size\n";  
    return;
  } 
  else {
    my $command = "pparse $wormbasedir/misc/misc_chromlinks.ace\nsave\nquit\n";
    &DbWrite($command,"$tace -tsuser make_autoace",$dbpath,"MakeChromLinks");
  }
}


###################################################
# Remove History                                  

sub rmhistory {
    my $command  = "query find sequence method = history\nkill\nsave\nquit\n";
    my $command2 = "query find Transcript method = history\nkill\nsave\nquit\n";
    &DbWrite($command,$tace,$dbpath,"RmHistory");
    &DbWrite($command2,$tace,$dbpath,"RmHistory");
}


#########################################
#  Help and usage
#########################################
sub usage {
  my $error = shift;

  if ($error eq "Help") {
    # Normal help menu
    system ('perldoc',$0);
    exit (0);
  }

  elsif ($error eq "Database") {
    # Normal help menu
    print "\n\nYou need to specify a name of a database to build (-buildautoace option) or a name\n";
    print "of an existing database where you can dump release files (-buildrelease option\n\n";
    exit (0);
  }
}


################################################
# Make the db files for distribution           *	
################################################

sub buildrelease{	
    my $runtime = `date +%H:%M:%S`; chomp $runtime;
    print LOG "Starting to build release files at $runtime\n\n";

    # Remove old release files if present
    if (-e "$dbpath/release/database.WS"."$WS_previous".".4-0.tar.gz"){
      print LOG "Older WS version files exist, removing them\n";
      system("rm -f $dbpath/release/*WS"."$WS_previous"."*") && print LOG "ERROR: Can't remove old release files\n";
    }
    
    my $dbname;
    
    open (DBWRM,"<$dbpath/wspec/database.wrm");
    while (<DBWRM>) {
      if ($_ =~ /^NAME\s+(\S+)/) {
	$dbname=$1;
      }
    }
    close DBWRM;
    print LOG "makedistr: dbname $dbname\n\n";
    
    system ("/bin/touch $dbpath/release/files_in_tar") && print LOG "ERROR: Can't touch files_in_tar\n";
    system ("/bin/touch $dbpath/release/md5sum.${dbname}") && print LOG "ERROR: Can't touch md5sum file\n";
    
    my @tarfiles;
    $tarfiles[0] = "wspec/cachesize.wrm  wspec/constraints.wrm wspec/copyright wspec/database.wrm wspec/displays.wrm wspec/help.wrm wspec/layout.wrm wspec/models.wrm wspec/options.wrm wspec/passwd.wrm wspec/psfonts.wrm wspec/subclasses.wrm wspec/xfonts.wrm wgf wquery wscripts  pictures database/log.wrm database/database.map database/ACEDB.wrm" ;
    
    for (my $i = 1 ; -e "$dbpath/database/block$i.wrm" ; ++$i) {
      $tarfiles[($i+4)/5] .= " database/block$i.wrm" ;
    }
    print LOG "* Makedistr: beginning tar ..\n";
    my $remove1 = `\\rm $dbpath/release/database.$dbname.*.tar 2>/dev/null`;
    my $remove2 = `\\rm $dbpath/release/database.$dbname.*.tar.gz 2>/dev/null`;
    for (my $i = 0; $i < @tarfiles; ++$i) {
      system("cd $dbpath; tar -hcf $dbpath/release/database.$dbname.4-$i.tar $tarfiles[$i]\"") && print LOG "Couldn't create tarfile\n";

      # list files in the tar archive
      system ("tar -tf $dbpath/release/database.$dbname.4-$i.tar >> $dbpath/release/files_in_tar");
      
      # gzip the tar archive
      system ("/bin/gzip $dbpath/release/database.$dbname.4-$i.tar") && print LOG "ERROR: Couldn't create gzip file\n";
      
      # check consistency of gzip file
      system ("/bin/gzip -t $dbpath/release/database.$dbname.4-$i.tar.gz >> $dbpath/release/files_in_tar");
      
      # calculate md5sum for the gzip file
      system ("/nfs/disk100/wormpub/bin.ALPHA/md5sum $dbpath/release/database.$dbname.4-$i.tar.gz >> $dbpath/release/md5sum.$dbname");
    }
  
    $runtime = `date +%H:%M:%S`; chomp $runtime;
    print LOG "Finished building release files at $runtime\n\n";
}








__END__

=pod

=head1 NAME - make_autoace

=head2 USAGE

make_autoace  makes the autoace database in a given directory.

make_autoace  arguments:

=over 4

=item *

-database path_of_database => location of the new autoace directory

=item *

-buildautoace => rebuild the database from source databases (geneace, camace etc)

=item *

-buildrelease => creates only the distribution (release) files


=back
 

=cut

















#!/usr/local/bin/perl

# Script to maintain the C.elegans ftp site
# Original version by Steve Jones
# dl modified 2000-05-26
# ag3 modified 2000-06
# relies on the integrity of cmid and unfincmid for Sanger data
# relies on the integrity of stlcmid and stlunfincmid for GSC data
# relies on the file clone_iMap_position for chromosome_designations
# produces a new Blastable version of allcmid at every run

$|=1;
use Getopt::Std;
getopts (ab);

if ((!$opt_a)&&(!$opt_b)) {
$HELP=<<END;
usage: Maintain_FTP_site -a for ftp site maintenance only
       Maintain_FTP_site -b for Blast database rebuilding
       Maintain_FTP_site -ab for ftp site maintenance + Blast database rebuilding    
END
    print $HELP;
    exit 0;
}

my $wormpub="/nfs/disk100/wormpub";
my $log = "/wormsrv2/logs/Maintain_FTP_site.$$";
my $CE_FTP_DIR = "/nfs/disk69/ftp/pub/wormbase/sequences";
my $CD_DBDIR = "$wormpub/analysis/Sequence_Databases";

%count = (
	  'I',        '0',
	  'II',       '0',
	  'III',      '0',
	  'IV',       '0',
	  'V',        '0',
	  'X',        '0',
	  'UNSORTED', '0',
	  );

@FINISHED_DIRS = (
"$CE_FTPDIR/FINISHED_SEQUENCES/UNSORTED",
"$CE_FTPDIR/FINISHED_SEQUENCES/I",
"$CE_FTPDIR/FINISHED_SEQUENCES/II",
"$CE_FTPDIR/FINISHED_SEQUENCES/III",
"$CE_FTPDIR/FINISHED_SEQUENCES/IV",
"$CE_FTPDIR/FINISHED_SEQUENCES/V",
"$CE_FTPDIR/FINISHED_SEQUENCES/X"
);

@UNFINISHED_DIRS = (
"$CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED",
"$CE_FTPDIR/UNFINISHED_SEQUENCES/I",
"$CE_FTPDIR/UNFINISHED_SEQUENCES/II",
"$CE_FTPDIR/UNFINISHED_SEQUENCES/III",
"$CE_FTPDIR/UNFINISHED_SEQUENCES/IV",
"$CE_FTPDIR/UNFINISHED_SEQUENCES/V",
"$CE_FTPDIR/UNFINISHED_SEQUENCES/X"
);

open (LOG, ">$log") || die ("Can't open logfile\n");
print LOG "# Maintain_FTP_site v3.0\n\n";

if ($opt_a) {
 $now = &gettime;
 print LOG  "# [$now] Build a hash for the clone / chromosome number\n";
 &map_chromosome_position;
 foreach (@FINISHED_DIRS) {
  &clean_dirs($_);
 }
 foreach (@UNFINISHED_DIRS) {
  &clean_dirs($_);
 }
 $now = &gettime;
 print LOG "\n# [$now] getting St Louis clones from <stlcmid> & <stlunfincmid>\n\n";
 &get_stlouis_data;
 $now = &gettime;
 print LOG "# [$now] copied $gsc_clone clones from St Louis sections\n\n";
 $now = &gettime;
 print LOG "\n# [$now] getting Cambridge clones from <cmid> & <unfincmid>\n\n";
 &get_cambridge_data;
 $now = &gettime;
 print LOG "# [$now] copied $sanger_clone clones from Cambridge sections\n\n";
 $now = &gettime;
 print LOG "\n# [$now] move *FINISHED* clones to appropriate chromosome bin\n\n";
 &bin_finished_clones;
 $now = &gettime;
 print LOG "\n# [$now] deal with the *FINISHED* data -> check consistency\n\n";
 &check_finished_clones;
 $now = &gettime;
 print LOG "\n# [$now] move *UNFINISHED* clones to appropriate chromosome bin\n\n";
 &bin_unfinished_clones;
 $now = &gettime;
 print LOG "\n# [$now] deal with the *UNFINISHED* data -> check consistency\n\n";
 &check_unfinished_clones;
}  

if ((($opt_a)&&($opt_b))||($opt_b)) {
 $now = &gettime;
 print LOG "\n# [$now] Maintain blastable databases\n\n";
 &maintain_blast_dbs;
}

$now = &gettime;
print LOG "\n# [$now] The end of the story .. bye .. \n\n";
close (LOG);

&email_log;

exit (0);

###########################################################################################
# SUBROUTINES                                                                             #
###########################################################################################

#------------------
# Get current time
#
sub gettime {
  my @time = localtime();
  my ($MINS,$HOURS,$DAY,$MONTH,$YEAR)=(localtime)[1,2,3,4,5];
  if ($MINS=~/^\d{1}$/) {
    $MINS="0"."$MINS";
  }
  my $REALMONTH=$MONTH+1;
  my $REALYEAR=$YEAR+1900;
#  my $TODAY = "$DAY $REALMONTH $REALYEAR at $HOURS:$MINS";
  my $TODAY = "$HOURS:$MINS";
  return $TODAY;
}


#---------------------------------------------
# Map chromosome position, building an hash 
# that maps clones to their chromosome numbers
#
sub map_chromosome_position {
    open (CHROMPOS, "<$wormpub/analysis/scripts/clone_iMap_position") or die ("Could not find file clone_iMap_Position\n");
    while (<CHROMPOS>) {
	(/^(\S+)\s+(\S+)/);
	if ($2 ne "unmapped") {
	    $chrome{$1}=$2;
	}
    }
    close (CHROMPOS);
    return 0;
}


#----------------------------------------------------
# get_stlouis_data
# Grab all clones previously recovered from St.Louis 
# FTP site and put them in /FINISHED/UNSORTED dir ready to be sorted
# The stlcmid file used to be fetched from STL each night
# by: ~wormpub/analysis/scripts/get_stlouis_data (cronjob wormpub on ics1a).
# * 11042000 this file is now directly dumped from stlace
# * until we don't recover access to St. Louis
# The stlunfincmid file is maintained by get_stlouis_unfin 
#
sub get_stlouis_data {
    # set vars for the GSC data
    $gsc_clone = 0;

    # St.Louis *FINISHED* data from stlcmid
    open (GSC_FINISHED, "$wormpub/analysis/Sequence_Databases/stlcmid") || die ("Could not open $wormpub/analysis/stlcosmids/stlcmid\n"); ;
    while (<GSC_FINISHED>){
	if (/^>(\w+)/) {
	    my $cosmid=$1;
	    $cosmid=~tr/a-z/A-Z/;
	    close OUTPUT;
	    open (OUTPUT, ">$CE_FTPDIR/FINISHED_SEQUENCES/UNSORTED/$cosmid.seq");
	    $gsc_clone++;
	    $now = &gettime;
	    print LOG "[$now] [#$gsc_clone] : cp GSC $cosmid to FINISHED UNSORTED directory '$cosmid.seq'\n";
	}
	print OUTPUT "\U$_";
    }
    close (GSC_FINISHED);
    close OUTPUT;

    # St.Louis *UNFINISHED* data from stlunfincmid
    open (GSC_UNFINISHED, "$wormpub/analysis/Sequence_Databases/stlunfincmid") || die ("Could not open $wormpub/analysis/Sequence_Databases/stlunfincmid\n");
    while (<GSC_UNFINISHED>){
	if (/^>([A-Za-z0-9]+)/) {
	    my $cosmid=$1;
	    $cosmid=~tr/a-z/A-Z/;
	    if (!$SEEN{$cosmid}) {
	     $SEEN{$cosmid}++;
	     close OUTPUT;
	     open (OUTPUT, ">$CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED/$cosmid.shg");
	     $gsc_clone++;
	     $now = &gettime;
	     print LOG "[$now] [#$gsc_clone] : cp GSC $cosmid to UNFINISHED UNSORTED directory '$cosmid.shg'\n";
	 }
	}
	print OUTPUT "\U$_";
    }
    close (GSC_UNFINISHED);
    close OUTPUT;
}

#----------------------------------------------
# get_cambridge_data
# This subroutine gets  all the  *finished*
# and *unfinished* Cambridge sequences
# The *finished cmid file is maintained by celeanacon_dl
# The *unfinised unfincmid file is maintained by 
# rebuild_unfincmid
#
sub get_cambridge_data {

    # set vars for the SANGER data
    $sanger_clone = 0;

    # *FINISHED* data comes from cmid
    open (SANGER_FINISHED, "$wormpub/analysis/Sequence_Databases/cmid") || die ("Could not open $wormpub/analysis/cosmids/cmid\n");
    while (<SANGER_FINISHED>){
	if (/^>(\w+)/) {
	    my $cosmid=$1;
	    $cosmid=~tr/a-z/A-Z/;
	    close OUTPUT;
	    open (OUTPUT, ">$CE_FTPDIR/FINISHED_SEQUENCES/UNSORTED/$cosmid.seq");
	    $sanger_clone++;
	    $now = &gettime;
	    print LOG "[$now] [#$sanger_clone] : cp SANGER $cosmid to FINISHED/UNSORTED directory '$cosmid.seq'\n";
	}
	print OUTPUT "\U$_";
    }
    close (SANGER_FINISHED);
    close OUTPUT;

    # *UNFINISHED* data comes from unfincmid
    open (SANGER_UNFINISHED, "$wormpub/analysis/Sequence_Databases/unfincmid") || die ("Could not open $wormpub/analysis/Sequence_Databases/unfincmid\n");
    # We must maintain all the unfinished cosmids of a clone in the same file
    while (<SANGER_UNFINISHED>){
	if (/^>([A-Za-z0-9]+)/) {
	    my $cosmid=$1;
	    $cosmid=~tr/a-z/A-Z/;
	    if (!$SEEN{$cosmid}) {
		$SEEN{$cosmid}++;
		close OUTPUT;
		open (OUTPUT, ">$CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED/$cosmid.shg");
		$sanger_clone++;
		$now = &gettime;
		print LOG "[$now] [#$sanger_clone] : cp SANGER $cosmid to UNFINISHED/UNSORTED directory '$cosmid.shg'\n";
	    }
	}
	print OUTPUT "\U$_";
    }
    close (SANGER_UNFINISHED);
    close OUTPUT;
}


#------------------------
# Put anything from the 
# FINISHED UNSORTED
# GSC & Sanger
# directory in the 
# proper chromosome bin
#
sub bin_finished_clones {
    $|=1;
    # Put anything in FINISHED directory in the proper chromosome bin
    open (LOOK_FIN, "/bin/ls -1 $CE_FTPDIR/FINISHED_SEQUENCES/UNSORTED/ | ");
    while (<LOOK_FIN>) {
	if (/seq/) {
	    ($cosmid) = (/^(\S+).seq/);
	    $chromosome=$chrome{$cosmid};
	    
    # If chromosomal position was not found, try again ..  
	    if ($chromosome eq "") {
		print LOG "!! Clone $cosmid has no interpolated gmap position !!\n";
		$count{UNSORTED}++;
		next;
	    } else {
		print LOG "FINISHED:$cosmid ==> Chromosome $chromosome\n";

     # .. Copy the sequence from FINISHED_SEQUENCES/UNSORTED to the appropriate bin
		$now = &gettime;
		$count{$chromosome}++;
		print LOG "[$now] [$chromosome:$count{$chromosome}] : cp $cosmid.seq to bin $chromosome\n";
		$retvalue = system("/bin/cp $CE_FTPDIR/FINISHED_SEQUENCES/UNSORTED/$cosmid.seq $CE_FTPDIR/FINISHED_SEQUENCES/$chromosome/$cosmid.seq");
		chomp $retvalue;
		$sysvalue = 0xffff & $retvalue;
		if ($sysvalue != 0) {
		    print LOG "Failed to copy $cosmid.seq to bin $chromosome\n";
		} 
	    }
	}
    }
    close (LOOK_FIN);
}


#----------------------
# Put anything from the
# UNFINISHED UNSORTED
# GSC & Sanger
# directory in the
# proper chromosome bin
#
sub bin_unfinished_clones {
    $|=1;
    #Put anything in UNFINISHED directory in the proper chromosome bin
    open (LK_UNFIN, "/bin/ls -1 $CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED/ | ");    
    while (<LK_UNFIN>) {
	print LOG "Sequence: $_\n";
	if (/shg/) {
	    ($cosmid) = (/^(\S+).shg/);
	    $chromosome=$chrome{$cosmid};
	    
	    # if chromosomal position was not found, try again ..  
	    if ($chromosome eq "") {
		print LOG "!! Clone $cosmid has no interpolated gmap position !!\n";
		$count{UNSORTED}++;
		next;
	    } else {
		print LOG "UNFINISHED:$cosmid ==> Chromosome $chromosome\n";
      	    # Copy the unsorted sequence to the appropriate bin
		$now = &gettime;
		$count{$chromosome}++;
		print LOG "[$now] [$chromosome:$count{$chromosome}] : cp $cosmid.shg to bin $chromosome\n";
		$retvalue = system("/bin/cp $CE_FTPDIR/UNFINISHED_SEQUENCES/UNSORTED/$cosmid.seq $CE_FTPDIR/UNFINISHED_SEQUENCES/$chromosome/$cosmid.seq");
		chomp $retvalue;
		$sysvalue = 0xffff & $retvalue;
		if ($sysvalue != 0) {
		    print LOG "Failed to copy $cosmid.seq to bin $chromosome\n";
		}
	    }
	}
    }
    close (LK_UNFIN);
}


#------------------------------
# This subroutine will clean
# up all the finished sequences
# before binning
#
sub clean_dirs {
    my $DIR=shift;
    print LOG "Directory $DIR\n";
    opendir (DIRHANDLE,"$DIR") or print LOG "Could not open directory $DIR";
    while (defined($filename = readdir(DIRHANDLE))) {
	unlink "$DIR/$filename";
    }
    closedir DIRHANDLE;
    $now = &gettime;
    print LOG "[$now] : cleaned directory $DIR\n";
}


#-------------------------
# Make statistics after 
# finished clones
#
sub check_finished_clones {
    $tot_clone = $gsc_clone + $sanger_clone;
    $tot_binned = $count{I} + $count{II} + $count{III} + $count{IV} + $count{V} + $count{X} + $count{UNSORTED};
    print LOG "Total Clones\t$tot_clone\nWASHU\t$gsc_clone\nSANGER\t$sanger_clone\n\n";
    print LOG "Total Binned\t$tot_binned\n\n";
    print LOG "CHROMOSOME BIN : I          $count{I}\n";
    print LOG "CHROMOSOME BIN : II         $count{II}\n";
    print LOG "CHROMOSOME BIN : III        $count{III}\n";
    print LOG "CHROMOSOME BIN : IV         $count{IV}\n";
    print LOG "CHROMOSOME BIN : V          $count{V}\n";
    print LOG "CHROMOSOME BIN : X          $count{X}\n";
    print LOG "CHROMOSOME BIN : UNSORTED   $count{UNSORTED}\n";
    if ($tot_binned =! $tot_clone) {
	print LOG "## Mismatch in clone numbers\n\n";
    }
}


#------------------------
# Make statistics after
# unfinished clones
#
sub check_unfinished_clones {
    $tot_clone = $gsc_clone + $sanger_clone;
    $tot_binned = $count{I} + $count{II} + $count{III} + $count{IV} + $count{V} + $count{X} + $count{UNSORTED};
    print LOG "Total Clones\t$tot_clone\nWASHU\t$gsc_clone\nSANGER\t$sanger_clone\n\n";
    print LOG "Total Binned\t$tot_binned\n\n";
    print LOG "CHROMOSOME BIN : I          $count{I}\n";
    print LOG "CHROMOSOME BIN : II         $count{II}\n";
    print LOG "CHROMOSOME BIN : III        $count{III}\n";
    print LOG "CHROMOSOME BIN : IV         $count{IV}\n";
    print LOG "CHROMOSOME BIN : V          $count{V}\n";
    print LOG "CHROMOSOME BIN : X          $count{X}\n";
    print LOG "CHROMOSOME BIN : UNSORTED   $count{UNSORTED}\n";
    if ($tot_binned =! $tot_clone) {
	print LOG "## Mismatch in clone numbers\n\n";
    }
}


#---------------------------------------
# Maintain the allcmid Blast database in 
# ~wormpub/analysis/Sequence_databases
#
sub maintain_blast_dbs {
    
    $orig_number=$number=0;

# Save existing allcmid in case of a meltdown
    system("/bin/cp $CD_DBDIR/allcmid $CD_DBDIR/allcmid.from.yesterday");

# Record in a variable the existing number of sequence entries
    $orig_number = `grep \'\>\' $CD_DBDIR/allcmid \| wc \-l`;

# clean up from previous sessions
    unlink "$CD_DBDIR/stlandcam-cmid"; 
    unlink ("$CD_DBDIR/allcmid2");
    unlink ("$CD_DBDIR/allcmid3");
    unlink ("$CD_DBDIR/allcmid3.csq");
    unlink ("$CD_DBDIR/allcmid3.nhd");
    unlink ("$CD_DBDIR/allcmid3.ntb");
    unlink ("$CD_DBDIR/tempallcmid");

# The clean_up_cmid script will make sure that the FASTA header 
# only contains the seq or clone name (removes completion date)
    system(" clean_up_cmid -i $CD_DBDIR/cmid > $CD_DBDIR/stlandcam-cmid"); 
    system(" clean_up_cmid -i $CD_DBDIR/stlcmid >> $CD_DBDIR/stlandcam-cmid");
    $number = `grep \'\>\' $CD_DBDIR/stlandcam-cmid \| wc \-l`;
    chomp $number;
    $now = &gettime;
    print LOG "\n# [$now] stlandcam-cmid built with $number entries\n";
    system("cat $CD_DBDIR/stlandcam-cmid > $CD_DBDIR/allcmid2");
    system("cat $CD_DBDIR/unfincmid >> $CD_DBDIR/allcmid2");
    system("cat $CD_DBDIR/stlunfincmid >> $CD_DBDIR/allcmid2");
    $number = `grep \'\>\' $CD_DBDIR/allcmid2 \| wc \-l`;
    chomp $number;
    $now = &gettime;
    print LOG "\n# [$now] allcmid2 built with $number entries\n";

# Modify FASTA headers that are not unique by adding the contig number to the name (avc: 17.6.99)
    open (ALLCMID, "$CD_DBDIR/allcmid2") or die "Can't modify fasta headers: $!\n";
    open (TEMPCMID, ">$CD_DBDIR/tempallcmid") or die "Can't create temp allcmid file: $!\n";
    while (<ALLCMID>){
	if (/>/){
	    if (/Contig ID=(\w*)\s*/i){
		my $ctg = ".ctg$1";
		$_ =~ s/^>(\w*)(\s*)(.*)/>$1$ctg$2$3/i;
	    }
	}
	$_=~tr/a-z/A-Z/;
	print TEMPCMID $_;
    }
    close (TEMPCMID);
    close (ALLCMID);
    unlink ("$CD_DBDIR/allcmid2");
    $number = `grep \'\>\' $CD_DBDIR/tempallcmid \| wc \-l`;
    chomp $number;
    $now = &gettime;
    print LOG "\n# [$now] Tempallcmid has now $number entries\n";

# Reformat & pressdb
    $sysvalue = system ("/usr/local/pubseq/bin/reformat -d fasta $CD_DBDIR/tempallcmid > $CD_DBDIR/allcmid3");
    if ($sysvalue != 0) {
	$now = &gettime;
	print LOG "\n# [$now] Warning - reformat tempallcmid -> allcmid3 failed\n";
	print LOG "\n# [$now] Sysvalue is now $sysvalue\n";
	open(MAIL, "| Mail -s \"Maintain_FTP_site: reformat tempallcmid -> allcmid3 failed on ALLCMID\" wormpub\@sanger.ac.uk");
	print MAIL "\nReformat procedure has failed on ALLCMID with sysvalue $sysvalue\n";
	close MAIL;  
	return;
    } else {
	$number = `grep \'\>\' $CD_DBDIR/allcmid3 \| wc \-l`;
	chomp $number;
	$now = &gettime;
	print LOG "\n# [$now] Reformat tempallcmid -> allcmid3 successful with $number entries\n";
	unlink ("$CD_DBDIR/tempallcmid");
    }
    $now = &gettime;
    if ($number < $orig_number) {
       print LOG "\n# [$now] Warning - allcmid3 contains $number entries, allcmid contains $orig_number entries - allcmid left unaltered\n";
       return;
    } else {
       system("/usr/local/pubseq/bin/pressdb $CD_DBDIR/allcmid3");
    }

# Sanity check for pressdb & worm blast databases
    opendir (DIR, "$CD_DBDIR");
    foreach $filename (readdir(DIR)){
	if ( -z $filename ){
	    push(@filenames, $filename);
	}
    }
    closedir(DIR);

    if ( $#filenames >= 0 ){
	open(MAIL, "| Mail -s \"Maintain_FTP_Site: pressdb failed on ALLCMID\" wormpub\@sanger.ac.uk");
	print MAIL "\nThe following files have zero length:\n\n@filenames\n";
	close MAIL;
	$now = &gettime;
	print LOG "\n# [$now] pressdb *failed* on allcmid\n";
	return;
    } else {
	$now = &gettime;
	print LOG "\n# [$now] pressdb *suceeded* on allcmid\n";
	$tot=$mv1=$mv2=$mv3=$mv4=0;
	unlink ("$CD_DBDIR/allcmid");
	unlink ("$CD_DBDIR/allcmid.csq");
	unlink ("$CD_DBDIR/allcmid.nhd");
	unlink ("$CD_DBDIR/allcmid.ntb");
	$mv1=system ("/bin/mv $CD_DBDIR/allcmid3 $CD_DBDIR/allcmid");
	$mv2=system ("/bin/mv $CD_DBDIR/allcmid3.csq $CD_DBDIR/allcmid.csq");
	$mv3=system ("/bin/mv $CD_DBDIR/allcmid3.nhd $CD_DBDIR/allcmid.nhd");
        $mv4=system ("/bin/mv $CD_DBDIR/allcmid3.ntb $CD_DBDIR/allcmid.ntb");
	system ("/bin/touch $CD_DBDIR/allcmid");
	system ("/bin/touch $CD_DBDIR/allcmid.csq");
	system ("/bin/touch $CD_DBDIR/allcmid.nhd");
	system ("/bin/touch $CD_DBDIR/allcmid.ntb");
	$tot=$mv1+$mv2+$mv3+$mv4;
	$now = &gettime;
	if ($tot != 0) {
	    print LOG "\n# [$now] *** Warning - new database move failed with sysvalue $tot ***\n";
	    open(MAIL, "| Mail -s \"Maintain_FTP_site: new db move failed \" wormpub\@sanger.ac.uk");
	    print MAIL "\n New database move failed with sysvalue $sysvalue\n";
	    close MAIL;  
	    return;
	} else {
	    print LOG "\n# [$now] New database move successful\n";
	    $number = `grep \'\>\' $CD_DBDIR/allcmid \| wc \-l`;
	    print LOG "\n# [$now] Number of entries for allcmid: $number\n";
	    system ("/bin/cp $CD_DBDIR/allcmid $CE_FTP_DIR/ALL_COSMIDS/allcmid");
	    system ("/bin/gzip $FTP_DIR/ALL_COSMIDS/allcmid");
	    $now = &gettime;
	    print LOG "\n# [$now] copied and gzipped allcmid \n";
	}
    }
    return;
}


#------------------------------
# Email the log file to wormpub
#
sub email_log {
    open(MAIL, "| Mail -s \"Maintain_FTP_Site log $$\" wormpub\@sanger.ac.uk");
    open (INLOG,"/bin/cat $log |");
    while (<INLOG>) {
	print MAIL $_;
    }
    close INLOG;
    close MAIL;
    unlink $log;
    return;
}









#!/usr/local/bin/perl
#
# make_FTP_wormpep
# v 0.1
#
# dl
#
# Usage : make_FTP_wormpep [-options]
#
# A PERL wrapper to automate the process of building the wormpep FTP site.
#

# v0.1
# 000910 ag3: introduced arguments
# 001005 ag3: introduced check on copy over FTP site
# 001004 ag3: fixed symlinks
# 000927 dl : PP version

#################################################################################
# variables                                                                     #
#################################################################################

$|=1;
use IO::Handle;
use Getopt::Long;
require "/nfs/disk100/wormpub/analysis/scripts/babel.pl";

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainer = "dl1\@sanger.ac.uk";
my $rundate = `date +%y%m%d`; chomp $rundate;
my $runtime = `date +%H:%M:%S`; chomp $runtime;
my $logfile = "/wormsrv2/logs/make_FTP_wormpep.$rundate.$$";
my $version = &get_script_version(make_FTP_wormpep);

 ##############################
 # deal with command line     #
 ##############################

my $release = "";   # wormpep release number 
my $debug   = "";   # Verbose switch 
my $help    = "";   # Help/Usage page

GetOptions (
	    "r=s"  => \$release,
	    "h"    => \$help,
	    "d"    => \$debug,
	    );

&usage if ($help);

my $old_release  = $release - 1;                # [Int]  Internally generated release number ($release -1)
my $wp_release = "wormpep"."$release";
my $wp_old_release = "old_wormpep"."$old_release";

 ##############################
 # paths for I/O files        #
 ##############################

my $sourcedir = "/wormsrv2/WORMPEP/$wp_release";        # [Text] Directory of the latest Wormpep release
my $targetdir =  glob ("~ftp/pub/databases/wormpep");   # [Text] Directory in which to build the new release

 ##############################
 # open logfile               #
 ##############################

open (LOGFILE,">$logfile");
LOGFILE->autoflush;

print LOGFILE "# make_FTP_wormpep\n#\n";
print LOGFILE "# version             : $version\n";
print LOGFILE "# run details         : $rundate $runtime\n";
print LOGFILE "# Source directory    : $sourcedir \n";
print LOGFILE "# Target directory    : $targetdir\n";
print LOGFILE "# Wormpep release No. : $release\n";
print LOGFILE "\n";

 ##############################
 # error trapping             #
 ##############################

if (length($release) == 0) {
    print LOGFILE "No release number given\n\n";
    close LOGFILE;
    &mail;
    exit (0);
}

#################################################################################
# Main Loop                                                                     #
#################################################################################

 # make a new directory for the old wormpep release

if (-e "$targetdir/$wp_old_release") {
    print LOGFILE "'$targetdir/$wp_old_release' directory already exists\n";
    close LOGFILE;
    &mail;
    exit (0);
}

system "mkdir $targetdir/$wp_old_release";
print LOGFILE "make a directory for the old wormpep release : '$targetdir/$wp_old_release'\n\n";

 # move the actual files to old_ directory

system "mv $targetdir/wormpep.accession $targetdir/$wp_old_release/wormpep.accession$old_release";
print LOGFILE "move & rename wormpep.accession => wormpep.accession$old_release\n";

system "mv $targetdir/wormpep.diff $targetdir/$wp_old_release/wormpep.diff$old_release";
print LOGFILE "move & rename wormpep.diff => wormpep.diff$old_release\n";

system "mv $targetdir/wormpep.dna $targetdir/$wp_old_release/wormpep.dna$old_release";
print LOGFILE "move & rename wormpep.dna => wormpep.dna$old_release\n";

system "mv $targetdir/wormpep.history $targetdir/$wp_old_release/wormpep.history$old_release";
print LOGFILE "move & rename wormpep.history => wormpep.history$old_release\n";

system "mv $targetdir/wormpep.table $targetdir/$wp_old_release/wormpep.table$old_release";
print LOGFILE "move & rename wormpep.table => wormpep.table$old_release\n";

system "mv $targetdir/wormpep${old_release} $targetdir/$wp_old_release/";
print LOGFILE "move wormpep${old_release} =>  wormpep${old_release}\n";

system "mv $targetdir/wp.fasta $targetdir/$wp_old_release/wp.fasta$old_release";
print LOGFILE "move & rename wp.fasta => wp.fasta$old_release\n\n";

 # copy the wormpep release files across

system "cp $sourcedir/wormpep.accession$release $targetdir/wormpep.accession";
&CheckSize("$sourcedir/wormpep.accession$release","$targetdir/wormpep.accession");
print LOGFILE "move & rename wormpep.accession$release => wormpep.accession\n";

system "cp $sourcedir/wormpep.diff$release $targetdir/wormpep.diff";
&CheckSize("$sourcedir/wormpep.diff$release","$targetdir/wormpep.diff");
print LOGFILE "move & rename wormpep.diff$release => wormpep.diff\n";

system "cp $sourcedir/wormpep.dna$release $targetdir/wormpep.dna";
&CheckSize("$sourcedir/wormpep.dna$release","$targetdir/wormpep.dna");
print LOGFILE "move & rename wormpep.dna$release => wormpep.dna\n";

system "cp $sourcedir/wormpep.history$release $targetdir/wormpep.history";
&CheckSize("$sourcedir/wormpep.history$release","$targetdir/wormpep.history");
print LOGFILE "move & rename wormpep.history$release => wormpep.history\n";

system "cp $sourcedir/wormpep.table$release $targetdir/wormpep.table";
&CheckSize("$sourcedir/wormpep.table$release","$targetdir/wormpep.table");
print LOGFILE "move & rename wormpep.table$release => wormpep.table\n";

system "cp $sourcedir/wormpep$release $targetdir/wormpep${release}";
&CheckSize("$sourcedir/wormpep$release","$targetdir/wormpep${release}");
print LOGFILE "move wormpep$release =>  wormpep$release\n";

system "cp $sourcedir/wp.fasta$release $targetdir/wp.fasta";
&CheckSize("$sourcedir/wp.fasta$release","$targetdir/wp.fasta");
print LOGFILE "move & rename wp.fasta$release => wp.fasta\n\n";

 # delete the old symbolic link and make the new one

system "cd $targetdir; ln -fs wormpep$release wormpep";
system "cd $targetdir; ln -fs $wp_old_release/wormpep$old_release wormpep.prev";
print LOGFILE "deleted the old sym_link and created the new one\n\n";

close LOGFILE;
&mail;
exit (0);


#################################################################################
# Subroutines                                                                   #
#################################################################################

sub CheckSize {
    my ($first,$second)=@_;
    $F_SIZE = (stat("$first"))[7];
    $S_SIZE = (stat("$second"))[7];
    if ($F_SIZE != $S_SIZE) {
	print LOGFILE "*Error - file $first not transferred regularly - please check\n";
	close LOGFILE;
	&mail;
	die();
    } 
    else {
	print LOGFILE "Copied filename: $first SRC: $F_SIZE TGT: $S_SIZE\n";
    }
}

 ##############################
 # mail $maintainer report    #
 ##############################
sub mail {
    open (OUTLOG,  "|/usr/bin/mailx -s \"WormBase Report: make_FTP_wormpep\" $maintainer ");
    open (READLOG, "<$logfile");
    while (<READLOG>) {
	print OUTLOG "$_";
    }
    close READLOG;
    close OUTLOG;
}


#######################################################################
# Prints help and disappears                                          #
#######################################################################

sub usage {
    exec ('perldoc',$0);
    exit(0);
}

__END__
=pod

=head2   NAME - make_FTP_wormpep release

=head1 USAGE

=over 4

=item make_FTP_wormpep [-options]

=back

A PERL wrapper to automate the process of building the wormpep FTP site

update_totals mandatory arguments:

=over 4

=item -r, wormpep release number

=back

update_totals OPTIONAL arguments:

=over 4

=item -h, Help

=item -d, Verbose debug mode

=back

=head1 CRON

=over 4

=item No, (part of the WS WormBase build procedure)

=back

=head1 INPUT

The following files are required:

=over 4

=item /wormsrv2/WORMPEP/wormpepNN, directory with full wormpep release

=back

=head1 OUTPUT

The following files are produced:

=over 4

=item /nfs/disk69/ftp/pub/wormpep/, wormpep directory on the FTP site

=back

=head1 REPORT LOGGING

The script writes a logfile which is both written to disk and mailed to the maintainer

=head1 AUTHOR

=over 4

=item Daniel Lawson (dl1@sanger.ac.uk)

=back

=head1 VERSIONS

=over 4

=item v0.2

=back

001107 : dl  : Added some more error-trapping and modified logging procedure

=over 3

=item v0.1

=back

001006 : dl  : Complete rewrite

001005 : ag3 : introduced arguments

001005 : ag3 : introduced check on copy over FTP site

001004 : ag3 : fixed symlinks

000927 : dl  : PP version

=cut


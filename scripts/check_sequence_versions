#!/usr/local/bin/perl
#
# check_sequence_versions
# v 0.1
#
# dl
#
# Usage : check_sequence_versions [-options]
# Opens a socket to the EBI SRS server and polls
#

$| = 1;

use IO::Handle;
use Getopt::Std;
use Socket;
use Wormbase;

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainer = "dl1\@sanger.ac.uk";
my $rundate    = `date +%y%m%d`; chomp $rundate;
my $runtime    = `date +%H:%M:%S`; chomp $runtime;
my $logfile    = "/wormsrv2/logs/check_sequence_versions.$rundate.$$";

 ##############################
 # Paths for I/O files        #
 ##############################

$ENV{'ACEDB'}="/wormsrv1/camace";    
my $tace = &tace;
my $command=<<EOF;
Table-Maker -f /wormsrv1/camace/wquery/sequence_versions.def 
quit
EOF

 ##############################
 # command-line options       #
 ##############################

$opt_h = "";   # Help/Usage page

getopts ('h');
&usage if ($opt_h);

 ##############################
 # open logfile               #
 ##############################

system ("/bin/touch $logfile");
open (LOGFILE,">>$logfile");
LOGFILE->autoflush;

print LOGFILE "# check_sequence_versions\n#\n";
print LOGFILE "# version             : $version\n";
print LOGFILE "# run details         : $rundate $runtime\n";
print LOGFILE "\n";

 ##################################################
 # Main Loop - run tablemaker query on camace     #
 ##################################################

my $continue;
my $verbose;


open (ACE,  ">/wormsrv2/logs/sequence_versions_update.$rundate.ace");
open (LIST, "echo '$command' | $tace  | ");
while (<LIST>) {
    if (/acedb>/) {$continue = 1;next;}
    next until ($continue);
    chomp;
    s/\"//g;
    print "WormBase $_\n" if ($verbose);
    ($clone,$acc,$ver) = (/^(\S+)\s+\S+\s+(\S+)\.(\d+)/);
    print LOGFILE "Sequence : $clone  \t[$acc|$ver]\n";

    open (GETZ, "/usr/local/pubseq/bin/getz -f \"sv\" \'([EMBLNEW-acc:$acc]) | (([EMBL-acc:$acc])!(EMBL<EMBLNEW))\' | ");
    while (<GETZ>) {
	chomp;
	print "EMBL $_\n" if ($verbose);
	if (/^SV\s+(\S+)\.(\d+)/) {
	    ($EM_acc,$EM_seqver) = ($1,$2);
	    print LOGFILE "Sequence version $EM_seqver\n";
	}
	if (/^DT\s+(\S+)\s+\(Rel. (\d+)\, Last updated\, Version (\d+)\)/) {
	    ($EM_rel,$EM_ver,$EM_sub) = ($2,$3,$1);
	    print LOGFILE "Latest version : Rel. $EM_rel Ver. $EM_ver [$EM_sub] \n";

	    # Updated sequence version
	    if ($EM_seqver != $ver) {
		print ACE "\nSequence : \"$clone\"\n";
		print ACE "Database EMBL $id $acc $EM_seqver\n";
	    }

	}
	
    }
    print LOGFILE "\n";
}

close LOGFILE;
close ACE;

###############################
# Mail log to curator         #
###############################

&mail_maintainer("camace report: check_sequence_versions",$maintainer,$logfile);

###############################
# hasta luego                 #
###############################

exit(0);


###################################################
# Errors and pod documentation                    #
###################################################

sub error {
    my $error = shift;
    # Error 1 - date directory (opt_r) is of incorrect length 
    if ($error == 1) {
    }
    exit(1);
}

sub usage {
    system ('perldoc',$0);
    exit;	
}

__END__


=pod

=head1 NAME - check_sequence_versions

=head2 USAGE

check_sequence_versions arguments:

=over 4

=item *

none

=back

=cut


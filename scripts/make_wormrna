#!/usr/local/bin/perl
#
# make_wormrna
# v 1.0
# 
# Usage : make_wormrna -r <release_number>
#
# Builds a wormrna data set from the current autoace database
#

# v1.0
# 011101 :  dl : original


#################################################################################
# variables                                                                     #
#################################################################################

$| = 1;
#use strict;
use vars qw($opt_r $opt_d $opt_h);
use Getopt::Std;
use IO::Handle;
use Ace;
use Socket;
use lib '/wormsrv2/scripts/';
use Wormbase;

    
 #######################################
 # Script variables (run)              #
 #######################################

my $maintainer = "dl1\@sanger.ac.uk, krb\@sanger.ac.uk, kj2\@sanger.ac.uk";
my $rundate    = `date +%y%m%d`; chomp $rundate;
my $runtime    = `date +%H:%M:%S`; chomp $runtime;
my $version    = get_cvs_version($0);

 #######################################
 # command-line options                #
 #######################################

getopts ('dhr:');

 #######################################
 # sanity checks for the input         #
 #######################################

&error(0) if ($opt_h);
&error(1) if ((length $opt_r) == 0);
&error(2) if (($opt_r =~ /\D+/));

 #######################################
 # release data                        #
 #######################################

my $release = $opt_r; 
my $old_release = $release-1;
my $debug = $opt_d;

if ($debug) {$maintainer = "dl1\@sanger.ac.uk";}

 ########################################################################
 # files in wormpep directory
 #   wp.fasta            all sequences ever assigned (wpid and sequence)
 #   wormpep.table       dotname (primary), wpid, locus, brief_id, lab origin
 #   wormpep             current proteins with info from wormpep.table
 #   wormpep.accession   wpid, if active all associated dotnames, if duplicate link to active wpid
 #   wormpep.history     dotname, wpid, start (version Nr.), stop (version Nr.) if inactive
 ########################################################################
 # set variables

my $dbdir = glob "/wormsrv2/autoace";
my $wrdir = glob "/wormsrv2/WORMRNA/wormrna$old_release";
my $new_wrdir = glob "/wormsrv2/WORMRNA/wormrna$release";
#my $tace = "/nfs/disk100/acedb/RELEASE.DEVELOPMENT/bin.ALPHA_4/tace";

# tmp version to use to get around Smap/Schild problems
 my $tace = "/nfs/griffin2/rd/acedb/bin.ALPHA_4/tace";

$ENV{'ACEDB'} = $dbdir;

 ########################################
 # Open logfile                         #
 ########################################

my $log="/wormsrv2/WORMRNA/make_wormrna.$release.$rundate.$$";
#my $log="/wormsrv2/logs/make_wormrna.$release.$rundate.$$";
open (LOG,">$log");
LOG->autoflush();

print LOG "# make_wormrna\n";
print LOG "# version        : $version\n";
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";
print LOG "Wormpep version  : wormpep$opt_r\n\n";
print LOG "=============================================\n";
print LOG "\n";

 ##################################################
 # Make new directory for current release         #
 ##################################################

mkdir ("$new_wrdir" , 0755) || &error(3);                   # die "cannot create the $new_wrdir directory\n";

print LOG "# $runtime : making wormrna$release for $rundate\n\n";

 ###############################################
 # retrieve the desired sequence objects (CDS) #
 ###############################################

my $runtime = `date +%H:%M:%S`; chomp $runtime;
print LOG "# $runtime : connect to primary database\n";

my $db = Ace->connect (-path => $dbdir, -program => $tace) 
    || &error(6); # die "cannot connect to autoace\n";
my @dotnames_1 = $db->fetch (-query => 'FIND Genome_sequence ; FOLLOW Subsequence ; where (Method = rna) OR (Method=tRNAscan-SE-1.11)');
my @dotnames_2 = $db->fetch (-query => 'FIND Sequence *LINK* ; FOLLOW Subsequence ; where (Method = rna) OR (Method=tRNAscan-SE-1.11)');

push (@dotnames_1 , @dotnames_2);
@dotnames_1 = sort @dotnames_1;

my $runtime = `date +%H:%M:%S`; chomp $runtime;
print LOG "=> " . scalar(@dotnames_1) . " RNA sequences\n";
print LOG "=> " . scalar(@dotnames_2) . " of which are attached to LINK objects\n";
print LOG "# $runtime : finished connection to database\n\n";

 ###########################################################################
 # get the dna and peptide sequence, write a dna.fasta file,
 # and map the peptide sequences onto wormpep, deleting Peptides containing an X or a *,
 # and giving a new wpid if necessary, creating %dot2num
 ###########################################################################
 
my $runtime = `date +%H:%M:%S`; chomp $runtime;
print LOG "# $runtime : write wormrna.dna file\n\n";

my $obj = "";

open (DNA , ">$new_wrdir/wormrna.dna$release") || &error(7); # die "cannot create $new_wrdir/wormrna.dna$release\n";
my (%dot2num , @dotnames , @c_dotnames);
foreach my $dot (@dotnames_1) {
    
#    unless (($dot =~ /^[A-Z0-9]+\.[1-9]\d?[A-Za-z]?$/) || ($dot =~ /^[A-Z0-9]+\.[A-Za-z]{1,2}$/)) {
#        print LOG "the sequence $dot has an incorrect dotname\n";
#    }
    undef (my $dna);
    undef (my $locus);
    undef (my $brief_id);
    undef (my $method);

    
    print LOG "Extracting RNA sequence $dot\n";
    $obj = $db->fetch(Sequence=>"$dot");

    $locus = $obj->Locus_genomic_seq(1);
    if ((!defined ($locus)) || ($locus eq "")) {
        print LOG "No locus designation for $dot\n";
	undef ($locus);
    }
    
    $brief_id = $obj->Brief_identification(1);
    if ((!defined ($brief_id)) || ($brief_id eq "")) {
        print LOG "No Brief_id for $dot\n";
	undef ($brief_id);
    }
    
    $dna = $obj->asDNA();
    if ((!defined ($dna)) || ($dna eq "")) {
        print LOG "cannot extract dna sequence for $dot\n";
    }
    $dna =~ /^>(\S+)\s+(\w.*)/s ; my $dseq = $2 ; $dseq =~ tr/a-z/A-Z/ ; $dseq =~ tr /T/U/ ; $dseq =~ s/\s//g;

#    if ($dseq =~ /[^ACGT]/) {
#	if ($dseq =~ /\-/) {                                  # - seems to indicate that e.g the subsequence
#	    print LOG "the dna sequence $dot contains a -\n"; # coordinates differ from the last exon coordinate
#	} elsif ($dseq =~ /N/) {
#            print LOG "the dna sequence $dot contains a N\n";
#	  } else {                         
#	      print LOG "the dna sequence $dot contains a non ACGT character different from - and N\n";  
#	    }
#    }
    
    $rseq = &reformat($dseq);
    if (defined $locus) {
	print DNA ">$dot $brief_id locus:$locus\n$rseq";
    }
    else {
	print DNA ">$dot $brief_id\n$rseq";
    }
   
    $obj->DESTROY();
    
}   

close DNA;
chmod (0444 , "$new_wrdir/wormrna.dna$release") || print LOG "cannot chmod $new_wrdir/wormrna.dna$release\n";

my $runtime = `date +%H:%M:%S`; chomp $runtime;
print LOG "# $runtime : finished writing wormrna.dna file\n\n";

 ##############################
 # mail $maintainer report    #
 ##############################

close LOG;

open (mailLOG, "|/usr/bin/mailx -s \"WormBase Report: make_wormrna\" $maintainer ");
open (readLOG, "<$log");
while (<readLOG>) {
    print mailLOG $_;
}
close readLOG;
close mailLOG;

 ##############################
 # hasta luego                #
 ##############################

exit(0);

#################################################################################
# Subroutines                                                                   #
#################################################################################


sub reformat {
    my $in_string = shift;
    my $out_string = "";

    my $string_len = length ($in_string);
    my $lines = int ($string_len / 60) ;

    for ($i = 0; $i <= $lines; $i++) {
	$out_string = $out_string . substr($in_string,($i*60),60) . "\n";
    }
    return ($out_string);
}


 ##########################
 # run details            #
 ##########################

sub run_details {
    print "# make_wormpep\n";
    print "# version        : $version\n";
    print "# run details    : $rundate $runtime\n";
    print "\n";
    print "Wormpep version  : wormpep$opt_r\n";
    print "Primary database : $dbdir\n\n";

    if ($opt_d) {
	print "Usage : make_wormpep [-options]\n";
	print "=============================================\n";
	print " -r <int>     : release version number\n";
	print " -h           : help pages   \n";
	print " -d           : verbose (debug) mode\n";
	print "=============================================\n";
	print "\n";
    }
} # end of sub 'run details'

 ##########################
 # errors from the script #
 ##########################

sub error {
    my $error = shift;
    # Error 0 - help page
    if ($error == 0) {
        exec ('perldoc',$0);
        exit (0);
    }
    # Error  1 - no wormpep release number
    elsif ($error == 1) {
        # No wormpep release number file
	&run_details;
        print "=> No wormpep release number supplied\n\n";
        exit(0);
    }
    # Error  2 - invalid wormpep release number
    elsif ($error == 2) {
        # Invalid wormpep release number file
        &run_details;
        print "=> Invalid wormpep release number supplied.\n=> Release number must be an interger (e.g. 30)\n\n";
	exit(0);
    }
    # Error  3 - cannot create new wormpep directory 
    elsif ($error == 3) {
        &run_details;
	print "=> Failed to create a new directory for wormpep release wormpep$release\n\n";
        $runtime = `date +%H:%M:%S`; chomp $runtime;
	print LOG "=> Failed to create a new directory for wormpep release wormpep$release\n\n";
	print LOG "=> Exiting at $rundate $runtime\n";
        close LOG;
        &mail_maintainer("WormBase Report: make_wormpep",$maintainer,$log);
    }
    # Error  4 - cannot open new wp.log file 
    elsif ($error == 4) {
        &run_details;
        print "=> Failed to create a new wp.log for wormpep release wormpep$release\n\n";
        $runtime = `date +%H:%M:%S`; chomp $runtime;
        print LOG "=> Exiting at $rundate $runtime\n";
        close LOG;
        &mail_maintainer("WormBase Report: make_wormpep",$maintainer,$log);
    }
    # Error  5 - cannot open old wp.fasta file 
    elsif ($error == 5) {
        &run_details;
        print "=> Failed to open the old wp.fasta for wormpep release wormpep$old_release\n\n";
        $runtime = `date +%H:%M:%S`; chomp $runtime;
        print LOG "=> Exiting at $rundate $runtime\n";
        close LOG;
        &mail_maintainer("WormBase Report: make_wormpep",$maintainer,$log);
    }
    # Error  6 - cannot connect to ACEDB database 
    elsif ($error == 6) {
        &run_details;
        print "=> Failed to connect to primary database 'dbdir'\n\n";
        $runtime = `date +%H:%M:%S`; chomp $runtime;
        print LOG "=> Exiting at $rundate $runtime\n";
        close LOG;
        &mail_maintainer("WormBase Report: make_wormpep",$maintainer,$log);
    }
    # Error  7 - cannot open new wp.log file 
    elsif ($error == 7) {
        &run_details;
        print "=> Failed to create a new wormpep.dna for wormpep release wormpep$release\n\n";
        $runtime = `date +%H:%M:%S`; chomp $runtime;
        print LOG "=> Exiting at $rundate $runtime\n";
        close LOG;
        &mail_maintainer("WormBase Report: make_wormpep",$maintainer,$log);
    }

    exit(1);
} # end of sub 'error'



__END__

=pod

=head2   NAME - make_wormpep


=head1 USAGE

=over 4

=item make_wormpep [-options]

=back

make_wormpep will generate a peptide data set from the autoace
database directory.

autoace_minder mandatory arguments:

=over 4

=item -r, release number

=back

autoace_minder OPTIONAL arguments:

=over 4

=item -h, Help page

=item -d, Verbose/Debug mode

=back

=head1 EXAMPLES:

=over 4

=item make_wormpep -r 40

=back

Creates a new wormpep data set in the (new) /wormsrv2/WORMPEP/wormpep40 directory

=cut





















#!/usr/local/bin/perl
#
# Maintain_EMBL_in_FTP_site.pl
# v2.0
#
# dl
#
# uses AcePerl to make a list of finished projects and then extracts the latest
# EMBL flatfiles for these entries. These are then copied to the FTP site.
#
#
################################################################################
# 000124 dl : complete re-write of old sjj script
# 000215 ag3: added interpolated_gMap tag to chromosome sort
################################################################################

use Ace;
use IPC::Open2;
use POSIX qw(:signal_h :errno_h :sys_wait_h);
use IO::Handle;
$|=1;

# Avoid filling process table with zombies
$SIG{CHLD} = \&REAPER;
sub REAPER {
  my $pid;
  $pid=waitpid(-1,&WNOHANG);
  $SIG{CHLD}=\&REAPER;
}

## Use replicated cgc server on wormsrv1 port 210203
#my $aceclient = "/nfs/disk100/acedb/RELEASE.SUPPORTED/bin.ALPHA_4/aceclient";
#my $cgcace = "$aceclient wormsrv1 -port 210203";

my $ftppath = "/nfs/disk69/ftp/pub2/wormbase/sequences/EMBL_FORMAT/";
my $autoace = "/nfs/disk100/acedb/RELEASE.SUPPORTED/bin.ALPHA_4/tace /wormsrv2/autoace";

#Retrieve the hash for associating chromosome<>clone
my %CHROME=&MapChromes;

$db = Ace->connect(-path=>'/wormsrv2/autoace') or die ("Could not connect to autoace");
print "Database connection successful\n";

########################################
# Main Loop                            #
########################################

$i = $db->fetch_many(Genome_sequence, "*");  
while ($obj = $i->next) {

    undef $mapping;
    $project = $obj;
    $sequence = ${project};
    $mapping = $CHROME{$sequence};
    chomp $mapping;

########################################
# DNA                                  #
########################################

    $dna = $obj->DNA;
    if ($dna eq "") {
	next;
    }

########################################
# Species                              #
########################################
    
    $species = $obj->Species;
    if ($species ne "Caenorhabditis elegans") {
	next;
    }

########################################
# Database information                 #
########################################
    
    ($tag1,$tag2,$db,$db_ID,$db_AC) = $obj->DB_info->row();
    length($db_AC)==0 && do {print "$sequence has no AC\n"; next;};

########################################
# extract EMBL entry & write to FTP    #
########################################

    print "getting entry $db_ID [$db_AC]\n";
open(SEQUENCE,"getz -e  \"([EMBLNEW-acc:$db_AC]) \| (([EMBL-acc:$db_AC]) \! (EMBL < EMBLNEW))\" |");

if (length($mapping)>0) {
  print "Sequence $sequence mapping $mapping\n";
  open(OUTPUT2, ">$ftppath/$mapping/$sequence.embl");
}
open(OUTPUT, ">$ftppath/UNSORTED/$sequence.embl");
while (<sequence>) {
  print OUTPUT $_;
  print OUTPUT2 $_;
}
close OUTPUT;
close OUTPUT2;
close SEQUENCE;
}

exit;


#----------------------------------------------
# Get the chromosome locn. of a clone from the 
# maintained autoace database using the 
# "Interpolated_gMap" tag. 

sub MapChromes {
  my ($command);
  my (%CHROME);
  undef %CHROME;
  my ($map);
  
  $command=<<EOF;
find genome_sequence *
show -a Interpolated_gMap
quit
EOF
  
  open2(READ,WRITE,$autoace) or die ("Could not open autoace\n"); 
  print "Interpolating sequence <> map .. \n";
  print WRITE $command;
  close WRITE;
  while (<READ>) {
    if (/^Sequence\s+:\s+\"(\w+)\"/)  {
      $sequence=$1;
    }
    if (/^Interpolated_gMap\s+\"(\S+)\"\s+/)  {
      $map=$1;
      $CHROME{$sequence}=$map;
    }
  }
  close READ;
  return %CHROME;
}


__END__

=head1 NAME - Maintain_EMBL_in_FTP_site.pl

=head1 SYNOPSIS

    Maintain_EMBL_in_FTP_site.pl retrieves all Genome_sequence objects from autoace which
    have DNA and are from C.elegans. These are copied to the FTP site and then sorted by
    chromosome, besides being placed in the UNSORTED directory







#!/usr/local/bin/perl
#
# camcheck
# v 0.4
#
# Cronjob integrity check controls for camace database.
#
# Usage: camcheck
#
# [    ag3] finished, unfinished, finished but not annotated
# [ag3 ms2] check for N's and bad chars
# [    ag3] compares date and sequences db <> directory
# [ms2 ag3] correct gene structure ?
# 000717 dl1 : put a patch to solve the AcePerl bug regarding fetching large datasets 
#            : which involves a seperate tace call for some date_dir
#            : !! This can come out when AcePerl is updated to a patched newer version !!
#

# v0.3
# 010316 : dl  : Added highlight in red for SUPERLINK child problems

# v0.4
# 010618 : krb : Added a call to the check_predicted_genes.pl script to check all
# predicted genes for a number of possible errors

#####################################################################################################


#################################################################################
# variables                                                                     #
#################################################################################

$|=1;
BEGIN {
  unshift (@INC,"/nfs/disk92/PerlSource/Bioperl/Releases/bioperl-0.05");
}
use Bio::Seq;
use IO::Handle;
use Getopt::Std;
use Ace;
require "/nfs/disk100/wormpub/analysis/scripts/babel.pl";


 ##############################
 # Script variables (run)     #
 ##############################

my $maintainer = "dl1\@sanger.ac.uk";
my $rundate = `date +%y%m%d`; chomp $rundate;
my $runtime = `date +%H:%M:%S`; chomp $runtime;
my $version = &get_script_version(camcheck);

 ##############################
 # command-line options       #
 ##############################

$opt_d="";   # Verbose debug mode
$opt_h="";   # Help/Usage page

getopts ('hd');
&usage(0) if ($opt_h);
my $debug = $opt_d;

 ##############################
 # Paths etc                  #
 ##############################

my $clonepath="/nfs/disk100/wormpub/analysis/cosmids";
my $clonefile="$clonepath"."/current.versions";
my $tace = glob("~acedb/RELEASE.2001_04_26.BUILD/bin.ALPHA_4/tace");   # tace executable path
my $dbpath = "/wormsrv2/camace";                                       # Database path

 ########################################
 # Open logfile                         #
 ########################################

my $log="/wormsrv2/logs/camcheck.$rundate";

open (LOG,">$log");
LOG->autoflush();


print LOG "# camcheck\n";     
print LOG "# version        : $version\n";
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";

 ########################################
 # Connect with acedb server            #
 ########################################

my $db = Ace->connect(-path=>$dbpath,
		      -program =>$tace) || do { print "Connection failure: ",Ace->error; die();};


print LOG "CamCheck run STARTED at $runtime\n\n";

 #####################################################################
 # Do the following for every sequence in current.cosmid             #
 #####################################################################

open (CLONEFILE,"<$clonefile");

while($line=<CLONEFILE>) {
    
    undef ($seq_file);
    undef ($seq_ace);
    chomp ($line);
    $line =~ m/(\w+)\/(\w+)/;
    $clone = $1;
    $dir_date = $2;
 
    print "[$clone|$dir_date]    \t" if ($debug);

 ######################################################################
 # Retrieve the first sequence and date FROM DIRECTORY                #
 ######################################################################
    
    $seqpath = "$clonepath"."/"."$line"."/"."$clone.seq";

    open SEQPATH,"<$seqpath" || do {print LOG "$clone  \t:NOT_IN_DIRECTORY $seqpath\n"; next; };
    while ($line1=<SEQPATH>) {  
	chomp($line1);
	$seq_file.="$line1";
    }
    close SEQPATH;
    $seq_file =~ tr/a-z/A-Z/;
    $seq_file =~ s/\>\w+//;
    $seq_file =~ s/\W+//mg;
    if ($seq_file =~ /[^ACGTUMRWSYKVHDBXN]/img) {
	print LOG  "DIRSEQ for $clone contains bad characters\n";
	$seq_file =~ s/[^ACGTUMRWSYKVHDBXN]//img;
    }

 ######################################################################
 # Retrieve the second sequence and date FROM ACEDB                   #
 ######################################################################

    $obj = $db->fetch(Sequence=>$clone);
    if (!defined ($obj)) {
	print LOG "Could not fetch sequence $clone\n";
	next;
    }

  #####################################################################
  # skipping the non-canonical genomic sequences                      #
  #####################################################################
	
    $canonical=$obj->Properties(1);
    if ($canonical !~ /Genomic_canonical/) {
	print LOG "Not Genomic_canonical sequence $clone\n";
	next;
    }
  
  #####################################################################
  # Push the sequence as string in $seq2                              #
  #####################################################################
    
    $seq_ace=$obj->asDNA();
    if (!$seq_ace) {
	print LOG "$clone NOT_IN_ACEDB $clone\n" ;
	next;
    }
    $seq_ace =~ s/\>\w+//mg;
    $seq_ace =~ tr/a-z/A-Z/;
    $seq_ace =~ s/\W+//mg;
    
	
 ######################################################################
 # Iterative checks for each clone                                    #
 ######################################################################

 ######################################################################
 # ?Sequence is Finished but not annotated                            #
 ######################################################################
    
    print " [FINISHED/ANNOTATED" if ($debug);
    &finannot($clone);

 ######################################################################
 # Check for N's in FINISHED sequences                                #
 ######################################################################
	
    print " | N's" if ($debug);
    &checkchars;

 ######################################################################
 # Compare date and checksum                                          #
 ######################################################################

    print " | DATE" if ($debug);
    &dateseq;

    print " | CHKSUM" if ($debug);
    &chksum;

 ######################################################################
 # Check correctness of gene structure                                #
 ######################################################################


    print " | CDS_coords" if ($debug);
    &checkgenes;

 ######################################################################
 # last check complete, tidy up                                       #
 ######################################################################

    print "]\n" if ($debug);

 ######################################################################
 # Get rid of this sequence object                                    #
 ######################################################################

    $obj->DESTROY();
}

close(CLONEFILE);


########################
# Check predicted genes
########################

# need to close and reopen existing log filehandle either side of system call
close(LOG);

my $system_return = system("/wormsrv2/scripts/check_predicted_genes.pl $dbpath $log");
warn "check_predicted_genes.pl did not run correctly: $?" if ($?);

# now opened in append mode
open (LOG,">>$log");
LOG->autoflush();

##################
# LINK objects 
###################

$i = $db->fetch_many(-query=> 'find Sequence "*LINK*"');  
while ($obj = $i->next) {
    my $link = $obj;
    
   
    print "[$link]    \t" if ($debug);
    print " | CDS_coords" if ($debug);
    &checkgenes;
    print "]\n" if ($debug);
}

$runtime = `date +%H:%M:%S`; chomp $runtime;
print LOG "\nCamCheck run ENDED at $runtime\n\n";

close LOG;

 ##############################
 # mail $maintainer report    #
 ##############################

open (OUTLOG,"|/usr/bin/mailx -s camcheck_report $maintainer ");
open (READLOG, "<$log");
while (<READLOG>) {
    print OUTLOG "$_";
}
close READLOG;
close OUTLOG;

 ##############################
 # Write log to wormpub intweb
 ##############################

&writehtml;


 ##############################
 # hasta luego                #
 ##############################

exit(0);

########################################################################################
####################################   Subroutines   ###################################
########################################################################################

####################################
# Coherency check between directory and database
####################################

sub dateseq {

    $ace_date = $obj->Date_directory(1);
        
    if ($dir_date != $ace_date) {
	print LOG "DATE mismatch in $clone; dir $dir_date acedb $ace_date\n";
    }
} 

   
####################################
# Coherency check between directory and database
####################################

sub chksum {

    $bioseq1 = Bio::Seq->new(-seq=>$seq_file,-ffmt=>'Fasta',-type=>'Dna',);
    $bioseq2 = Bio::Seq->new(-seq=>$seq_ace,-ffmt=>'Fasta',-type=>'Dna',);
    $chk1 = $bioseq1->GCG_checksum;
    $chk2 = $bioseq2->GCG_checksum;
    if ($chk1 != $chk2) {
	print LOG "SEQUENCE mismatch in $clone; dir $chk1 acedb $chk2\t";
	print LOG "=> dir: " . length ($seq_file) . " ace: " . length ($seq_ace) . "\n";

    }
    undef $bioseq1;
    undef $bioseq2;
    
}


####################################
# Finished / Annotated
####################################

sub finannot {
    
    my $clone = shift;
    my $finished  = $obj->Finished(1);
    my $annotated = $obj->Annotated(1);
    if (!$finished) {
	print LOG "NOT_FINISHED $clone\n";
    }    
    if (($finished)&&(!$annotated)){
	print LOG "FINISHED_BUT_NOT_ANNOTATED $clone\n";
    }
    undef $finished;
    undef $annotated;
}

#######################################################################
# Odd chars and N's in  finished sequences                            #
#######################################################################

sub checkchars {
    
    if ($seq_ace =~ /[^ACGTUMRWSYKVHDBXN]/img) {
	print LOG "ACEDBSEQ for $clone contains bad characters\n";
	$seq_ace =~s/[^ACGTUMRWSYKVHDBXN]//img;
    }
    if (($seq_ace =~ /N/g) && ($finished)) { 
	print LOG "ACEDBSEQ FINISHED SEQUENCE for $clone contains N \n";
    }
}




#######################################################################
# Gene length as declared is subsequence and in exons list            #
#######################################################################

sub checkgenes {
  my ($parent_length) = $obj->DNA(2);
  foreach my $child ($obj->Subsequence) {
    undef my @num;
    undef my ($method);
    undef my ($source);
	
    my ($seq, $start, $end) = $child->row();
    
    if($end > $parent_length){
      print LOG "Gene error - $child has coordinates greater than length if parent\n";
    }
    
    unless ($seq =~ /\./) {next;}
    
    if ($link =~ /^SUPERLINK/) {print LOG "SUPERLINK $link contains CDS gene models\n";}
    
    my $diff = $end - $start;
    if ($diff < 0) {
      $diff = $start - $end;
    }
    
    my $subseq = $db->fetch(Sequence => "$child");
    if (!defined ($subseq)) {
      print LOG "Cannot fetch subsequence $child\n";
      next;
    }
    
    # Source
    #
    # All Subsequence objects must have a Source
    
    my $source = $subseq->Source(1);
    if ((!defined ($source))) {
      print LOG "The subsequence $child has no Source\n";
    }
    
    # check to see if subsequence coordinates exceed length of parent clone
    # won't work for parents that are links (they have zero length)
    if($source !~ m/LINK/){
      my ($source_length) = $source->DNA(2);
      if (($start > $source_length) || ($end > $source_length)){
	print LOG "The subsequence $child has coordinates that exceed the length of its parent\n";
      }
    }
    
    # Source Exons
    #
    # All Subsequence objects must have Source_Exons
    
    @num = $subseq->Source_Exons(2);
    if (!defined (@num)) {
      print LOG "The subsequence $child has no Source_Exons\n";
    }
    @sort = sort numerically @num;
    my $index = $#sort;
    my $length = ($sort[$index])-1;
    if ($diff != $length) {
      print LOG "The subsequence $child belonging to $clone has diff=$diff and length=$length\n";
    }
    
    
    # Method tags
    #
    # All Subsequence objects must have a Method
    
    my $method = $subseq->Method(1);
    if ((!defined ($method))) {
      print LOG "The subsequence $child has no method\n";
    }
    
    # NDB_CDS || HALFWISE || gaze - don't process
    
    if ( ($method eq  "NDB_CDS") || ($method eq  "HALFWISE") || ($method eq  "gaze") ) {
      $subseq->DESTROY();
      $child->DESTROY();
      $diff="";
      $length="";
      next;
    }
    
    # Species
    # 
    # Most Subsequence objects must have a Species
    
    my $species = $subseq->Species(1);
    if ((!defined ($species))) {
      print LOG "The subsequence $child has no Species tag\n";
    }
    
    # Transcripts
    
    if ($child =~ /\S+\.t\d+/) {
      my $tag = $subseq->Transcript;
      if ((!defined ($tag))) {
	print LOG "The subsequence $child has no Transcript tag\n";
      }
    }
    else {
      
      if ($method eq "Pseudogene") {
	my $tag = $subseq->Properties.Pseudogene;
	if (!defined ($tag)) {
	  print LOG "The subsequence $child [$method] has no Pseudogene tag\n";
	} 
      }
      if ( ($method eq "curated") || ($method eq "provisional") ) {
	my $tag = $subseq->Properties.CDS;
	if (!defined ($tag)) {
	  print LOG "The subsequence $child [$method] has no CDS tag\n";
	}
      }
    }
    
    
    #	print  "$child [$source|$diff|$length|$method]\n";
    
    $subseq->DESTROY();
    $child->DESTROY();
    $diff="";
    $length="";
    
  }
}


sub numerically {
  $a <=> $b;
}


#######################################################################
# Write HTML page with maintenance job results
#######################################################################

sub writehtml {

    my (@finished);
    my (@annotated);
    my (@date);
    my (@sequence);
    my (@subsequence);
    my (@link);
    
    my $logdir="/nfs/disk100/wormpub/LocalWWW";

$HTML_START=<<START;
<HTML>
<HEAD>
<TITLE>Camace Automated db Maintenance log</TITLE>
</HEAD>
<BODY BGCOLOR="WHITE">
START

$HTML_END=<<END;
</BODY>
</HTML>
END

    open (OUTHTML,">$logdir/camchecklog.html");
    print OUTHTML $HTML_START;
    print OUTHTML "Last ran  : <B>$rundate $runtime</B></P>\n";
    print OUTHTML "<TABLE BORDER=1 WIDTH=100%>\n";

    open (READLOG, "<$log");
    while (<READLOG>) {
	push (@finished,$_)    if (/^NOT_FINISHED/);
	push (@annotated,$_)   if (/^FINISHED_BUT_NOT_ANNOTATED/);
	push (@date,$_)        if (/^DATE/);
	push (@sequence,$_)    if (/^SEQUENCE/);
	push (@subsequence,$_) if (/^The subsequence/);
	push (@subsequence,$_) if (/^Gene error - /);
	push (@link,$_)        if (/^SUPERLINK/);
    }
    close READLOG;

    # Not Finished
    print OUTHTML "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n";
    print OUTHTML "<TH BGCOLOR=\"darkblue\"><TD><FONT COLOR=\"white\">Not Finished</FONT></TD></TH>\n";
    foreach (@finished) {
	print OUTHTML "<TR><TD><FONT SIZE=\"-1\">$_</FONT></TD></TR>\n";
    }
    print OUTHTML "</TABLE></P>\n";


    # Not Annotated
    print OUTHTML "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n";
    print OUTHTML "<TH BGCOLOR=\"darkblue\"><TD><FONT COLOR=\"white\">Not Annotated</FONT></TD></TH>\n";
    foreach (@annotated) {
	print OUTHTML "<TR><TD><FONT SIZE=\"-1\">$_</FONT></TD></TR>\n";
    }
    print OUTHTML "</TABLE></P>\n";

    # Date Mismatch (not uploaded into camace)
    print OUTHTML "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n";
    print OUTHTML "<TH BGCOLOR=\"darkblue\"><TD><FONT COLOR=\"white\">Date mismatches</FONT></TD></TH>\n";
    foreach (@date) {
	print OUTHTML "<TR><TD><FONT SIZE=\"-1\">$_</FONT></TD></TR>\n";
    }
    print OUTHTML "</TABLE></P>\n";

    # Sequence Mismatch (problem)
    print OUTHTML "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n";
    print OUTHTML "<TH BGCOLOR=\"darkblue\"><TD><FONT COLOR=\"white\">Genomic sequences</FONT></TD></TH>\n";
    foreach (@sequence) {
	print OUTHTML "<TR><TD><FONT SIZE=\"-1\">$_</FONT></TD></TR>\n";
    }
    print OUTHTML "</TABLE></P>\n";

    # Subsequence problem
    print OUTHTML "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n";
    print OUTHTML "<TH BGCOLOR=\"darkblue\"><TD><FONT COLOR=\"white\">Subsequences</FONT></TD></TH>\n";
    foreach (@subsequence) {
	print OUTHTML "<TR><TD><FONT SIZE=\"-1\">$_</FONT></TD></TR>\n";
    }
    print OUTHTML "</TABLE></P>\n";

    # SUPERLINK problems
    print OUTHTML "<TABLE BORDER=\"0\" WIDTH=\"100%\">\n";
    print OUTHTML "<TH BGCOLOR=\"darkblue\"><TD><FONT COLOR=\"white\">LINK objects</FONT></TD></TH>\n";
    foreach (@link) {
	print OUTHTML "<TR><TD><FONT SIZE=\"-1\" COLOR=\"red\">$_</FONT></TD></TR>\n";
    }
    print OUTHTML "</TABLE></P>\n";



    print OUTHTML $HTML_END;
    close OUTHTML;

    undef (@finished);
    undef (@annotated);
    undef (@date);
    undef (@sequence);
    undef (@subsequence);
    undef (@link);
    
}

#######################################################################
# Help and error trap outputs                                         #
#######################################################################

sub run_details {
    print "# camcheck\n";     
    print "# version        : $version\n";
    print "# run details    : $rundate $runtime\n";
    print "\n";
}


sub usage {
    my $error = shift;

    if ($error == 1) {
        # No WormBase release number file
        print "The WormBase release number cannot be parsed\n";
        print "Check File: '$Wormbase_release_file'\n\n";
        &run_details;
        exit(0);
    }
    elsif ($error == 0) {
        # Normal help menu
        exec ('perldoc',$0);
        exit (0);
    }
}


__END__

=pod

=head1 NAME - camcheck

=back

=head1 USAGE

=over 4

=item camcheck [-options]

camcheck performs a number of integrity/consistency checks against
the camace database. The script is based on an iterative loop across
all Genome_sequences and LINK* objects.

=back

=head2 camcheck MANDATORY arguments:

=over 4

=item none

=back

=head2 camcheck OPTIONAL arguments:

=over 4

=item -h, Help

=item -d, Debug/Verbose mode

=back

=head1 DOCUMENTATION

=over 4

=back

The following checks have been incorporated into camcheck:

=head2 Status tags

=head3 Genome sequences which are not Finished.

Genome sequences which do not have a Finished tag.

=head3 Genome sequences which are Finished but not Annotated.

Genome sequences which are finished but not annotated.

=head2 File storage on /analysis/cosmids

=head3 Date mismatch between the file system and camace.

Inconsistent Date_directory tag in ACEDB with respect to the file
system (/analyis/cosmids/current.versions).

For details of how the date dirtectory structure works:
 http://intweb.sanger.ac.uk/Projects/C_elegans/MANUAL

=head3 Sequence mismatch between the file system and camace. 

This is based on a GCG checksum calculation for the .seq file in 
the date directory and the sequence extracted from ACEDB.

For details of how the date dirtectory structure works:
 http://intweb.sanger.ac.uk/Projects/C_elegans/MANUAL

=head2 Gene Models

=head3 Absence of Source in ?Sequence

All Subsequence Gene Models MUST have a parent ?Sequence.

    i.e. Sequence "ZK637.5"
         Source "ZK637"

=head3 Absence of Source_Exons in ?Sequence

All Subsequence Gene Models MUST have Source_Exons.

    i.e. Sequence "ZK637.5"
         Source_Exons      1   434
                         483   741
                         950  1159
                        1288  1413

=head3 Absence of Method in ?Sequence

All Subsequence Gene Models MUST have a Method tag. Method tags 
are used in two ways: Firstly, as a means of tagging Gene Models
into classes (e.g. 'curated' for active CDS prediction, 'RNA' for
RNA gene) and secondly as an internal ACEDB description of how
to display the object in the F-map.

    i.e. Sequence "ZK637.5"
         Method "curated"

For details of permissible Method tags see:
 http://intweb.sanger.ac.uk/Projects/C_elegans/MANUAL

=head3 Absence of Species tag in ?Sequence

All Subsequence Gene Models MUST have Species tag.

    i.e. Sequence "ZK637.5"
         Species "Caenorhabditis elegans"

=head3 Absence of CDS tag in ?Sequence

All Subsequence Gene Models MUST have a Coding CDS tag.

    i.e. Sequence "ZK637.5"
         Coding CDS

=head3 Mismatch between Parent coordinates and CDS span length

The coordinate span of the Gene Model (1 => n) based on the 
Source_Exon tags MUST be in agreement with the coordinate span
of the Gene Model as a Subsequence of the parent ?Sequence.

    i.e. Sequence "ZK637"
         Subsequence ZK637.5 11124 12536

         Sequence "ZK637.5"
         Source_Exons      1   434
                         483   741
                         950  1159
                        1288  1413

         Span in CDS (ZK637.5) = ( 1413 -     1) + 1 = 1413
         Parent (ZK637)        = (12536 - 11124) + 1 = 1413
                                                       ----

=head3 Subsequence coordinates exceeding parent sequence length

The coordinates of each subsequence must be less than the length of the
parent sequence.


=head2 LINK objects

=head3 CDS Gene Models on SUPERLINK objects

CDS Gene Models are not allowed as children of SUPERLINK objects.


=head2 Valid predicted gene objects

camcheck calls the check_predicted_genes.pl script which performs a
number of integrity checks on each object within the 'Predicted_gene'
class. See L<check_predicted_genes.pl> for more details of these 
checks.

=head1 AUTHOR - Daniel Lawson

Email dl1@sanger.ac.uk

=head2 Also hacked by Keith Bradnam

Email krb@sanger.ac.uk

=cut








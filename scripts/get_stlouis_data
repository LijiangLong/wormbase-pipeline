#!/usr/local/bin/perl
#
# get_stlouis_all
#
# v 0.2
#
# ag3/dl
#
# Usage : get_stlouis_all
#
# Produces the two files stl_fincmid and stl_unfincmid in
# /nfs/disk69/ftp/pub/wormbase/sequences/ALL_COSMIDS
# ~wormpub/analysis/Sequence_databases
# Distributes and sorts all the single files in FastA format in the directories under
# /nfs/disk69/ftp/pub/wormbase/sequences/FINISHED_SEQUENCES/STLOUIS_FINISHED/
# /nfs/disk69/ftp/pub/wormbase/sequences/UNFINISHED_SEQUENCES/STLOUIS_UNFINISHED/
#
#

# v0.2
# 011203 : dl  : Added third FTP directory from St Louis to include missing data
# 001122 : dl  : Reformat code to generic structure
# 001122 : dl  : Added some more error-trapping and modified logging procedure

#################################################################################
# variables                                                                     #
#################################################################################

$|=1;
use IO::Handle;
use Getopt::Std;
require "/nfs/disk100/wormpub/analysis/scripts/babel.pl";

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainer = "dl1\@sanger.ac.uk";
my $rundate = `date +%y%m%d`; chomp $rundate;
my $runtime = `date +%H:%M:%S`; chomp $runtime;
my $version = &get_script_version(get_stlouis_data);

 ##############################
 # Paths etc                  #
 ##############################

$fin_dir                = "/wormsrv2/ftp_site/finished";
$unfin_dir              = "/wormsrv2/ftp_site/unfinished";
$inlogfile              = "/wormsrv2/ftp_site/get_stlouis_data.$rundate.$$";
$stl_fin_ftpsite1       = "ftp://genome.wustl.edu/pub/gsc1/sequence/st.louis/elegans/genbank";
$stl_fin_ftpsite2       = "ftp://genome.wustl.edu/pub/gsc1/sequence/st.louis/elegans/finish";
$stl_unfin_ftpsite      = "ftp://genome.wustl.edu/pub/gsc1/sequence/st.louis/elegans/preliminary";
$fin_ftpsite            = "/nfs/disk69/ftp/pub/wormbase/sequences/FINISHED_SEQUENCES/STLOUIS_FINISHED";
$unfin_ftpsite          = "/nfs/disk69/ftp/pub/wormbase/sequences/UNFINISHED_SEQUENCES/STLOUIS_UNFINISHED";
$stl_fin_cmid           = "/nfs/disk69/ftp/pub/wormbase/sequences/ALL_COSMIDS/stl_fincmid";
$stl_unfin_cmid         = "/nfs/disk69/ftp/pub/wormbase/sequences/ALL_COSMIDS/stl_unfincmid";
$stl_fin_cmid_gz        = "/nfs/disk69/ftp/pub/wormbase/sequences/ALL_COSMIDS/stl_fincmid.gz";
$stl_unfin_cmid_gz      = "/nfs/disk69/ftp/pub/wormbase/sequences/ALL_COSMIDS/stl_unfincmid.gz";
$stl_analysis_fincmid   = "/nfs/disk100/wormpub/analysis/Sequence_Databases/stl_fincmid";
$stl_analysis_unfincmid = "/nfs/disk100/wormpub/analysis/Sequence_Databases/stl_unfincmid";
$file_ext               = "*.seq";
$wget_opt               = "-r -nv -x -nH --cut-dirs=6 ";
$fastafilter            = "/nfs/disk100/humpub/scripts/fastfil";
system ("/bin/touch $inlogfile");

 ##############################
 # command-line options       #
 ##############################

$opt_h = "";   # Help/Usage page
getopts ('h');
&usage(0) if ($opt_h);

 ########################################
 # Open logfile                         #
 ########################################

my $logfile = "/wormsrv2/logs/get_stlouis_all.log.$rundate.$$";
open (LOG,">$logfile");
LOG->autoflush();

print LOG "# get_stlouis_all\n\n";     
print LOG "# version        : $version\n";
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";

#################################################################################
# Main Loop                                                                     #
#################################################################################


 # Delete old copies of the sequences from the FTP site 
\&cleanup();

 # Fetch new copies from GSC
\&getsequences();

 # Re-organise the FTP directories
\&copyover();

 ##############################
 # mail $maintainer report    #
 ##############################

close LOG;

open (mailLOG, "|/usr/bin/mailx -s \"FTP-Blast Report: get_stlouis_all\" $maintainer ");
open (readLOG, "<$logfile");
while (<readLOG>) {
    print mailLOG $_;
}
close readLOG;
close mailLOG;

 ##############################
 # hasta luego                #
 ##############################

exit(0);


#################################################################################
### Subroutines                                                               ###
#################################################################################



#################################################################################
# clean-up                                                                      #
#################################################################################

sub cleanup {
    @directories = ('I','II','III','IV','V','X','UNSORTED');
    foreach (@directories) {
	my $subdir=$_;
	my $curr_fin_dir = "$fin_ftpsite"."/$subdir";
	my $count_fin = 0;
	opendir(FIN_DIR,$curr_fin_dir) or die ("Could not opendir $curr_fin_dir");
	while (defined($file=readdir(FIN_DIR))) {
	    next unless ($file =~ /seq/);
	    system ("/bin/rm $curr_fin_dir/$file");
	    $count_fin++;
	}
	close FIN_DIR;
	print LOG "Erased $count_fin files from directory $curr_fin_dir ..\n";
	
	my $curr_unfin_dir = "$unfin_ftpsite"."/$subdir";
	my $count_unfin = 0;
	opendir(UNFIN_DIR,$curr_unfin_dir) or die ("Could not opendir $curr_unfin_dir");
	while (defined($file=readdir(UNFIN_DIR))) {
	    next unless ($file =~ /shg/);
	    system ("/bin/rm $curr_unfin_dir/$file");
	    $count_unfin++;
	}
	close UNFIN_DIR;
	print LOG "Erased $count_unfin files from directory $curr_unfin_dir ..\n";
    }
    system ("/bin/rm -rf $fin_dir");
    system ("/bin/rm -rf $unfin_dir");
    print LOG "Erased directories $fin_dir and $unfin_dir ..\n\n";
} # end cleanup


#################################################################################
# getsequences                                                                  #
#################################################################################

sub getsequences {

    # get StLouis FINISHED
    $g_fin1 = system ("/usr/local/bin/wget $wget_opt -a \"$inlogfile\" -P \"$fin_dir\" -A \"$file_ext\" \"$stl_fin_ftpsite1\" ");
    print LOG "St Louis genbank sequences transferred .. \n\n";

    $g_fin2 = system ("/usr/local/bin/wget $wget_opt -a \"$inlogfile\" -P \"$fin_dir\" -A \"$file_ext\" \"$stl_fin_ftpsite2\" ");
    print LOG "St Louis finish sequences transferred .. \n\n";
    
    $g_fin = $g_fin1 + $g_fin2;

    # get StLouis UNFINISHED
    $g_unfin = system ("/usr/local/bin/wget $wget_opt -a \"$inlogfile\" -P \"$unfin_dir\" -A \"$file_ext\" \"$stl_unfin_ftpsite\" ");
    print LOG "St Louis unfinished sequences transferred .. \n\n";

} # end getsequences

#################################################################################
# copyover                                                                      #
#################################################################################

sub copyover {
    unlink $stl_fin_cmid;
    unlink $stl_fin_cmid_gz;
    system ("/bin/touch $stl_fin_cmid");
    unlink $stl_unfin_cmid;
    unlink $stl_unfin_cmid_gz;
    system ("/bin/touch $stl_unfin_cmid");
    print LOG "old stlcmid files removed ..\n";
    
    open (FINCMIDFILE,">$stl_fin_cmid");
    open (UNFINCMIDFILE,">$stl_unfin_cmid");
    
    open (INLOG,"$inlogfile") or die ("Could not open $inlogfile ..\n");
    while (<INLOG>) {
	$c_line=$_;
	chomp $c_line;

    # FINISHED St.Louis clones
	if ($c_line=~/\"$fin_dir\/(\w+)\/(\S+)\"/) {
	    $chr=$1;
	    $filename=$2;
	    if ($filename =~ /listing/) {next;};
	    ($chr =~ /1/) && do { $fin_tgtfile = "$fin_ftpsite"."/I/"."$filename"; };
	    ($chr =~ /2/) && do { $fin_tgtfile = "$fin_ftpsite"."/II/"."$filename"; };
	    ($chr =~ /3/) && do { $fin_tgtfile = "$fin_ftpsite"."/III/"."$filename"; };
	    ($chr =~ /4/) && do { $fin_tgtfile = "$fin_ftpsite"."/IV/"."$filename"; };
	    ($chr =~ /5/) && do { $fin_tgtfile = "$fin_ftpsite"."/V/"."$filename"; };
	    ($chr =~ /X/) && do { $fin_tgtfile = "$fin_ftpsite"."/X/"."$filename"; };
	    
	    ($chr =~ /1R/) && do { $fin_tgtfile = "$fin_ftpsite"."/I/"."$filename"; };
	    ($chr =~ /2R/) && do { $fin_tgtfile = "$fin_ftpsite"."/II/"."$filename"; };
	    ($chr =~ /3R/) && do { $fin_tgtfile = "$fin_ftpsite"."/III/"."$filename"; };
	    ($chr =~ /4R/) && do { $fin_tgtfile = "$fin_ftpsite"."/IV/"."$filename"; };
	    ($chr =~ /XM/) && do { $fin_tgtfile = "$fin_ftpsite"."/X/"."$filename"; };
	    
	    $source_file="$fin_dir"."/$chr"."/$filename";
	    $unsorted_fin_file = "$fin_ftpsite"."/UNSORTED/"."$filename";
	    if (-s $source_file) {
		system ("/bin/cat $source_file | $fastafilter > $fin_tgtfile");
		print LOG "Copied and fasta_filtered to $fin_tgtfile..\n";
		system ("/bin/cat $source_file | $fastafilter > $unsorted_fin_file");
		print LOG "Copied and fasta_filtered to $unsorted_fin_file..\n";

              # Add the clones in finished target file and reformat
		system ("/bin/cat $fin_tgtfile >> $stl_fin_cmid");
		open (INFILE,"<$fin_tgtfile");
		while (<INFILE>) {
		    if ($_ =~ /^\s+$/) {
			next;
		    }
		    if ($_ =~ /^>\s{0,}(\S+)/) {
			my $cosmid=$1;
			$cosmid=~tr/a-z/A-Z/;
			$cosmid=~s/\s+//mg;
			print FINCMIDFILE ">$cosmid\n";
		    } else {
			print FINCMIDFILE $_;  
		    }
		}
		close INFILE;
		print LOG "Copied and fasta_filtered to $stl_fin_cmid ..\n";
	    } else {
		print LOG "** Warning : $source_file has ZERO size ..\n";        
		next; 
	    }

    # UNFINISHED St.Louis clones
	} elsif ($c_line=~/\"$unfin_dir\/(\w+)\/(\S+)\"/) {
	    $chr=$1;
	    $filename=$2;
	    if ($filename =~ /listing/) {next;};
	    $source_file="$unfin_dir"."/$chr"."/$filename";
	    $filename =~ s/\.seq/\.shg/;
	    $unsorted_unfin_file = "$unfin_ftpsite"."/UNSORTED/"."$filename";
	    ($chr =~ /1/) && do { $unfin_tgtfile = "$unfin_ftpsite"."/I/"."$filename"; };
	    ($chr =~ /2/) && do { $unfin_tgtfile = "$unfin_ftpsite"."/II/"."$filename"; };
	    ($chr =~ /3/) && do { $unfin_tgtfile = "$unfin_ftpsite"."/III/"."$filename"; };
	    ($chr =~ /4/) && do { $unfin_tgtfile = "$unfin_ftpsite"."/IV/"."$filename"; };
	    ($chr =~ /5/) && do { $unfin_tgtfile = "$unfin_ftpsite"."/V/"."$filename"; };
	    ($chr =~ /X/) && do { $unfin_tgtfile = "$unfin_ftpsite"."/X/"."$filename"; };
	    ($chr =~ /UL/) && do { $unfin_tgtfile = "$unfin_ftpsite"."/UNSORTED/"."$filename"; };
	    if (-s $source_file) {
		system ("/bin/cat $source_file | $fastafilter > $unfin_tgtfile");
		print LOG "Copied and fasta_formatted to $unfin_tgtfile..\n";
		system ("/bin/cat $source_file | $fastafilter > $unsorted_unfin_file");
		print LOG "Copied and fasta_filtered to $unsorted_unfin_file..\n";
		system ("/bin/cat $unfin_tgtfile >> $stl_unfin_cmid");
		open (INFILE,"<$unfin_tgtfile");
		while (<INFILE>) {
		    print UNFINCMIDFILE $_;
		}
		close INFILE;
		print LOG "Copied and fasta_filtered to $stl_unfin_cmid ..\n";
	    } else {
		print LOG "** Warning : $source_file has ZERO size ..\n";        
		next; 
	    } 
	}	
    }
    close (INLOG);
    close (FINFCMIDILE);
    close (UNFINCMIDFILE);
    
    if (-e $stl_fin_cmid) {
	$old_analysis_fin = "$stl_analysis_fincmid".".OLD";
	$old_analysis_unfin = "$stl_analysis_unfincmid".".OLD"; 
	system ("/bin/rm $old_analysis_fin");
	system ("/bin/rm $old_analysis_unfin");
	print LOG "Moving $stl_analysis_fincmid to $old_analysis_fin ..\n";
	system ("/bin/mv $stl_analysis_fincmid $old_analysis_fin");
	print LOG "Moving $stl_analysis_unfincmid to $old_analysis_unfin ..\n";
	system ("/bin/mv $stl_analysis_unfincmid $old_analysis_unfin");
	print LOG "Copying $stl_fin_cmid to $stl_analysis_fincmid ..\n";
	system ("/bin/cp $stl_fin_cmid $stl_analysis_fincmid");
	print LOG "gzipping $stl_fin_cmid ..\n\n";
	system ("/bin/gzip $stl_fin_cmid");
    } else { print LOG "$stl_fin_cmid NOT existent ..\n\n";} 
    if (-e $stl_unfin_cmid) {
	print LOG "Copying $stl_unfin_cmid to $stl_analysis_unfincmid ..\n";
	system ("/bin/cp $stl_unfin_cmid $stl_analysis_unfincmid");
	print LOG "gzipping $stl_unfin_cmid ..\n\n";
	system ("/bin/gzip $stl_unfin_cmid");
    } else { print LOG "$stl_unfin_cmid NOT existent ..\n\n";} 
    
} # end copyover




sub usage {
    my $error = shift;

    if ($error == 1) {
	exit(0);
    }
    elsif ($error == 0) {
        # Normal help menu
        exec ('perldoc',$0);
        exit (0);
    }
}


__END__

=pod

=head2   NAME - get_stlouis_all

=head1 USAGE

=over 4

=item get_stlouis_all [-options]

=back

get_stlouis_all is a wrapper to drive the various scripts involved in
fetch finished and unfinished sequence data from the GSC.

get_stlouis_all  mandatory arguments:

=over 4

=item none,

=back

get_stlouis_all OPTIONAL arguments:

=over 4

=item -h, Help mode

=back

=cut


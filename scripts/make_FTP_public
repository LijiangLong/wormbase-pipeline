#!/usr/local/bin/perl -w
#
# make_FTP_public
# v 0.1
#
# dl
#
# Usage : make_FTP_public [-options]
#
# A PERL wrapper to automate the process of building the wormbase FTP site.
#
#
# This script does :
#
# [01] - make a new directory for the WS release
# [02] - copy the WS release files to the target directory
# [03] - make a new directory for the chromosome DNA/GFF/AGP files
# [04] - copy the chromosome DNA/GFF/AGP files to the target directory
# [05] - copy the models.wrm file across (also present in the database.*.tar.gz files)
# [06] - copy the relevant dbcomp file across
# [07] - copy across latest wormpep release
# [08] - make wormpep FTP site
# [09] - copy WormRNA release across
# [10] - extract confirmed genes from autoace and make a file on FTP site
# [11] - delete the old symbolic link and make the new one
# [12] - delete the old WS release version directory
# [13] - exit gracefully



#################################################################################
# variables                                                                     #
#################################################################################

$|=1;
use Getopt::Long;
use lib '/wormsrv2/scripts';
use Wormbase;
use Ace;

my $sourcedir       ; # [Text] Directory in which the latest WS release resides
my $targetdir       ; # [Text] Directory in which to build the new release
my $release         ; # [Text] Release number (e.g. 16)
my $old_release        = "";    # [Text] Internally generated release number ($release -2 , e.g. 14)
my $debug              = "";    #        on/off flag for verbose mode
my $clean              = "";    #        on/off flag for removing old WS directories from the FTP site

GetOptions (
            "source=s"       => \$sourcedir,
            "target=s"       => \$targetdir,
	    "WS_release=s"   => \$release,
	    "debug"          => \$debug,
	    "clean"          => \$clean,
);

#check cmd line options and set defaults.
unless ( $release ){
  $release = &get_wormbase_version();
}
unless ( $sourcedir ){
  $sourcedir = "/wormsrv2/autoace";
}
unless ( $targetdir ) {
    $targetdir = "/nfs/disk69/ftp/pub/wormbase";
}

my $wormrna_release    = $release;
my $wormpep            = $release;
$old_release    = $release - 1;

if ($debug) {
    print "# make_FTP_public\n#\n";
    print "# Source directory : $sourcedir \n";
    print "# Target directory : $targetdir\n";
    print "# WS release No.   : $release\n";
}



#################################################################################
# Main Loop                                                                     #
#################################################################################

# make a new directory for the WS release

system "mkdir $targetdir/WS$release" unless -e "$targetdir/WS$release";
print "make a new WS release directory : '$targetdir/WS$release'\n" if ($debug);


# copy the WS release files across and check on the size
# The FTP disk tends to be unstable

opendir (RELEASE,"$sourcedir/release") or die ("Could not open directory $sourcedir/release");
while (defined($filename = readdir(RELEASE))) {
  if (($filename eq ".")||($filename eq "..")) { next;}
  if (($filename =~ /letter/)||($filename =~ /dbcomp/)) { next;}
  system "cp $sourcedir/release/$filename $targetdir/WS$release/$filename";
  $O_SIZE = (stat("$sourcedir/release/$filename"))[7];
  $N_SIZE = (stat("$targetdir/WS$release/$filename"))[7];
  if ($O_SIZE != $N_SIZE) {
    print "*Error - file $filename not transferred regularly - please check\n";
    die();
  } else {
    print "Copied filename: $filename SRC: $O_SIZE TGT: $N_SIZE\n" if ($debug);
  }
}
closedir RELEASE;
print "copied the release directory to FTP site\n" if ($debug);



# make a new /CHROMOSOMES directory for the chromosome DNA/GFF

system "mkdir $targetdir/WS$release/CHROMOSOMES" unless -e "$targetdir/WS$release/CHROMOSOMES";
print "make a new CHROMOSOMES directory : '$targetdir/WS$release/CHROMOSOMES'\n" if ($debug);



# copy the DNA,GFF, and agp files across

opendir (DNAGFF,"$sourcedir/CHROMOSOMES") or die ("Could not open directory $sourcedir/CHROMOSOMES");
while (defined($filename = readdir(DNAGFF))) {
  if (($filename eq ".")||($filename eq "..")) { next;}
  system "cp $sourcedir/CHROMOSOMES/$filename $targetdir/WS$release/CHROMOSOMES/$filename";
  $O_SIZE = (stat("$sourcedir/CHROMOSOMES/$filename"))[7];
  $N_SIZE = (stat("$targetdir/WS$release/CHROMOSOMES/$filename"))[7];
  if ($O_SIZE != $N_SIZE) {
    print "*Error - file $filename not transferred regularly - please check\n";
    die();
  } else {
    print "Copied filename: $filename SRC: $O_SIZE TGT: $N_SIZE\n" if ($debug);
  }
}
closedir DNAGFF;
print "moved the contents of the CHROMOSOMES directory\n" if ($debug);



# Copy across the models.wrm file
system "cp $sourcedir/wspec/models.wrm $targetdir/WS$release/models.wrm.WS$release";
print "Copying models.wrm\n" if ($debug);

 

# copy some miscellaneous files across
system "cp /wormsrv2/autoace/COMPARE/WS$old_release-WS$release.dbcomp $targetdir/WS$release/";
print "copying dbcomp file across\n" if ($debug);

system "cp /wormsrv2/autoace_config/INSTALL $targetdir/WS$release/";
print "copying INSTALL script across\n" if ($debug);


# move wormpep release from /wormsrv2 to /disk100/wormpub

my $wormpub_dir = "/nfs/disk100/wormpub/WORMPEP";

print "Removing old files in $wormpub_dir\n";

unlink("$wormpub_dir/wormpep_current")           || print "Cannot delete files in $wormpub_dir\n";
unlink("$wormpub_dir/wormpep.accession_current") || print "Cannot delete files in $wormpub_dir\n";
unlink("$wormpub_dir/wormpep.dna_current")       || print "Cannot delete files in $wormpub_dir\n";
unlink("$wormpub_dir/wormpep.history_current")   || print "Cannot delete files in $wormpub_dir\n";
unlink("$wormpub_dir/wp.fasta_current")          || print "Cannot delete files in $wormpub_dir\n";

print LOG "Copying new files to $wormpub_dir\n";

my $new_wpdir = "/wormsrv2/WORMPEP/wormpep$wormpep";
system ("cp $new_wpdir/wormpep_current $wormpub_dir/wormpep_current")                     or print LOG "Cannot copy file to $wormpub_dir\n";
system ("cp $new_wpdir/wormpep.accession$release $wormpub_dir/wormpep.accession_current") or print LOG "Cannot copy file to $wormpub_dir\n";
system ("cp $new_wpdir/wormpep.dna$release $wormpub_dir/wormpep.dna_current")             or print LOG "Cannot copy file to $wormpub_dir\n";
system ("cp $new_wpdir/wormpep.history$release $wormpub_dir/wormpep.history_current")     or print LOG "Cannot copy file to $wormpub_dir\n";
system ("cp $new_wpdir/wp.fasta$release $wormpub_dir/wp.fasta_current")                   or print LOG "Cannot copy file to $wormpub_dir\n";
system ("/usr/local/pubseq/bin/setdb $wormpub_dir/wormpep_current")                       or &mail_maintainer("SETDB on $wormpub_dir/wormpep_current failed",$maintainers,$logfile);
system ("chmod +rw $new_wpdir/*");

# tar up the latest wormpep release and copy across
system("/wormsrv2/scripts/tar_wormpep $wormpep");
system("mv /wormsrv2/WORMPEP/wormpep${wormpep}/wormpep${wormpep}.tar.gz $targetdir/WS$release");
print "running tar_wormpep and copying across to ftp site\n" if ($debug);


# Create wormpep FTP site
system "/wormsrv2/scripts/make_FTP_wormpep -r $wormpep";
print "make the wormpep FTP release for wormpep${wormpep}\n" if ($debug);


# tar, zip, and copy WormRNA files across from wormsrv2/WORMRNA
my $dest = "/wormsrv2/WORMRNA/wormrna${wormrna_release}";
chdir "$dest" or die "Couldn't cd $dest\n";
system "/bin/tar -cf $targetdir/WS$release/wormrna${wormrna_release}.tar README wormrna${wormrna_release}.rna";
system "/bin/gzip $targetdir/WS$release/wormrna${wormrna_release}.tar";
print "make the FTP files for WormRNA${wormrna_release}\n" if ($debug);


# make file of confirmed genes from autoace and copy across
&extract_confirmed_genes($targetdir,"WS"."$release");



# delete the old symbolic link and make the new one
system "rm -f $targetdir/current_release";
system "cd $targetdir; ln -s $WSrelease current_release";
print "deleted the old sym_link and create the new one\n" if ($debug);


# copy BLAT results to the FTP site

system "rm -f /nfs/privateftp/ftp-wormbase/pub/data/blat/*gz";

system "cp /wormsrv2/autoace/BLAT/stlace.blat.EST.ace                  /nfs/privateftp/ftp-wormbase/pub/data/blat/WS${release}_stlace.blat.EST.ace";
system "cp /wormsrv2/autoace/BLAT/stlace.blat.mRNA.ace                 /nfs/privateftp/ftp-wormbase/pub/data/blat/WS${release}_stlace.blat.mRNA.ace";
system "cp /wormsrv2/autoace/BLAT/stlace.good_introns.EST.ace     /nfs/privateftp/ftp-wormbase/pub/data/blat/WS${release}_stlace.blat.good_introns.EST.ace";
system "cp /wormsrv2/autoace/BLAT/stlace.good_introns.mRNA.ace    /nfs/privateftp/ftp-wormbase/pub/data/blat/WS${release}_stlace.blat.good_introns.mRNA.ace";

system "cp /wormsrv2/autoace/BLAT/virtual_objects.stlace.BLAT_EST.ace  /nfs/privateftp/ftp-wormbase/pub/data/blat/WS${release}_virtual_objects.stlace.BLAT_EST.ace";
system "cp /wormsrv2/autoace/BLAT/virtual_objects.stlace.BLAT_mRNA.ace /nfs/privateftp/ftp-wormbase/pub/data/blat/WS${release}_virtual_objects.stlace.BLAT_mRNA.ace";
system "cp /wormsrv2/autoace/BLAT/virtual_objects.stlace.ci.EST.ace    /nfs/privateftp/ftp-wormbase/pub/data/blat/WS${release}_virtual_objects.stlace.ci.EST.ace";
system "cp /wormsrv2/autoace/BLAT/virtual_objects.stlace.ci.mRNA.ace   /nfs/privateftp/ftp-wormbase/pub/data/blat/WS${release}_virtual_objects.stlace.ci.mRNA.ace";

system "/bin/gzip /nfs/privateftp/ftp-wormbase/pub/data/blat/*ace";


# delete the old WS release version
if ($clean) {
    system "rm -rf $targetdir/WS$old_release";
    print "deleted the old WS release version from the FTP site\n" if ($debug);
}


exit (0);

#################################################################################
# Subroutines                                                                   #
#################################################################################

sub usage {

    print "make_FTP_public v0.1\n";
    print "Usage : make_FTP_public [-options]\n";
    print " -source       : source directory from which to copy database release\n";
    print "[-target]      : target directory on the FTP site to place release\n";
    print "               : default is /nfs/disk69/ftp/pub/wormbase\n";
    print " -WS_release   : WS release (e.g. WS16)\n";
    print "[-debug]        : verbose mode\n\n";
    exit(0);
}

###################################
# extract confirmed genes
###################################

sub extract_confirmed_genes{

  my $targetdir = shift;
  my $release = shift;

  print "extracting confirmed genes from autoace\n" if ($debug);


  my $db = Ace->connect(-path  => "/wormsrv2/autoace/");
  my $query = "Find Sequence; Confirmed_by";
  my @confirmed_genes   = $db->fetch(-query=>$query);


  open(OUT,">${targetdir}/${release}/confirmed_genes.${release}") || die "Couldn't write to ${targetdir}/${release}/confirmed_genes.${release}\n";

  foreach my $seq (@confirmed_genes){
    my $dna = $seq->asDNA();
    
    my (@type) = $seq->get('Confirmed_by');
    
    if(defined($type[1])){
      $dna =~ s/(>\w+\.\w+)/$1 Confirmed_by_EST_and_cDNA/;    
    }       
    else{
      $dna =~ s/(>\w+\.\w+)/$1 Confirmed_by_$type[0]/;        
    }       
    print OUT "$dna";
  }

  close(OUT);

  system("/bin/gzip ${targetdir}/${release}/confirmed_genes.${release}");
  print "gzipping confirmed_genes.${release}\n" if ($debug);

  
  return(0);

}

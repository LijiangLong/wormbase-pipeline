#!/usr/local/bin/perl5.6.0 -w

# GFFsplitter
# 
# v 0.1
# 
# Written by Dan the Man
# Usage : GFFsplitter

# Last updated by: $Author: krb $
# Last updated on: $Date: 2002-07-30 13:58:39 $


#################################################################################
# variables                                                                     #
#################################################################################

$|=1;
use IO::Handle;
use Getopt::Std;
use lib '/wormsrv2/scripts';
use Wormbase;
use strict;

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainers = "All";
my $rundate = `date +%y%m%d`; chomp $rundate;
my $runtime = `date +%H:%M:%S`; chomp $runtime;
my $cvs_version = &get_cvs_version($0);
my $WS_version = &get_wormbase_version_name;


 ##############################
 # Paths etc                  #
 ##############################

my $datadir = "/wormsrv2/autoace/GFF_SPLITS";

# create GFF_SPLITS subdirectory if it doesn't already exist
if (! -e "/wormsrv2/autoace/GFF_SPLITS/GFF_SPLITS"){
  system("mkdir /wormsrv2/autoace/GFF_SPLITS/GFF_SPLITS") && die "Couldn't create directory\n";
}


 ##############################
 # command-line options       #
 ##############################

our $opt_h = "";   # Help/Usage page
our $opt_a = "";   # archive GFF_splits directory into a WSxx directory
our $opt_s = "";   # silent running
getopts ('has');
&usage if ($opt_h);


##########################################################
# Archive the GFF_splits directory into a WSxx directory
##########################################################

# runs only if -a is specified
if($opt_a){
  print "Renaming $datadir/GFF_SPLITS to $datadir/$WS_version\n";
  system("mv $datadir/GFF_SPLITS ${datadir}/${WS_version}") && die "Couldn't rename directory\n";
  exit(0);
}

 ########################################
 # Open logfile                         #
 ########################################

my $logfile = "/wormsrv2/logs/GFFsplitter.$rundate.$$";
open (LOG,">$logfile");
LOG->autoflush();

print LOG "# GFFsplitter\n\n";     
print LOG "# version        : $cvs_version\n";
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";

#################################################################################
# Main Loop                                                                     #
#################################################################################


# prepare array of file names and sort names
our @files = (
	  'CHROMOSOME_I.gff',
	  'CHROMOSOME_II.gff',
	  'CHROMOSOME_III.gff',
	  'CHROMOSOME_IV.gff',
	  'CHROMOSOME_V.gff',
	  'CHROMOSOME_X.gff',
	  );

our @gff_files = sort @files; 
undef @files; 

############################################################
# loop through each GFF file                               #
############################################################

our $debug = 1;

foreach (@gff_files) {
    
    next if ($_ eq "");
    my $file = $_;
    my ($file_prefix) = (/^(\S+.+)\.gff/);
    print LOG "File $file   \tName : $file_prefix\n";
    my $line_count = 0;

    #########################################################
    # initialise some files to write out data               #
    #########################################################

    my $gff_clone_path           = $file_prefix . "\.clone_path\.gff";
    my $gff_genes                = $file_prefix . "\.genes\.gff";
    my $gff_pseudogenes          = $file_prefix . "\.pseudogenes\.gff";
    my $gff_rna                  = $file_prefix . "\.rna\.gff";
    my $gff_rest                 = $file_prefix . "\.rest\.gff";
    my $gff_CDS_exon             = $file_prefix . "\.CDS_exon\.gff";
    my $gff_exon                 = $file_prefix . "\.exon\.gff";
    my $gff_exon_tRNA            = $file_prefix . "\.exon_tRNA\.gff";
    my $gff_exon_pseudogene      = $file_prefix . "\.exon_pseudogene\.gff";
    my $gff_intron               = $file_prefix . "\.intron\.gff";
    my $gff_intron_tRNA          = $file_prefix . "\.intron_tRNA\.gff";
    my $gff_intron_pseudogene    = $file_prefix . "\.intron_pseudogene\.gff";
    my $gff_intron_confirmed_CDS = $file_prefix . "\.intron_confirmed_CDS\.gff";
    my $gff_intron_confirmed_UTR = $file_prefix . "\.intron_confirmed_UTR\.gff";
    my $gff_repeats              = $file_prefix . "\.repeats\.gff";
    my $gff_tc_insertions        = $file_prefix . "\.tc_insertions\.gff";
    my $gff_blastx               = $file_prefix . "\.blastx\.gff";
    my $gff_tblastx_briggsae     = $file_prefix . "\.tblastx_briggsae\.gff";
    my $gff_assembly_tags        = $file_prefix . "\.assembly_tags\.gff";
    my $gff_prosite              = $file_prefix . "\.prosite\.gff";
    my $gff_oligos               = $file_prefix . "\.oligos\.gff";
    my $gff_alleles              = $file_prefix . "\.alleles\.gff";
    my $gff_clone_ends           = $file_prefix . "\.clone_ends\.gff";
    my $gff_ts_site              = $file_prefix . "\.ts_site\.gff";
    my $gff_RNAi                 = $file_prefix . "\.RNAi\.gff";
    my $gff_genepair             = $file_prefix . "\.genepair\.gff";
    my $gff_PCR_products         = $file_prefix . "\.PCR_products\.gff";
    my $gff_cDNA_for_RNAi        = $file_prefix . "\.cDNA_for_RNAi\.gff";
    my $gff_BLAT_EST_BEST        = $file_prefix . "\.BLAT_EST_BEST\.gff";
    my $gff_BLAT_EST_OTHER       = $file_prefix . "\.BLAT_EST_OTHER\.gff";
    my $gff_BLAT_mRNA_BEST       = $file_prefix . "\.BLAT_mRNA_BEST\.gff";
    my $gff_BLAT_mRNA_OTHER      = $file_prefix . "\.BLAT_mRNA_OTHER\.gff";
    my $gff_BLATX_NEMATODE       = $file_prefix . "\.BLATX_NEMATODE\.gff";
    my $gff_Expr_profile         = $file_prefix . "\.Expr_profile\.gff";
    my $gff_UTR                  = $file_prefix . "\.UTR\.gff";

    
    open (GFF_CLONE_PATH, ">$datadir/GFF_SPLITS/$gff_clone_path");
    print GFF_CLONE_PATH  "##Version: $cvs_version\n";
    print GFF_CLONE_PATH  "##date $rundate\n";

    open (GFF_GENES, ">$datadir/GFF_SPLITS/$gff_genes");
    print GFF_GENES  "##Version: $cvs_version\n";
    print GFF_GENES  "##date $rundate\n";

    open (GFF_PSEUDOGENES, ">$datadir/GFF_SPLITS/$gff_pseudogenes");
    print GFF_PSEUDOGENES  "##Version: $cvs_version\n";
    print GFF_PSEUDOGENES  "##date $rundate\n";

    open (GFF_RNA, ">$datadir/GFF_SPLITS/$gff_rna");
    print GFF_RNA  "##Version: $cvs_version\n";
    print GFF_RNA  "##date $rundate\n";

    open (GFF_REST, ">$datadir/GFF_SPLITS/$gff_rest");
    print GFF_REST  "##Version: $cvs_version\n";
    print GFF_REST  "##date $rundate\n";

    open (GFF_CDS_EXON, ">$datadir/GFF_SPLITS/$gff_CDS_exon");
    print GFF_CDS_EXON  "##Version: $cvs_version\n";
    print GFF_CDS_EXON  "##date $rundate\n";

    open (GFF_EXON, ">$datadir/GFF_SPLITS/$gff_exon");
    print GFF_EXON  "##Version: $cvs_version\n";
    print GFF_EXON  "##date $rundate\n";

    open (GFF_EXON_tRNA, ">$datadir/GFF_SPLITS/$gff_exon_tRNA");
    print GFF_EXON_tRNA  "##Version: $cvs_version\n";
    print GFF_EXON_tRNA  "##date $rundate\n";

    open (GFF_EXON_PSEUDOGENE, ">$datadir/GFF_SPLITS/$gff_exon_pseudogene");
    print GFF_EXON_PSEUDOGENE  "##Version: $cvs_version\n";
    print GFF_EXON_PSEUDOGENE  "##date $rundate\n";

    open (GFF_INTRON, ">$datadir/GFF_SPLITS/$gff_intron");
    print GFF_INTRON  "##Version: $cvs_version\n";
    print GFF_INTRON  "##date $rundate\n";

    open (GFF_INTRON_tRNA, ">$datadir/GFF_SPLITS/$gff_intron_tRNA");
    print GFF_INTRON_tRNA  "##Version: $cvs_version\n";
    print GFF_INTRON_tRNA  "##date $rundate\n";

    open (GFF_INTRON_PSEUDOGENE, ">$datadir/GFF_SPLITS/$gff_intron_pseudogene");
    print GFF_INTRON_PSEUDOGENE  "##Version: $cvs_version\n";
    print GFF_INTRON_PSEUDOGENE  "##date $rundate\n";

    open (GFF_INTRON_CONFIRMED_CDS, ">$datadir/GFF_SPLITS/$gff_intron_confirmed_CDS");
    print GFF_INTRON_CONFIRMED_CDS  "##Version: $cvs_version\n";
    print GFF_INTRON_CONFIRMED_CDS  "##date $rundate\n";

    open (GFF_INTRON_CONFIRMED_UTR, ">$datadir/GFF_SPLITS/$gff_intron_confirmed_UTR");
    print GFF_INTRON_CONFIRMED_UTR  "##Version: $cvs_version\n";
    print GFF_INTRON_CONFIRMED_UTR  "##date $rundate\n";

    open (GFF_REPEATS, ">$datadir/GFF_SPLITS/$gff_repeats");
    print GFF_REPEATS  "##Version: $cvs_version\n";
    print GFF_REPEATS  "##date $rundate\n";

    open (GFF_TC_INSERTIONS, ">$datadir/GFF_SPLITS/$gff_tc_insertions");
    print GFF_TC_INSERTIONS  "##Version: $cvs_version\n";
    print GFF_TC_INSERTIONS  "##date $rundate\n";

    open (GFF_BLASTX, ">$datadir/GFF_SPLITS/$gff_blastx");
    print GFF_BLASTX  "##Version: $cvs_version\n";
    print GFF_BLASTX  "##date $rundate\n";

    open (GFF_TBLASTX_BRIGGSAE, ">$datadir/GFF_SPLITS/$gff_tblastx_briggsae");
    print GFF_TBLASTX_BRIGGSAE  "##Version: $cvs_version\n";
    print GFF_TBLASTX_BRIGGSAE  "##date $rundate\n";
 
    open (GFF_ASSEMBLY_TAGS, ">$datadir/GFF_SPLITS/$gff_assembly_tags");
    print GFF_ASSEMBLY_TAGS  "##Version: $cvs_version\n";
    print GFF_ASSEMBLY_TAGS  "##date $rundate\n";

    open (GFF_TS_SITE, ">$datadir/GFF_SPLITS/$gff_ts_site");
    print GFF_TS_SITE  "##Version: $cvs_version\n";
    print GFF_TS_SITE  "##date $rundate\n";

    open (GFF_PROSITE, ">$datadir/GFF_SPLITS/$gff_prosite");
    print GFF_PROSITE  "##Version: $cvs_version\n";
    print GFF_PROSITE  "##date $rundate\n";

    open (GFF_OLIGOS, ">$datadir/GFF_SPLITS/$gff_oligos");
    print GFF_OLIGOS  "##Version: $cvs_version\n";
    print GFF_OLIGOS  "##date $rundate\n";

    open (GFF_ALLELES, ">$datadir/GFF_SPLITS/$gff_alleles");
    print GFF_ALLELES  "##Version: $cvs_version\n";
    print GFF_ALLELES  "##date $rundate\n";

    open (GFF_CLONE_ENDS, ">$datadir/GFF_SPLITS/$gff_clone_ends");
    print GFF_CLONE_ENDS  "##Version: $cvs_version\n";
    print GFF_CLONE_ENDS  "##date $rundate\n";

    open (GFF_RNAi, ">$datadir/GFF_SPLITS/$gff_RNAi");
    print GFF_RNAi  "##Version: $cvs_version\n";
    print GFF_RNAi  "##date $rundate\n";

    open (GFF_GENEPAIR, ">$datadir/GFF_SPLITS/$gff_genepair");
    print GFF_GENEPAIR  "##Version: $cvs_version\n";
    print GFF_GENEPAIR  "##date $rundate\n";

    open (GFF_PCR_PRODUCTS, ">$datadir/GFF_SPLITS/$gff_PCR_products");
    print GFF_PCR_PRODUCTS  "##Version: $cvs_version\n";
    print GFF_PCR_PRODUCTS  "##date $rundate\n";

    open (GFF_CDNA_FOR_RNAI,  ">$datadir/GFF_SPLITS/$gff_cDNA_for_RNAi");
    print GFF_CDNA_FOR_RNAI   "##Version: $cvs_version\n";
    print GFF_CDNA_FOR_RNAI   "##date $rundate\n";

    open (GFF_BLAT_EST_BEST,  ">$datadir/GFF_SPLITS/$gff_BLAT_EST_BEST");
    print GFF_BLAT_EST_BEST   "##Version: $cvs_version\n";
    print GFF_BLAT_EST_BEST   "##date $rundate\n";

    open (GFF_BLAT_EST_OTHER, ">$datadir/GFF_SPLITS/$gff_BLAT_EST_OTHER");
    print GFF_BLAT_EST_OTHER  "##Version: $cvs_version\n";
    print GFF_BLAT_EST_OTHER  "##date $rundate\n";

    open (GFF_BLAT_MRNA_BEST,     ">$datadir/GFF_SPLITS/$gff_BLAT_mRNA_BEST");
    print GFF_BLAT_MRNA_BEST     "##Version: $cvs_version\n";
    print GFF_BLAT_MRNA_BEST     "##date $rundate\n";

    open (GFF_BLAT_MRNA_OTHER,    ">$datadir/GFF_SPLITS/$gff_BLAT_mRNA_OTHER");
    print GFF_BLAT_MRNA_OTHER     "##Version: $cvs_version\n";
    print GFF_BLAT_MRNA_OTHER     "##date $rundate\n";

    open (GFF_BLATX_NEMATODE,     ">$datadir/GFF_SPLITS/$gff_BLATX_NEMATODE");
    print GFF_BLATX_NEMATODE      "##Version: $cvs_version\n";
    print GFF_BLATX_NEMATODE      "##date $rundate\n";

    open (GFF_EXPR_PROFILE,    ">$datadir/GFF_SPLITS/$gff_Expr_profile");
    print GFF_EXPR_PROFILE     "##Version: $cvs_version\n";
    print GFF_EXPR_PROFILE     "##date $rundate\n";

    open (GFF_UTR,    ">$datadir/GFF_SPLITS/$gff_UTR");
    print GFF_UTR     "##Version: $cvs_version\n";
    print GFF_UTR     "##date $rundate\n";



    #########################################################
    # open the gff file                                     #
    #########################################################
    
    my $gff_length = file_size("/wormsrv2/autoace/CHROMOSOMES/$file") - 3;
    print LOG "File contains $gff_length lines\n";
    my $running_total = -1;

    open (GFF, "</wormsrv2/autoace/CHROMOSOMES/$file");
    while (<GFF>) {
      my $found_a_home;
	chomp;
	$line_count++;

	if (/\#\#sequence-region/) {
	    print GFF_REST                 "$_\n";
	    print GFF_CLONE_PATH           "$_\n";
	    print GFF_GENES                "$_\n";
	    print GFF_PSEUDOGENES          "$_\n";
	    print GFF_RNA                  "$_\n";
	    print GFF_CDS_EXON             "$_\n";
	    print GFF_EXON                 "$_\n";
	    print GFF_EXON_tRNA            "$_\n";
	    print GFF_EXON_PSEUDOGENE      "$_\n";
	    print GFF_INTRON               "$_\n";
	    print GFF_INTRON_tRNA          "$_\n";
	    print GFF_INTRON_PSEUDOGENE    "$_\n";
	    print GFF_INTRON_CONFIRMED_CDS "$_\n";
	    print GFF_INTRON_CONFIRMED_UTR "$_\n";
	    print GFF_REPEATS              "$_\n";
	    print GFF_TC_INSERTIONS        "$_\n";
	    print GFF_BLASTX               "$_\n";
	    print GFF_TBLASTX_BRIGGSAE     "$_\n";
	    print GFF_ASSEMBLY_TAGS        "$_\n";
	    print GFF_TS_SITE              "$_\n";
	    print GFF_PROSITE              "$_\n";
	    print GFF_OLIGOS               "$_\n";
	    print GFF_ALLELES              "$_\n";
	    print GFF_CLONE_ENDS           "$_\n";
	    print GFF_RNAi                 "$_\n";
	    print GFF_GENEPAIR             "$_\n";
	    print GFF_PCR_PRODUCTS         "$_\n";
	    print GFF_CDNA_FOR_RNAI        "$_\n";
	    print GFF_BLAT_EST_BEST        "$_\n";
	    print GFF_BLAT_EST_OTHER       "$_\n";
	    print GFF_BLAT_MRNA_BEST       "$_\n";
	    print GFF_BLAT_MRNA_OTHER      "$_\n";
	    print GFF_BLATX_NEMATODE       "$_\n";
	    print GFF_EXPR_PROFILE         "$_\n";
	    print GFF_UTR                  "$_\n";
	    next;
	}
	#skip header lines of file
	next if($_ =~ /^\#/);
        my ($name,$feature,$method,$start,$stop,$score,$strand,$other);
	($name,$method,$feature,$start,$stop,$score,$strand,$other,$name) = split (/\t/,$_);
	     
	undef $found_a_home;

	################################
	# Clone path                   #
	################################

	if (($method eq "Genomic_canonical") && ($feature eq "Sequence")) {
	    print GFF_CLONE_PATH "$_\n";
	    $found_a_home = 1;
	}
	
	################################
	# Genes
	################################
	
#	if (  (($method eq "curated")          && ($feature eq "transcription")) || 
#	      (($method eq "provisional")      && ($feature eq "transcription")) || 
#	      (($method eq "tRNAscan-SE-1.11") && ($feature eq "Sequence"))    ) {

	if (  (($method eq "curated")          && ($feature eq "Sequence")) || 
	      (($method eq "provisional")      && ($feature eq "Sequence")) || 
	      (($method eq "tRNAscan-SE-1.11") && ($feature eq "Sequence"))    ) {


	    print GFF_GENES "$_\n";
	    $found_a_home = 1;
	}

	if (  ($method eq "Pseudogene") && ($feature eq "Sequence")  ) {
	    print GFF_PSEUDOGENES "$_\n";
	    $found_a_home = 1;
	}
	
	################################
	# RNA genes
	################################

	if ( (($method eq "RNA") || ($method eq "tRNAscan-SE-1.11")) && ($feature eq "Sequence") ) {
	    
#	    print "$_\n" if ($debug);
	    print GFF_RNA "$_\n";
	    $found_a_home = 1;
	}

	################################
	# CDS Exon
	################################

	if ((($method eq "curated") || ($method eq "provisional")) && ($feature eq "CDS")) {
#	    print "$_\n" if ($debug);
	    print GFF_CDS_EXON "$_\n";
	    $found_a_home = 1;
	}
	################################
	# Exon
	################################

	if ((($method eq "curated") || ($method eq "provisional")) && ($feature eq "exon")) {
#	    print "$_\n" if ($debug);
	    print GFF_EXON "$_\n";
	    $found_a_home = 1;
	}
	    
	if (($method eq "tRNAscan-SE-1.11") && ($feature eq "exon")) {
	    print GFF_EXON_tRNA "$_\n";
	    $found_a_home = 1;
	}
	    
	if (($method eq "Pseudogene") && ($feature eq "exon")) {
	    print GFF_EXON_PSEUDOGENE "$_\n";
	    $found_a_home = 1;
	}
	    
	################################
	# Intron
	################################

	if ((($method eq "curated") || ($method eq "provisional")) && ($feature eq "intron")) {
#	    print "$_\n" if ($debug);
	    print GFF_INTRON "$_\n";
	    $found_a_home = 1;
	}
	if (($method eq "tRNAscan-SE-1.11") && ($feature eq "intron")) {
	    print GFF_INTRON_tRNA "$_\n";
	    $found_a_home = 1;
	}
	if (($method eq "Pseudogene") && ($feature eq "intron")) {
	    print GFF_INTRON_PSEUDOGENE "$_\n";
	    $found_a_home = 1;
	}
	
	################################
	# Intron confirmed by ESTs
	################################

	if (/Confirmed_by_EST/) {
	    print GFF_INTRON_CONFIRMED_CDS "$_\n";
	    $found_a_home = 1;
	}


	if (/Confirmed_by_cDNA/) {
	    print GFF_INTRON_CONFIRMED_CDS "$_\n";
	    $found_a_home = 1;
	}

	if (/Confirmed_in_UTR/) {
	    print GFF_INTRON_CONFIRMED_UTR "$_\n";
	    $found_a_home = 1;
	}

	################################
        # Repeats
	################################
	
	if (($method eq "tandem") || ($method eq "inverted") || ($method eq "hmmfs.3") || ($method eq "scan") || ($feature eq "repeat_region")) {
#	    print "$_\n" if ($debug);
	    print GFF_REPEATS "$_\n";
	    $found_a_home = 1;
	}


	################################
   	# TC1 insertions
	################################

	if ($method eq "BLASTN_TC1") {
#	    print "$_\n" if ($debug);
	    print GFF_TC_INSERTIONS "$_\n";
	    $found_a_home = 1;
	}
	
	################################
   	# Protein similarities
	################################

	if ($method eq "BLASTX") {
#	    print "$_\n" if ($debug);
	    print GFF_BLASTX "$_\n";
	    $found_a_home = 1;
	}
	

	################################
   	# C.briggsae similarities 
	################################

	if (($method eq "TBLASTX_briggsae") || ($method eq "BLASTN_EST_briggsae") || ($method eq "TBLASTX_C.briggsae") || ($method eq "BLASTN_briggsae_cosmid")  || ($method eq "BLASTN_eleg_brig")) {
#	    print "$_\n" if ($debug);
	    print GFF_TBLASTX_BRIGGSAE "$_\n";
	    $found_a_home = 1;
	}
	
	################################
   	# Assembly tags
	################################

	if ($method eq "assembly_tag") {
#	    print "$_\n" if ($debug);
	    print GFF_ASSEMBLY_TAGS "$_\n";
	    $found_a_home = 1;
	}
	
	################################
   	# TS site
	################################

	if ((/misc_feature/) && (/trans-splice site/)) {
#	    print "$_\n" if ($debug);
	    print GFF_TS_SITE "$_\n";
	    $found_a_home = 1;
	}
	
	################################
   	# Prosite
	################################

	if ($method eq "Queryprosite") {
#	    print "$_\n" if ($debug);
	    print GFF_PROSITE "$_\n";
	    $found_a_home = 1;
	}
	

	################################
   	# Oligo mapping 
	################################

	if ($feature eq "OLIGO") {
#	    print "$_\n" if ($debug);
	    print GFF_OLIGOS "$_\n";
	    $found_a_home = 1;
	}
	
	################################
   	# RNAi 
	################################

	if ($method eq "RNAi") {
#	    print "$_\n" if ($debug);
	    print GFF_RNAi "$_\n";
	    $found_a_home = 1;
	}
	
	################################
   	# GENEPAIR
	################################

	if ($method eq "GenePair_STS") {
#	    print "$_\n" if ($debug);
	    print GFF_GENEPAIR "$_\n";
	    $found_a_home = 1;
	}
	
	################################
   	# Alleles
	################################

	if (/Allele/) {
#	    print "$_\n" if ($debug);
	    print GFF_ALLELES "$_\n";
	    $found_a_home = 1;
	}
	

	################################
   	# Clone ends
	################################

	if ((/Clone_left_end/) || (/Clone_right_end/)) {
#	    print "$_\n" if ($debug);
	    print GFF_CLONE_ENDS "$_\n";
	    $found_a_home = 1;
	}


	################################
   	# PCR Products
	################################

	if (/PCR_product/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_PCR_PRODUCTS "$_\n";
	  $found_a_home = 1;
	}

	################################
   	# cDNA for RNAi
	################################

	if (/cDNA_for_RNAi/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_CDNA_FOR_RNAI "$_\n";
	  $found_a_home = 1;
	}

	################################
   	# BLAT
	################################


	if (/BLAT_EST_BEST/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_BLAT_EST_BEST "$_\n";
	  $found_a_home = 1;
	}

	if (/BLAT_EST_OTHER/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_BLAT_EST_OTHER "$_\n";
	  $found_a_home = 1;
	}


	################################
   	# BLAT_mRNA 
	################################

	if (/BLAT_mRNA_BEST/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_BLAT_MRNA_BEST "$_\n";
	  $found_a_home = 1;
	}

	if (/BLAT_mRNA_OTHER/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_BLAT_MRNA_OTHER "$_\n";
	  $found_a_home = 1;
	}


	################################
   	# BLATX_NEMATODE
	################################

	if (/BLATX_NEMATODE/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_BLATX_NEMATODE "$_\n";
	  $found_a_home = 1;
	}

	################################
   	# Expr_profile
	################################

	if (/Expr_profile/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_EXPR_PROFILE "$_\n";
	  $found_a_home = 1;
	}

	################################
   	# UTR
	################################

	if (/UTR/) {
	  #	    print "$_\n" if ($debug);
	  print GFF_UTR "$_\n";
	  $found_a_home = 1;
	}


	print GFF_REST "$_\n" unless ($found_a_home); 
	$running_total++ if ($found_a_home); 
	    
      }

    close GFF;    
    close GFF_REST;
    close GFF_CLONE_PATH;
    close GFF_GENES;
    close GFF_PSEUDOGENES;
    close GFF_RNA;
    close GFF_CDS_EXON;
    close GFF_EXON;
    close GFF_EXON_tRNA;
    close GFF_EXON_PSEUDOGENE;
    close GFF_INTRON;
    close GFF_INTRON_tRNA;
    close GFF_INTRON_PSEUDOGENE;
    close GFF_INTRON_CONFIRMED_CDS;
    close GFF_INTRON_CONFIRMED_UTR;
    close GFF_REPEATS;
    close GFF_TC_INSERTIONS;
    close GFF_BLASTX;
    close GFF_TBLASTX_BRIGGSAE;
    close GFF_ASSEMBLY_TAGS;
    close GFF_TS_SITE;
    close GFF_PROSITE;
    close GFF_OLIGOS;
    close GFF_ALLELES;
    close GFF_CLONE_ENDS;
    close GFF_PCR_PRODUCTS;
    close GFF_CDNA_FOR_RNAI;
    close GFF_BLAT_EST_BEST;
    close GFF_BLAT_EST_OTHER;
    close GFF_BLAT_MRNA_BEST;
    close GFF_BLAT_MRNA_OTHER;
    close GFF_BLATX_NEMATODE;
    close GFF_EXPR_PROFILE;
    close GFF_UTR;

    ########################################
    # count file lengths for all GFF files #
    ###########################################

    unless ($opt_s) {

	my $total_lines = 0;
	print "\n\nGFF file lengths\n\n";
	
	my $gff_length_clone_path = file_size("$datadir/GFF_SPLITS/$gff_clone_path") - 3;
	$total_lines = $total_lines + $gff_length_clone_path;
	print "$gff_clone_path\t: $gff_length_clone_path\n";
	
	my $gff_length_genes = file_size("$datadir/GFF_SPLITS/$gff_genes") - 3;
	$total_lines = $total_lines + $gff_length_genes;
	print "$gff_genes   \t\t: $gff_length_genes\n";
	
	my $gff_length_pseudogenes = file_size("$datadir/GFF_SPLITS/$gff_pseudogenes") - 3;
	$total_lines = $total_lines + $gff_length_pseudogenes;
	print "$gff_pseudogenes   \t\t: $gff_length_pseudogenes\n";
	
	my $gff_length_rna = file_size("$datadir/GFF_SPLITS/$gff_rna") - 3;
	$total_lines = $total_lines + $gff_length_rna;
	print "$gff_rna     \t\t: $gff_length_rna\n";
	
	my $gff_length_CDS_exon = file_size("$datadir/GFF_SPLITS/$gff_CDS_exon") - 3;
	$total_lines = $total_lines + $gff_length_CDS_exon;
	print "$gff_CDS_exon   \t\t: $gff_length_CDS_exon\n";
	
	my $gff_length_exon = file_size("$datadir/GFF_SPLITS/$gff_exon") - 3;
	$total_lines = $total_lines + $gff_length_exon;
	print "$gff_exon   \t\t: $gff_length_exon\n";
	
	my $gff_length_exon_tRNA = file_size("$datadir/GFF_SPLITS/$gff_exon_tRNA") - 3;
	$total_lines = $total_lines + $gff_length_exon_tRNA;
	print "$gff_exon_tRNA   \t\t: $gff_length_exon_tRNA\n";
	
	my $gff_length_exon_pseudogene = file_size("$datadir/GFF_SPLITS/$gff_exon_pseudogene") - 3;
	$total_lines = $total_lines + $gff_length_exon_pseudogene;
	print "$gff_exon_pseudogene   \t: $gff_length_exon_pseudogene\n";

	my $gff_length_intron = file_size("$datadir/GFF_SPLITS/$gff_intron") - 3;
	$total_lines = $total_lines + $gff_length_intron;
	print "$gff_intron   \t\t: $gff_length_intron\n";
    
	my $gff_length_intron_tRNA = file_size("$datadir/GFF_SPLITS/$gff_intron_tRNA") - 3;
	$total_lines = $total_lines + $gff_length_intron_tRNA;
	print "$gff_intron_tRNA   \t\t: $gff_length_intron_tRNA\n";
	
	my $gff_length_intron_pseudogene = file_size("$datadir/GFF_SPLITS/$gff_intron_pseudogene") - 3;
	$total_lines = $total_lines + $gff_length_intron_pseudogene;
	print "$gff_intron_pseudogene   \t: $gff_length_intron_pseudogene\n";
	
	my $gff_length_intron_confirmed_CDS = file_size("$datadir/GFF_SPLITS/$gff_intron_confirmed_CDS") - 3;
	$total_lines = $total_lines + $gff_length_intron_confirmed_CDS;
	print "$gff_intron_confirmed_CDS\t: $gff_length_intron_confirmed_CDS\n";
	
	my $gff_length_intron_confirmed_UTR = file_size("$datadir/GFF_SPLITS/$gff_intron_confirmed_UTR") - 3;
	$total_lines = $total_lines + $gff_length_intron_confirmed_UTR;
	print "$gff_intron_confirmed_UTR\t: $gff_length_intron_confirmed_UTR\n";
	
	my $gff_length_repeats = file_size("$datadir/GFF_SPLITS/$gff_repeats") - 3;
	$total_lines = $total_lines + $gff_length_repeats;
	print "$gff_repeats   \t\t: $gff_length_repeats\n";
	
	my $gff_length_tc_insertions = file_size("$datadir/GFF_SPLITS/$gff_tc_insertions") - 3;
	$total_lines = $total_lines + $gff_length_tc_insertions;
	print "$gff_tc_insertions   \t: $gff_length_tc_insertions\n";
	
	my $gff_length_blastx = file_size("$datadir/GFF_SPLITS/$gff_blastx") - 3;
	$total_lines = $total_lines + $gff_length_blastx;
	print "$gff_blastx   \t\t: $gff_length_blastx\n";
	
	my $gff_length_tblastx_briggsae = file_size("$datadir/GFF_SPLITS/$gff_tblastx_briggsae") - 3;
	$total_lines = $total_lines + $gff_length_tblastx_briggsae;
	print "$gff_tblastx_briggsae    \t: $gff_length_tblastx_briggsae\n";
	
	my $gff_length_assembly_tags = file_size("$datadir/GFF_SPLITS/$gff_assembly_tags") - 3;
	$total_lines = $total_lines + $gff_length_assembly_tags;
	print "$gff_assembly_tags   \t: $gff_length_assembly_tags\n";
	
	my $gff_length_ts_site = file_size("$datadir/GFF_SPLITS/$gff_ts_site") - 3;
	$total_lines = $total_lines + $gff_length_ts_site;
	print "$gff_ts_site   \t\t: $gff_length_ts_site\n";
	
	my $gff_length_prosite = file_size("$datadir/GFF_SPLITS/$gff_prosite") - 3;
	$total_lines = $total_lines + $gff_length_prosite;
	print "$gff_prosite   \t\t: $gff_length_prosite\n";
	
	my $gff_length_oligos = file_size("$datadir/GFF_SPLITS/$gff_oligos") - 3;
	$total_lines = $total_lines + $gff_length_oligos;
	print "$gff_oligos   \t\t: $gff_length_oligos\n";
	
	my $gff_length_alleles = file_size("$datadir/GFF_SPLITS/$gff_alleles") - 3;
	$total_lines = $total_lines + $gff_length_alleles;
	print "$gff_alleles   \t\t: $gff_length_alleles\n";
	
	my $gff_length_clone_ends = file_size("$datadir/GFF_SPLITS/$gff_clone_ends") - 3;
	$total_lines = $total_lines + $gff_length_clone_ends;
	print "$gff_clone_ends   \t\t: $gff_length_clone_ends\n";
	
	my $gff_length_RNAi = file_size("$datadir/GFF_SPLITS/$gff_RNAi") - 3;
	$total_lines = $total_lines + $gff_length_RNAi;
	print "$gff_RNAi   \t\t: $gff_length_RNAi\n";
	
	my $gff_length_genepair = file_size("$datadir/GFF_SPLITS/$gff_genepair") - 3;
	$total_lines = $total_lines + $gff_length_genepair;
	print "$gff_genepair   \t\t: $gff_length_genepair\n";
	
	my $gff_length_PCR_products = file_size("$datadir/GFF_SPLITS/$gff_PCR_products") - 3;
	$total_lines = $total_lines + $gff_length_PCR_products;
	print "$gff_PCR_products   \t\t: $gff_length_PCR_products\n";
	
	my $gff_length_cDNA_for_RNAi = file_size("$datadir/GFF_SPLITS/$gff_cDNA_for_RNAi") - 3;
	$total_lines = $total_lines + $gff_length_cDNA_for_RNAi;
	print "$gff_cDNA_for_RNAi   \t\t: $gff_length_cDNA_for_RNAi\n";
	
	my $gff_length_BLAT_EST_BEST   = file_size("$datadir/GFF_SPLITS/$gff_BLAT_EST_BEST") - 3;
	$total_lines = $total_lines + $gff_length_BLAT_EST_BEST;
	print "$gff_BLAT_EST_BEST   \t\t: $gff_length_BLAT_EST_BEST\n";
	
	my $gff_length_BLAT_EST_OTHER = file_size("$datadir/GFF_SPLITS/$gff_BLAT_EST_OTHER") - 3;
	$total_lines = $total_lines + $gff_length_BLAT_EST_OTHER;
	print "$gff_BLAT_EST_OTHER   \t\t: $gff_length_BLAT_EST_OTHER\n";
	
	my $gff_length_BLAT_MRNA_BEST = file_size("$datadir/GFF_SPLITS/$gff_BLAT_mRNA_BEST") - 3;
	$total_lines = $total_lines + $gff_length_BLAT_MRNA_BEST;
	print "$gff_BLAT_mRNA_BEST   \t\t: $gff_length_BLAT_MRNA_BEST\n";
	
	my $gff_length_BLAT_MRNA_OTHER = file_size("$datadir/GFF_SPLITS/$gff_BLAT_mRNA_OTHER") - 3;
	$total_lines = $total_lines + $gff_length_BLAT_MRNA_OTHER;
	print "$gff_BLAT_mRNA_OTHER   \t\t: $gff_length_BLAT_MRNA_OTHER\n";
	
	my $gff_length_BLATX_NEMATODE = file_size("$datadir/GFF_SPLITS/$gff_BLATX_NEMATODE") - 3;
	$total_lines = $total_lines + $gff_length_BLATX_NEMATODE;
	print "$gff_BLATX_NEMATODE   \t\t: $gff_length_BLATX_NEMATODE\n";
	
	my $gff_length_Expr_profile = file_size("$datadir/GFF_SPLITS/$gff_Expr_profile") - 3;
	$total_lines = $total_lines + $gff_length_Expr_profile;
	print "$gff_Expr_profile   \t\t: $gff_length_Expr_profile\n";

	my $gff_length_UTR = file_size("$datadir/GFF_SPLITS/$gff_UTR") - 3;
	$total_lines = $total_lines + $gff_length_UTR;
	print "$gff_UTR   \t\t: $gff_length_UTR\n";


	
	my $gff_length_rest = file_size("$datadir/GFF_SPLITS/$gff_rest") - 3;
	$total_lines = $total_lines + $gff_length_rest;
	print "$gff_rest   \t\t: $gff_length_rest\n";
	
	
	my $lines_split = int ((($running_total / $gff_length) * 100) + 0.5);
	my $discarded_lines = $gff_length - $total_lines;
	print "\nLine parsed to files : $gff_length $running_total [$lines_split %]\n";
	print "Discarded lines       : $discarded_lines\n";
	print "\n\n";
    }

    #########################################
    # Alter clone file to include accession #
    #########################################
   
    system ("GFF_with_accessions $datadir/GFF_SPLITS/${file_prefix}.clone_path.gff > $datadir/GFF_SPLITS/${file_prefix}.clone_acc.gff");
    system ("GFF_with_wormpep_accessions $datadir/GFF_SPLITS/${file_prefix}.genes.gff > $datadir/GFF_SPLITS/${file_prefix}.genes_acc.gff");
    system ("mv -f $datadir/GFF_SPLITS/${file_prefix}.genes_acc.gff $datadir/GFF_SPLITS/${file_prefix}.genes.gff");
    
}


close LOG;


###############################
# Mail log to curator         #
###############################

open (OUTLOG,  "|/usr/bin/mailx -s \"WormBase Report: GFFsplitter\" $maintainers ");
open (READLOG, "<$logfile");
while (<READLOG>) {
    print OUTLOG "$_";
}
close READLOG;
close OUTLOG;

###############################
# hasta luego                 #
###############################

exit 0;

sub file_size {

    my $file = shift;
    my $file_length;
    open (FILE_SIZE, "/bin/cat $file | wc -l |");
    while (<FILE_SIZE>) {
	chomp;
	s/\s//g;
	$file_length = $_;
    }
    close FILE_SIZE;
    print LOG "Counting No. of lines in file '$file' : $file_length\n" if ($debug);
    return $file_length;
}


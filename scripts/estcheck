#!/usr/local/bin/perl5.8.0 -w
#
# estcheck
# v 0.1
#
# Cronjob integrity check controls for generic ACEDB database.
#
# Usage: estcheck [-options]
#

#####################################################################################################


#################################################################################
# variables                                                                     #
#################################################################################

$|=1;

use IO::Handle;
use Getopt::Std;
use lib '/wormsrv2/scripts';
use Wormbase;
use strict;

 ##############################
 # Script variables (run)     #
 ##############################

my $rundate = `date +%y%m%d`; chomp $rundate;
my $runtime = `date +%H:%M:%S`; chomp $runtime;

 ##############################
 # command-line options       #
 ##############################

my $opt_d="";   # Verbose debug mode
my $opt_h="";   # Help/Usage page

getopts ('hd');
&usage(0) if ($opt_h);
my $debug = $opt_d;

 ##############################
 # Paths etc                  #
 ##############################

my $tace = &tace;    # tace executable path
my $dbdir  = "/wormsrv2/autoace";                                  # Database path
my $outdir = "/wormsrv2/autoace/CHECKS";
my $WS_version = &get_wormbase_version_name;

 ########################################
 # Open logfile                         #
 ########################################

my $log="/wormsrv2/logs/estcheck.$WS_version.$rundate";

open (LOG,">$log");
LOG->autoflush();

print LOG "# estcheck\n";     
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";

 ########################################
 # Loop through the EST sequences       #
 ########################################

my (%EST_acc, %EST_len, %EST_match);

$ENV{'ACEDB'} = $dbdir;
my $command=<<EOF;
Table-maker -p "$dbdir/wquery/EST_match.def"
quit
EOF

open (TACE, "echo '$command' | $tace | ") || die "Couldn't connect to $dbdir using tace\n";
while (<TACE>) {

  chomp;
  next if ($_ eq "");
  next if (/acedb\>/);
  next if (/\/\//);
  s/\"//g;
  (/^(\S+)\s/);
  
  my @f = split /\t/;
  #    print "Processing EST: $f[0]\n";
  
  $EST_acc{$f[0]}   = $f[1];
  $EST_len{$f[0]}   = $f[2];
  $EST_match{$f[0]} = ""; # initialise in case there is no match
  $EST_match{$f[0]} = $f[3];

}
close TACE;

print "Assigned all EST sequences\n\n";


 ########################################
 # Loop through the EST clones          #
 ########################################

my %EST_clone;

$command=<<EOF;
Table-maker -p "$dbdir/wquery/EST_clone.def"
quit
EOF

open (TACE, "echo '$command' | $tace | ");
while (<TACE>) {
    chomp;
    next if ($_ eq "");
    next if (/acedb\>/);
    next if (/\/\//);
    s/\"//g;
    (/^(\S+)\s/);

    my @f = split /\t/;
    $EST_clone{$f[0]} .= "$f[1] ";
}
close TACE;

print "Assigned all EST clone read pairs\n\n";


#########################
# open files for output #
#########################

open (EST_total, ">$outdir/EST_total.txt");
open (EST_unassigned_1, ">$outdir/EST_unassigned.txt");
open (EST_unassigned_2, ">$outdir/EST_unassigned.ace");

open (EST_mismatched_1, ">$outdir/EST_mismatched.txt");
open (EST_mismatched_2, ">$outdir/EST_mismatched.ace");

open (EST_no_accession_1, ">$outdir/EST_no_accession.txt");
open (EST_no_accession_2, ">$outdir/EST_no_accession.ace");

print EST_unassigned_2   "KeySet :\t\"Unassigned_ESTs.$rundate\"\n";
print EST_mismatched_2   "KeySet :\t\"Mismatched_ESTs.$rundate\"\n";
print EST_no_accession_2 "KeySet :\t\"No_accession.$rundate\"\n";


foreach my $EST (sort keys %EST_clone) {

  my ($first_match,$first_read);

# print "# $EST  \t  [$EST_clone{$EST}\b]\n";
  my @reads = split (/ /, $EST_clone{$EST});
  foreach my $read (@reads) {
    next if ($read eq "");
    ($EST_acc{$read} = "") if (!defined($EST_acc{$read}));
    ($EST_match{$read} = "") if (!defined($EST_match{$read}));
    ($EST_len{$read} = "") if (!defined($EST_len{$read}));
    print EST_total "$read\t$EST_acc{$read}\t$EST_len{$read}\t$EST_match{$read}\n";
    print EST_total "$read\t$EST_acc{$read}\t\n";
    
    # No accession
    if (!defined($EST_acc{$read})) {
      print LOG "=> $read has no accession number\n";
      print EST_no_accession_1 "$read has no accession number\n";
      print EST_no_accession_2 "Sequence : \"$read\"\n";
    }
    
    # No match in genome
    if (!defined($EST_match{$read})) {
      print LOG "=> $read is not attached to a CDS\n";
      print EST_unassigned_1 "$read is not attached to a CDS\n";
      print EST_unassigned_2 "Sequence : \"$read\"\n";
    }
    
    # Mismatch between .3 and .5 reads
    if(defined($first_match) && defined($first_read)){
      if ( ($first_match ne "") && ($EST_match{$read} ne $first_match)) {
	print LOG "=> $read is attached to a different CDS than $first_read : [${read}:$EST_match{$read} | $first_read:$first_match]\n";
	print EST_mismatched_1 "$read is attached to a different CDS than $first_read : [${read}:$EST_match{$read} | $first_read:$first_match]\n";
	print EST_mismatched_2 "Sequence : \"$read\"\n";
      } 
  }
    # Store .3 match for comparison
    $first_read  = $read;
    $first_match = $EST_match{$read};
  }
  #    print "\n"; 
}

close LOG;
close EST_total;
close EST_unassigned_1;
close EST_unassigned_2;
close EST_mismatched_1;
close EST_mismatched_2;
close EST_no_accession_1;
close EST_no_accession_2;

exit(0);

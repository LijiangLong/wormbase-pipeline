#!/usr/local/bin/perl5.6.0 -w
#
# autoace_minder
# dl
#
# Usage : autoace_minder [-options]
#

#################################################################################
# Initialise variables                                                          #
#################################################################################

$|=1;
use IO::Handle;
use Getopt::Long;
use lib "/wormsrv2/scripts/";
use Wormbase;
use strict;
use vars;

 ##############################
 # command-line options       #
 ##############################

my $initial;		# Start the build process 
my $unpack;		# unpack primaries	
my $gffdump;		# dump gff files
my $gffsplit;           # split gff files
my $agp;		# make agp files for the yellow brick road
my $buildpep;		# Build wormpep
my $addpep; 		# prepare pepace and then dump from pepace into autoace
my $buildrna;		# Build wormrna
my $blat;		# map similarities (BLAT jobs)
my $addblat;		# parse blat files
my $addhomol;            # parse similarity data from /ensembl_dump
my $map;		# map PCR, RNAi and WTP
my $full;		# Full release (used to do all the following)
my $acefile;		# Write .acefiles
my $build;		# Build autoace 
my $builddb;		# Build autoace : DB only
my $buildchrom;		# Build autoace : CHROMOSOMES directory	
my $buildrelease;	# Build autoace : Release directory
my $secure;		# copy autoace before blatting
my $check;		# Check DB consistency
my $confirm;            # Confirm gene models (EST|mRNA)
my $ftp;		# Public release to FTP site
my $debug;		# Verbose debug mode
my $help;		# Help/Usage page

GetOptions (
	    "initial"      => \$initial,
	    "unpack"       => \$unpack,
	    "gffdump"      => \$gffdump,
	    "gffsplit"     => \$gffsplit,
	    "agp"          => \$agp,
	    "buildpep"     => \$buildpep,
	    "addpep"       => \$addpep,
	    "buildrna"     => \$buildrna,
	    "blat"         => \$blat,
	    "addblat"      => \$addblat,
	    "addhomol"     => \$addhomol,
	    "map"          => \$map,
	    "full"         => \$full,
	    "acefile"      => \$acefile,
	    "build"        => \$build,
	    "builddb"      => \$builddb,
	    "buildchrom"   => \$buildchrom,
	    "buildrelease" => \$buildrelease,
	    "secure"       => \$secure,
	    "check"        => \$check,
	    "confirm"      => \$confirm,
	    "ftp"          => \$ftp,
	    "debug"        => \$debug,
	    "help"         => \$help,
	    "h"	           => \$help
);

 ##############################
 # Script variables (run)     #
 ##############################

my $maintainers = "dl1\@sanger.ac.uk krb\@sanger.ac.uk kj2\@sanger.ac.uk";
my $rundate     = `date +%y%m%d`; chomp $rundate;
my $runtime     = `date +%H:%M:%S`; chomp $runtime;
my $version     = &get_cvs_version("$0");

# specify location of scripts
my $scriptdir   = "/wormsrv2/scripts";

&usage(0) if ($help);

# debug mode modifies $maintainers to reduce e-mail load
($maintainers = "dl1\@sanger.ac.uk") if ($debug);

# build flag path
our $logdir     = "/wormsrv2/autoace/logs";
our $build_flag = "$logdir/build_in_progress";
our $WSver_file = "/wormsrv2/autoace/wspec/database.wrm";

our ($WS_version,$WS_previous);

our $tace =  "/nfs/disk100/acedb/RELEASE.DEVELOPMENT/bin.ALPHA_4/tace";


# are you building a new database?
&initiate_build if ($initial);

 #######################################
 # fetch WS version number             #
 #######################################

$WS_version = &get_wormbase_version;

# exit if no WS version is returned
&usage(1) if (!defined($WS_version));

# exit if WS version (database.wrm) is older than build_in_process flag
# i.e. the WS version has been changed since the start of the build
&usage(11) if (-M $build_flag < -M $WSver_file);

# manipulate to assign last WS release version
$WS_previous = $WS_version -1;

 ########################################
 # logfiles                             #
 ########################################

our $logfile = "/wormsrv2/logs/autoace_minder.WS${WS_version}.${rundate}";

open (LOG,">$logfile");
LOG->autoflush();

&logfile_details;


 ########################################
 # if all then set all flags            #
 ########################################

if ($full) {
    $acefile = 1; $build = 1; $check = 1; $buildpep = 1; $addpep = 1; $gffdump = 1; $map = 1; $agp = 1;
}

#################################################################################
# Main Loop                                                                     #
#################################################################################

# prepare
&prepare_primaries     if ($unpack);

# build
&make_acefiles         if ($acefile);
&make_autoace          if ($build | $builddb || $buildchrom || $buildrelease);

# checks
&check_release          if ($check);

# similarity matches
&pre_blat_copy          if ($secure);
&blat_jobs              if ($blat);
&parse_blat_files       if ($blat || $addblat);
&parse_homol_data       if ($addhomol);

# wormpep and protein work
&make_wormpep          if ($buildpep);
&pepace_stuff          if ($addpep);

# wormrna work
&make_wormrna          if ($buildrna);

# &make_FTP_wormbase     if ($opt_f); deprecated 19.02.02 kj
&make_anonymous_FTP    if ($ftp);

# GFF files
&dump_GFFs             if ($gffdump);
&split_GFFs            if ($gffsplit);

&map_PCR_RNAi_and_WTP  if ($map);
&make_agp              if ($agp);

&confirm_gene_models   if ($confirm);

 ##############################
 # mail $maintainer report    #
 ##############################

close LOG;

&mail_maintainer("WormBase Report: autoace_minder",$maintainers,$logfile);

 ##############################
 # hasta luego                #
 ##############################

exit(0);



#################################################################################
### Subroutines                                                               ###
#################################################################################

#################################################################################
# initiate autoace build                                                        #
#################################################################################
# Requirements : None
#
# Checks       : [01] - Fail if the build_in_progess flag is present.
#
# Does         : [01] - updates the WS version in database.wrm (under CVS)
#              : [02] - writes the WS version to the build_flag (writes to /wormsrv2/autoace/logs)
#              : [03] - writes log file A1:Update_WS_version to /wormsrv2/autoace/logs


sub initiate_build {

    local (*FLAG);
    my $cvs_file = "/wormsrv2/autoace/wspec/database.wrm";

    # exit if build_in_progress flag is present
    &usage(10) if (-e $build_flag);
    
    # commit to new build ..............
    $WS_version = &get_wormbase_version;
    
    # exit if no WS version is returned
    &usage(1) if (!defined($WS_version));
    
    # manipulate to assign last WS release version
    my $WS_new_name = $WS_version +1;
 
    # make new build_in_process flag
    system ("touch $build_flag");
    open (FLAG, ">>$build_flag"); 
    print FLAG "WS$WS_new_name\n";
    close FLAG;

    # tidy up the log directory
    system ("/usr/bin/rm -f /wormsrv2/autoace/logs/A*");           # Prepare section
    system ("/usr/bin/rm -f /wormsrv2/autoace/logs/B*");           # Build section
    
    # make sure that the database.wrm file is younger
    sleep 10;
    
    # update database.wrm using cvs
    print "Updating $cvs_file to include new WS number - using CVS\n\n";
    system ("cvs -d '/nfs/ensembl/cvsroot/' edit $cvs_file")                                           && die "Couldn't 'cvs edit' $cvs_file\n";
    system ("sed 's/$WS_version/$WS_new_name/' < $cvs_file > ${cvs_file}.new")                         && die "Couldn't edit $cvs_file\n";
    system ("mv /wormsrv2/autoace/wspec/database.wrm.new $cvs_file")                                   && die "Couldn't update $cvs_file\n";
    system ("cvs -d '/nfs/ensembl/cvsroot/' commit -m 'updating $cvs_file to $WS_new_name' $cvs_file") && die "Couldn't 'cvs commit' $cvs_file\n";

    # make a log file in /wormsrv2/autoace/logs
    system ("touch $logdir/A1:Updated_WS_version");

}
# end initiate_build

#################################################################################
# prepare primary databases                                                     #
#################################################################################
# Requirements : [01] - Presence of the Primary_databases_used_in_build file

# Checks       : [01] - Fail if the build_in_progess flag is absent.
#              : [02] - Fail if the Primary_databases_used_in_build file is absent

# Does         : [01] - checks the Primary_database_used_in_build data
#              : [03] - writes log file A1:Update_WS_version to /wormsrv2/autoace/logs

sub prepare_primaries {

    # exit if build_in_progress flag is present
    &usage(12) unless (-e $build_flag);

    # exit if the Primary_databases_used_in_build is absent
    &usage(13) unless (-e "/wormsrv2/autoace/logs/Primary_databases_used_in_build");

    local (*LAST_VER);
    my ($stlace_date,$brigdb_date,$citace_date,$cshace_date) = &FTP_versions;
    my ($stlace_last,$brigdb_last,$citace_last,$cshace_last) = &last_versions;
    my $options = "";

    # stlace
    print "\nstlace : $stlace_date last_build $stlace_last";
    unless ($stlace_last eq $stlace_date) {
	$options .= " -s $stlace_date";
	print "  => Update stlace";
    }

    # brigdb
    print "\nbrigdb : $brigdb_date last_build $brigdb_last";
    unless ($brigdb_last eq $brigdb_date) {
	$options .= " -b $brigdb_date";
	print "  => Update brigdb";
    }

    # citace
    print "\ncitace : $citace_date last_build $citace_last";
    unless ($citace_last eq $citace_date) {
	$options .= " -i $citace_date";
	print "  => Update citace";
    }

    # cshace
    print "\ncshace : $cshace_date last_build $cshace_last";
    unless ($cshace_last eq $cshace_date) {
	$options .= " -c $cshace_date";
	print "  => Update cshace";
    }
 
    print "\n\nrunning unpack_db.pl $options\n";
 
    # confirm unpack_db details, execute and update 'Primary_databases_used_in_build' file
    unless ($options eq "") {
	
	print "Do you want to unpack these databases ?\n";
	my $answer=<STDIN>;
	&usage(2) if ($answer ne "y\n");
	
	system ("$scriptdir/unpack_db.pl $options");
	
	# rewrite /wormsrv2/autoace/Primary_databases_used_in_build
	open (LAST_VER, ">$logdir/Primary_databases_used_in_build");
	print LAST_VER "stlace : $stlace_date\n"; 
	print LAST_VER "brigdb : $brigdb_date\n"; 
	print LAST_VER "citace : $citace_date\n"; 
	print LAST_VER "cshace : $cshace_date\n"; 
	close LAST_VER;
    }

    # make a unpack_db.pl log file in /logs
    system ("touch $logdir/A2:Unpack_FTP_databases");

    # transfer /wormsrv1/camace to /wormsrv2/camace 
    
    system("TransferDB -start /wormsrv1/camace -end /wormsrv2/camace -database -wspec -name camace")
	&& die "Couldn't run TransferDB for camace\n";

    # transfer /wormsrv1/geneace to /wormsrv2/geneace 
    
    system("TransferDB -start /wormsrv1/geneace -end /wormsrv2/geneace -database -wspec -name geneace")
	&& die "Couldn't run TransferDB for geneace\n";

    # check that all databases are present and working
    # do we need this? 

    # make a unpack_db.pl log file in /logs
    system ("touch $logdir/A3:Primary_databases_on_wormsrv2");

}

sub FTP_versions {

    local (*STLACE_FTP,*BRIGDB_FTP,*CITACE_FTP,*CSHACE_FTP);

    my $stlace_FTP = "/nfs/disk100/wormpub/private_ftp/incoming/stl/stlace_*";
    my $brigdb_FTP = "/nfs/disk100/wormpub/private_ftp/incoming/stl/brigdb_*";
    my $citace_FTP = "/nfs/disk100/wormpub/private_ftp/incoming/caltech/citace_*";
    my $cshace_FTP = "/nfs/disk100/wormpub/private_ftp/incoming/csh/cshl_*";
    my ($stlace_date,$brigdb_date,$citace_date,$cshace_date);

    # stlace
    open (STLACE_FTP, "/bin/ls -t $stlace_FTP |")  || die "cannot open $stlace_FTP\n";
    while (<STLACE_FTP>) {
	chomp;
	(/\_(\d+)\-(\d+)\-(\d+)\./);
	$stlace_date = substr($1,-2).$2.$3;    
        last;
    }
    close STLACE_FTP; 

    # brigdb
    open (BRIGDB_FTP, "/bin/ls -t $brigdb_FTP |");
    while (<BRIGDB_FTP>) {
	chomp;
	(/\_(\d+)\-(\d+)\-(\d+)\./);
	$brigdb_date = substr($1,-2).$2.$3;    
	last;
    }
    close BRIGDB_FTP; 

    # citace
    open (CITACE_FTP, "/bin/ls -t $citace_FTP |");
    while (<CITACE_FTP>) {
	chomp;
	(/\_(\d+)\-(\d+)\-(\d+)\./);
	$citace_date = substr($1,-2).$2.$3;
	last;
    }
    close CITACE_FTP; 

    # cshace
    open (CSHACE_FTP, "/bin/ls -t $cshace_FTP |");
    while (<CSHACE_FTP>) {
	chomp;
	(/\_(\d+)\-(\d+)\-(\d+)\./);
	$cshace_date = substr($1,-2).$2.$3;
	last;
    }
    close CSHACE_FTP; 
    
    # return current dates as 6-figure string
    return($stlace_date,$brigdb_date,$citace_date,$cshace_date);
}

sub last_versions {
    
    local (*LAST_VER);
    my ($stlace_last,$brigdb_last,$citace_last,$cshace_last);

    open (LAST_VER, "<$logdir/Primary_databases_used_in_build") || die "can't open old file\n";
    while (<LAST_VER>) {
	$stlace_last = $1 if /^stlace \: (\d+)$/;
	$brigdb_last = $1 if /^brigdb \: (\d+)$/;
	$citace_last = $1 if /^citace \: (\d+)$/;
	$cshace_last = $1 if /^cshace \: (\d+)$/;
    }
    close LAST_VER;

    usage(3) if (!defined $stlace_last);
    usage(4) if (!defined $brigdb_last);
    usage(5) if (!defined $citace_last);
    usage(6) if (!defined $cshace_last);

    # return last version dates as 6-figure string
    return($stlace_last,$brigdb_last,$citace_last,$cshace_last);

}
#__ end prepare_primaries __#




#################################################################################
# make_acefiles                                                                 #
#################################################################################

sub make_acefiles {

    system ("$scriptdir/make_acefiles -ne") && die "Couldn't run make_acefiles\n";
    print LOG " Write acefiles to disk\n";
    print LOG " => 'make_acefiles -ne'\n\n";

    # make a make_acefiles log file in /logs
    system ("touch $logdir/A4:Wrote_acefiles_to_wormbase");

}
#__ end make_acefiles __#


#################################################################################
# make_autoace                                                                  #
#################################################################################
# Requirements : [01] acefiles in /wormsrv2/wormbase directories
#                [02] config file to drive loading of data (autoace.config)

# Checks       : [01] - Fail if the build_in_progess flag is absent.
#              : [02] - Fail if the Primary_databases_used_in_build file is absent

# Does         : [01] - checks the Primary_database_used_in_build data
#              : [03] - writes log file A1:Update_WS_version to /wormsrv2/autoace/logs



sub make_autoace {

    # quit if make_acefiles has not been run
    &usage(8) unless (-e "$logdir/A4:Wrote_acefiles_to_wormbase");
	
    if ($build || $builddb) { 
	system ("$scriptdir/make_autoace -p /wormsrv2/autoace -r") && die "Couldn't run autoace -rc\n";
	print LOG " Build autoace (database)\n";
	print LOG " =>'make_autoace -p /wormsrv2/autoace -r'\n\n";
	
	# make a make_autoace log file in /logs
	system ("touch $logdir/B1:Build_autoace_database");
    }

    if ($build || $buildchrom) {
	system ("$scriptdir/chromosome_dump.pl -dc") && die "Couldn't run chromosome_dump -dc\n" ;
	print LOG " Build autoace (CHROMOSOMES)\n";
	print LOG " => 'chromosome_dump.pl -dc'\n\n";

	# make a make_autoace log file in /logs
	system ("touch $logdir/B2:Dump_DNA_files");
    }

    if ($buildrelease) {

	# quit if the build is not complete
	&usage(13) unless (-e "$logdir/B1:Build_autoace_database");
	
	system ("$scriptdir/make_autoace -p /wormsrv2/autoace -d")  && die "Couldn't run autoace -d\n"; 
	print LOG " Build autoace (release)\n";
	print LOG " => 'make_autoace -p /wormsrv2/autoace -d'\n\n";

	# make a make_autoace log file in /logs
	system ("touch $logdir/D1:Make_release_files");
    }

}
#__ end make_autoace __#





#################################################################################
# check_release                                                                 #
#################################################################################

sub check_release {

    # exit if autoace has not been built
    &usage(7) unless (-e "$logdir/make_autoace_complete");

    # have you run GFFsplitter ?
    # if no then this is about checking the DNA/agp files
    unless ((-e "$logdir/C2:Split_GFF_files") && (-e "$logdir/B3:Made_agp_files")) {
	
	&dump_GFFs;
	system ("$scriptdir/check_DNA.pl") && die "Couldn't run check_DNA.pl\n";
	system ("$scriptdir/make_agp_file.pl") && die "Couldn't run make_agp_file.pl\n";
	system ("$scriptdir/agp2dna.pl") && die "Couldn't run agp2dna.pl\n";
	
	# make a make_autoace log file in /logs
	system ("touch $logdir/made_agp_files");

    }
    # if yes then this is about checking the class counts
    else {
	system ("$scriptdir/dbcomp -f /wormsrv2/WS${WS_previous}") && die "Couldn't run dbcomp -f\n";
	print LOG " Make dbcomp report\n";
	print LOG " => 'dbcomp -f /wormsrv2/WS${WS_previous}'\n\n";
    }
}
#__ end check_release __#

#################################################################################
# similarity mapping                                                            #
#################################################################################

sub pre_blat_copy {
    # make a copy of the database so far
    # transfer /wormsrv1/geneace to /wormsrv2/geneace 
    
    system("TransferDB -start /wormsrv2/autoace -end /wormsrv2/autoace_midway -database -wspec -name autoace_midway")
	&& die "Couldn't run TransferDB for autoace\n";
    
    print LOG " Copy autoace prior to BLAT analysis\n";
    
    # make a make_autoace log file in /logs
    system ("touch $logdir/copy_autoace_before_BLAT_run");  
}

sub blat_jobs {
    
    local (*WRITEDB);


    # run the blat jobs

    # blat_them_all -e
    system ("$scriptdir/blat_them_all.pl -nbsve") && die "Couldn't blat_them_all -nbsve\n";

    # blat_them_all -m
    system ("$scriptdir/blat_them_all.pl -bsm") && die "Couldn't blat_them_all -nbsve\n";

    # blat_them_all -o
    system ("$scriptdir/blat_them_all.pl -bso") && die "Couldn't blat_them_all -nbsve\n";

    # blat_them_all -x
    system ("$scriptdir/blat_them_all.pl -bsx") && die "Couldn't blat_them_all -nbsve\n";

    # quit if blat_them_all has not been run
    &usage(9) unless (-e "$logdir/blat_transcript_data");

    # read in the ace files (autoace only)
}

sub parse_blat_files {

my $command=<<END;
pparse /wormsrv2/autoace/BLAT/virtual_objects.autoace.BLAT_EST.ace 
pparse /wormsrv2/autoace/BLAT/virtual_objects.autoace.BLAT_mRNA.ace 
pparse /wormsrv2/autoace/BLAT/virtual_objects.autoace.BLAT_EMBL.ace 
pparse /wormsrv2/autoace/BLAT/virtual_objects.autoace.BLATX_NEMATODE.ace 
pparse /wormsrv2/autoace/BLAT/virtual_objects.autoace.ci.EST.ace 
pparse /wormsrv2/autoace/BLAT/virtual_objects.autoace.ci.mRNA.ace 
pparse /wormsrv2/autoace/BLAT/virtual_objects.autoace.ci.EMBL.ace 
save
pparse /wormsrv2/autoace/BLAT/autoace.blat.EST.ace            
save
pparse /wormsrv2/autoace/BLAT/autoace.blat.mRNA.ace 
save
pparse /wormsrv2/autoace/BLAT/autoace.blat.EMBL.ace 
save
pparse /wormsrv2/autoace/BLAT/autoace.blat.nematode.ace 
save
pparse /wormsrv2/autoace/BLAT/autoace.good_introns.EST.ace 
save
pparse /wormsrv2/autoace/BLAT/autoace.good_introns.mRNA.ace 
save
pparse /wormsrv2/autoace/BLAT/autoace.good_introns.EMBL.ace 
save 
quit
END

    open (WRITEDB, "| $tace -tsuser Sanger_BLAT_data /wormsrv2/autoace |") || die "Couldn't open pipe to autoace\n";
    print WRITEDB $command;
    close WRITEDB;
    
    # make a make_autoace log file in /logs
    system ("touch $logdir/loaded_BLAT_similarities");


}
#__ end parse_blat_files __#

sub parse_homol_data {
    
    my $command;

$command=<<END;
pparse /wormsrv2/wormbase/ensembl_dumps/blastp_ensembl.ace 
save 
quit
END

    open (WRITEDB, "| $tace -tsuser wublastp_data /wormsrv2/autoace  |") || die "Couldn't open pipe to autoace\n";
    print WRITEDB $command;
    close WRITEDB;

$command=<<END;
pparse /wormsrv2/wormbase/ensembl_dumps/blastx_ensembl.ace 
save 
quit
END

    open (WRITEDB, "| $tace -tsuser wublastx_data /wormsrv2/autoace  |") || die "Couldn't open pipe to autoace\n";
    print WRITEDB $command;
    close WRITEDB;

$command=<<END;
pparse /wormsrv2/wormbase/ensembl_dumps/blast_ensembl.peptides.ace 
save 
quit
END

    open (WRITEDB, "| $tace -tsuser wublast_protein_info /wormsrv2/autoace  |") || die "Couldn't open pipe to autoace\n";
    print WRITEDB $command;
    close WRITEDB;

$command=<<END;
pparse /wormsrv2/wormbase/ensembl_dumps/waba.ace
save 
quit
END

    open (WRITEDB, "| $tace -tsuser waba_data /wormsrv2/autoace  |") || die "Couldn't open pipe to autoace\n";
    print WRITEDB $command;
    close WRITEDB;

    # make a make_autoace log file in /logs
#    system ("touch $logdir/loaded_BLAT_similarities");


}
#__ end parse_homol_data __#



#################################################################################
# make_wormpep                                                                  #
#################################################################################

sub make_wormpep {
    system ("$scriptdir/make_wormpep -r $WS_version") && die "Couldn't run make_wormpep -r\n";
    print LOG " Build wormpep release $WS_version\n";
    print LOG " =>'make_wormpep -r $WS_version'\n\n";

}

#################################################################################
# make_wormrna                                                                  #
#################################################################################

sub make_wormrna {
    system ("$scriptdir/make_wormrna -r $WS_version") && die "Couldn't run make_wormrna -r\n";
    print LOG " Build wormrna release $WS_version\n";
    print LOG " =>'make_wormrna -r $WS_version'\n\n";

}
#__ end make_wormrna __#


#################################################################################
# pepace stuff - run patch_pepace.pl then pepace2autoace                        #
#################################################################################

sub pepace_stuff {
    system ("$scriptdir/patch_pepace.pl") && die "Couldn't run patch_pepace.pl\n";
    print LOG " Reading patch_pepace files into pepace\n";
    print LOG " =>'patch_pepace.pl'\n\n";

    system ("$scriptdir/pepace2autoace") && die "Couldn't run pepace2autoace\n";
    print LOG " Dumping files from pepace and reading into autoace\n";
    print LOG " =>'pepace2autoace'\n\n";
}
#################################################################################
# dump GFF files                                                                #
#################################################################################

sub dump_GFFs {
    system ("$scriptdir/chromosome_dump.pl -g") && die "Couldn't make GFF files\n";
    print LOG " Dumped GFF files for $WS_version\n";
    print LOG " =>'chromosome_dump.pl -g'\n\n";

    # make dumped_GFF_file in /logs
    system ("touch $logdir/C1:Dumped_GFF_files");
}

sub split_GFFs {
    system ("$scriptdir/GFFsplitter -s") && die "Couldn't split GFF files\n";
    print LOG " Split GFF files for $WS_version\n";
    print LOG " =>'GFFsplitter -s'\n\n";

    # make GFF_splitter file in /logs
    system ("touch $logdir/C2:Split_GFF_files");
}

#################################################################################
# map PCR, RNAi and WTP                                                         #
#################################################################################

sub map_PCR_RNAi_and_WTP {
    system("$scriptdir/map_PCR_products") && die "Couldn't run map_PCR_products\n";
    print LOG " Mapped PCR products for $WS_version\n";
    print LOG " =>'map_PCR_products'\n\n";
    system("$scriptdir/map_RNAi.pl") && die "Couldn't run map_RNAi.pl\n";
    print LOG " Mapped RNAi experiments for $WS_version\n";
    print LOG " =>'map_RNAi.pl'\n\n";
    system("$scriptdir/map_WTP.pl") && die "Couldn't run map_WTP.pl\n";
    print LOG " Mapped WTP objects for $WS_version\n";
    print LOG " =>'map_WTP.pl'\n\n";
}

#################################################################################
# confirm_gene models                                                           #
#################################################################################

sub confirm_gene_models {


    # confirm_genes from EST (-e) and mRNA (-m) data sets
    system ("$scriptdir/confirm_genes.pl -e");
    system ("$scriptdir/confirm_genes.pl -m");

$command=<<END;
pparse /wormsrv2/wormbase/misc/misc_confirmed_by_EST.ace
pparse /wormsrv2/wormbase/misc/misc_confirmed_by_mRNA.ace
save 
quit
END
   
    open (WRITEDB, "| $tace -tsuser confirmed_genes /wormsrv2/autoace  |") || die "Couldn't open pipe to autoace\n";
    print WRITEDB $command;
    close WRITEDB;

    # make dumped_GFF_file in /logs
    system ("touch $logdir/C4:Confirm_gene_models");

}
#__ end confirm_gene_models __#

#################################################################################
# make agp file for yellow brick road                                           #
#################################################################################

sub make_agp {

    system("$scriptdir/make_agp_file.pl") && die "Couldn't run make_agp_file\n";
    print LOG " Make agp files for $WS_version\n";
    print LOG " =>'make_agp_file.pl'\n\n";
}

#################################################################################
# make_FTP_wormbase                                                             #
#################################################################################

# deprecated 19.02.02 kj
#sub make_FTP_wormbase {
#    system ("$scriptdir/make_FTP_wormbase") && die "Couldn't run make_FTP_wormbase\n";
#    print LOG " Move version to ftp-wormbase\n";
#    print LOG " => 'make_FTP_wormbase\n\n";
#}

#################################################################################
# make_anonymous_FTP
#################################################################################

sub make_anonymous_FTP {



}
 ########################################
 # Open logfile                         #
 ########################################

sub logfile_details {

print LOG "# autoace_minder\n\n";     
print LOG "# version        : $version\n";
print LOG "# run details    : $rundate $runtime\n";
print LOG "\n";
print LOG "WormBase version : WS${WS_version}\n";
print LOG "Wormpep version  : wormpep${WS_version}\n\n";

print LOG "======================================================================\n";
print LOG "  -full         : Full WS release (executes all of the following -wbcp)\n"               if ($full);
print LOG "  -initial      : Start an autoace build\n"                                              if ($initial);
print LOG "  -acefile      : Write .acefiles from WormBase copies of the databases\n"               if ($acefile);
print LOG "  -build        : Build autoace\n"                                                       if ($build);
print LOG "  -builddb      : Build autoace : DB only\n"                                             if ($builddb);
print LOG "  -buildchrom   : Build autoace : DNA data\n"                                            if ($buildchrom);
print LOG "  -buildrelease : Build autoace : Release directory\n"                                   if ($buildrelease);
print LOG "  -check        : Check DB consistency and diffs from previous version\n"                if ($check);
print LOG "  -buildpep     : Build wormpep database\n"                                              if ($buildpep);
print LOG "  -addpep       : Running patch_pepace.pl and pepace2autoace\n"                          if ($addpep);
print LOG "  -buildrna     : Build wormrna database\n"                                              if ($buildrna);
print LOG "  -addhomol     : Load blast data into autoace\n"                                        if ($addhomol);
print LOG "  -ftp          : Move WS release to the external FTP site (Full public release)\n"      if ($ftp);
print LOG "  -debug        : Verbose/Debug mode\n"                                                  if ($debug);
print LOG "  -gffdump      : Dump GFF files\n"                                                      if ($gffdump);
print LOG "  -gffsplit     : Split GFF files\n"                                                     if ($gffsplit);
print LOG "  -map          : map PCR, RNAi and WTP\n"                                               if ($map);
print LOG "  -agp          : make agp files for yellow brick road\n"                                if ($agp);
print LOG "======================================================================\n";
print LOG "\n";

}

#######################################################################
# Help and error trap outputs                                         #
#######################################################################

sub run_details {
    print "# autoace_minder\n\n";     
    print "# version        : $version\n";
    print "# run details    : $rundate $runtime\n";
    print "\n";
    print "WormBase version : WS${WS_version}\n";
    print "Wormpep version  : wormpep${WS_version}\n";
    print "\n";
    print "  -full         : Full WS release (executes all of the following -wbcp)\n"          if ($full);
    print "  -acefile      : Write .acefiles from WormBase copies of the databases\n"          if ($acefile);
    print "  -build        : Build autoace\n"                                                  if ($build);
    print "  -builddb      : Build autoace : DB only\n"                                        if ($builddb);
    print "  -buildchrom   : Build autoace : DNA data\n"                                       if ($buildchrom);
    print "  -buildrelease : Build autoace : Release directory\n"                              if ($buildrelease);
    print "  -check        : Check DB consistency and diffs from previous version\n"           if ($check);
    print "  -buildpep     : Build wormpep database\n"                                         if ($buildpep);
    print "  -buildrna     : Build wormrna database\n"                                         if ($buildrna);
    print "  -addhomol     : Load blast data into autoace\n"                                   if ($addhomol);
    print "  -ftp          : Move WS release to the external FTP site (Full public release)\n" if ($ftp);
    print "  -debug        : Verbose/Debug mode\n"                                             if ($debug);
    print "  -gffdump      : Dump GFF files\n"                                                 if ($gffdump);
    print "  -gffsplit     : Split GFF files\n"                                                if ($gffsplit);
    print "  -map          : map PCR, RNAi and WTP\n"                                          if ($map);
    print "  -agp          : make agp file for yellow brick road\n"                            if ($agp);
    print "\n\n";
}

sub usage {
    my $error = shift;

    if ($error == 1) {
	# No WormBase release number file
	print "The WormBase release number cannot be parsed\n";
	print "Check File: /wormsrv2/autoace/wspec/database.wrm\n\n";
	exit(0);
    }
    elsif ($error == 2) {
	# Abort unpack_db.pl script
	print "Abort unpack_db run.\n";
	print "\n\n";
	exit(0);
    }
    elsif ($error == 3) {
	# No last_version date for stlace
	print "Abort unpack_db run. stlace\n";
	print "\n\n";
	exit(0);
    }
    elsif ($error == 4) {
	# No last_version date for brigdb
	print "Abort unpack_db run. brigdb\n";
	print "\n\n";
	exit(0);
    }
    elsif ($error == 5) {
	# No last_version date for citace
	print "Abort unpack_db run. citace\n";
	print "\n\n";
	exit(0);
    }
    elsif ($error == 6) {
	# No last_version date for cshace
	print "Abort unpack_db run. cshace\n";
	print "\n\n";
	exit(0);
    }
    elsif ($error == 7) {
	# Check build prior to building
	print "You haven't built the database yet!\n";
	exit(0);
    }
    elsif ($error == 8) {
	# Check acefile dump prior to building
	print "You haven't written up-to-date .acefiles yet!\n";
	exit(0);
    }
    elsif ($error == 9) {
	# Check blat run
	print "You haven't run blat_them_all.\n";
	exit(0);
    }
    elsif ($error == 10) {
	# Build_in_progress flag already exists when build initiation attempted
	print "\nautoace build aborted:\n";
	print "The 'build_in_progress' flag already exists\n";
	print "You cannot start a new build until this flag is removed\n\n";
	exit(0);
    }
    elsif ($error == 11) {
	# Build_in_progress flag is newer than WormBase version number
	print "\nautoace build aborted:\n";
	print "The WS version predates the 'build_in_progress' flag \n";
	print "Check that the WS version number is correct\n\n";
	exit(0);
    }
    elsif ($error == 12) {
	# Build_in_progress flag is absent when preparing primaries
	print "\nautoace build aborted:\n";
	print "The 'build_in_progress' flag is absent. \n";
	print "You can't overwrite the primary databases on wormsrv2 prior to a new build.\n\n";
	exit(0);
    }
    elsif ($error == 13) {
	# B2:Build_autoace_database absent when making release .tar.gz files
	print "\nautoace build aborted:\n";
	print "The 'Build_autoace_database' flag is absent. \n";
	print "You can't write the release .tar.gz files prior to a completing the  build.\n\n";
	exit(0);
    }
    elsif ($error == 0) {
	# Normal help menu
	exec ('perldoc',$0);
    }
}


__END__

=pod

=head2   NAME - autoace_minder

=head1 USAGE

=over 4

=item autoace_minder [-options]

=back

autoace_minder is a wrapper to drive the various scripts utilised in the
build of a C.elegans WS database release.

autoace_minder mandatory arguments:

=over 4

=item none, (but it won\'t do anything)

=back

autoace_minder OPTIONAL arguments:

=over 4

=item -full, Full WS release (executes all of the following -wbcp)

=item -acefile, Write .acefiles from WormBase copies of the databases

=item -build, Build autoace : (performs options 1 & 2 below)

=item -builddb, Build autoace : Database only

=item -buildchrom, Build autoace : Dump DNA

=item -buildrelease, Build autoace : release directory

=item -check, Check DB consistency and diffs from previous version

=item -buildpep, Build wormpep database

=item -addpep, prepare pepace and then dump from pepace into autoace

=item -ftp, Move WS release to the external FTP site (Full public release)

=item -debug, Verbose/Debug mode

=item -gffdump, dump GFF files

=item -gffsplit, split GFF files

=item -map, map PCR, RNAi and WTP

=item -blat, map similarities (BLAT jobs)

=item -addblat, parse BLAT files
 
=back

=cut

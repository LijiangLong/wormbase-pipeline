#!/usr/local/bin/perl

#Steven Jones, Sanger Centre, 1997


if ($#ARGV !=1) {print "usage: $0 <options> EST_database Genomic_Sequence\nOptions\n";exit 1;}

###############################################
#get ESTs which match the sequence 
###############################################


open(blastoutput,"blastn $ARGV[0] $ARGV[1] B=1000000 | MSPcrunch -l 0 - |");
$blasterror=$?;
while (<blastoutput>) {
  if (/^>\s+(\S+)/) {push(@ests,$1);}
}
close blastoutput;


###############################################
#map the ESTs to the genomic sequence 
###############################################

@genomic=&getseq("$ARGV[1]");

foreach $est (@ests) {
  if (-e "/tmp/est$$") {unlink "/tmp/est$$";}
  system("agrep -d \"\\>\" $est $ARGV[0] > /tmp/est$$");                                   	
  @est=&getseq("/tmp/est$$");
  $greperror=$?;
  open(estoutput,"est_genome  -minscore 100 -genome $ARGV[1] -est /tmp/est$$ |");
  $est_genomeerror=$?;
  $reversed="false";
  #print out the gff file 
  #
  # For ests where there are no splices then we don't really have idea what strand the gene is 
  # on (unless we believe the .3 .5 assignments). 
  
  $intronic="no";$reversed="no";
  
  #quickly write a tempfile and find out what strand the gene is on
  open(tempfile,">/tmp/temp_est_genome$$");
  while(<estoutput>) {if (/REVERSED/) {$reversed="yes";}
		      if (/Intron/) {$intronic="yes";}   
		      print tempfile $_;}
  close tempfile;
  $frame=".";
  if ($reversed eq "yes" && $intronic eq "yes") {$frame="-";}
  if ($reversed eq "no" && $intronic eq "yes") {$frame="+";}
  
  
  open(tempfile,"/tmp/temp_est_genome$$");
  
  while (<tempfile>) {
    if (/^Exon\s+(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\d+)\s+(\d+)/) {
      print "$5\test_genome\texon\t$3\t$4\t$2\t$frame\t.\t$est\t$6\t$7\n";
    }
    if (/^Span\s+(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\d+)\s+(\d+)/) {
      print "$5\test_genome\tmatch\t$3\t$4\t$2\t.\t.\t$est\t$6\t$7\n";
    }
    if (/Intron\s+(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\S+)/) {
      print "$5\test_genome\tintron\t$3\t$4\t$2\t$frame\t.\t$est\n";
    }
    
  }
}
close estoutput;
unlink "/tmp/est$$";
unlink "/tmp/temp_est_genome$$";

if (($blasterror+$greperror+$est_genomeerror)!=0) {print STDERR "$0 failed\n";exit 1} else {exit 0;}



######################################################
#Subroutines 
######################################################

######################################################
#make sequence array from fasta file 
######################################################

sub getseq {
  local(@array);
  local($sequence);
  open(file,"$_[0]");
  while(<file>) {
    s/^>.+//;s/\n//;s/\s+//g;
    $sequence=$sequence.$_;
    
  }
  @array=split('',$sequence);
  return  @array;
  
}


####################################################
#revcomp string 
####################################################


sub revcomp {
  local(@sequence);
  local($output);
  local($intron);
  $intron=$_[0];
  $intron=~tr/A-Z/a-z/;
  $intron=~s/g/C/g;
  $intron=~s/c/G/g;
  $intron=~s/a/T/g;
  $intron=~s/t/A/g;
  @sequence=split(//,$intron);
  $output=join('',reverse(@sequence));
  return $output;
}

